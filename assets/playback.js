(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function() {
return webpackJsonp([0],{

/***/ 140:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__closure_polyfill__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__targetSelector__ = __webpack_require__(391);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__selenium_api__ = __webpack_require__(227);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__selenium_browserbot__ = __webpack_require__(228);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__locatorBuilders__ = __webpack_require__(230);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__region__ = __webpack_require__(394);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__prompt_injector__ = __webpack_require__(395);\n/*\n * Copyright 2017 SideeX committers\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */const selenium=new __WEBPACK_IMPORTED_MODULE_3__selenium_api__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_4__selenium_browserbot__[\"b\" /* default */].createForWindow(window,true));\n/* harmony export (immutable) */ __webpack_exports__[\"selenium\"] = selenium;\nconst locatorBuilders=new __WEBPACK_IMPORTED_MODULE_5__locatorBuilders__[\"a\" /* default */](window);let contentSideexTabId=window.contentSideexTabId;let targetSelector;Object(__WEBPACK_IMPORTED_MODULE_7__prompt_injector__[\"a\" /* attach */])(selenium);function doCommands(request,_sender,sendResponse){if(request.commands){if(request.commands=='waitPreparation'){selenium['doWaitPreparation']('',selenium.preprocessParameter(''));sendResponse({});}else if(request.commands=='prePageWait'){selenium['doPrePageWait']('',selenium.preprocessParameter(''));sendResponse({new_page:window.sideex_new_page});}else if(request.commands=='pageWait'){selenium['doPageWait']('',selenium.preprocessParameter(''));sendResponse({page_done:window.sideex_page_done});}else if(request.commands=='ajaxWait'){selenium['doAjaxWait']('',selenium.preprocessParameter(''));sendResponse({ajax_done:window.sideex_ajax_done});}else if(request.commands=='domWait'){selenium['doDomWait']('',selenium.preprocessParameter(''));sendResponse({dom_time:window.sideex_new_page});}else if(request.commands==='evaluateConditional'){try{let value=selenium['doEvaluateConditional'](request.target);sendResponse({result:'success',value:value});}catch(e){sendResponse({result:e.message});}}else{const upperCase=request.commands.charAt(0).toUpperCase()+request.commands.slice(1);if(selenium['do'+upperCase]!=null){try{document.body.setAttribute('SideeXPlayingFlag',true);let returnValue=selenium['do'+upperCase](selenium.preprocessParameter(request.target),selenium.preprocessParameter(request.value));if(returnValue instanceof Promise){// The command is a asynchronous function\nreturnValue.then(function(){// Asynchronous command completed successfully\ndocument.body.removeAttribute('SideeXPlayingFlag');sendResponse({result:'success'});}).catch(function(reason){// Asynchronous command failed\ndocument.body.removeAttribute('SideeXPlayingFlag');sendResponse({result:reason});});}else{// Synchronous command completed successfully\ndocument.body.removeAttribute('SideeXPlayingFlag');sendResponse({result:'success'});}}catch(e){// Synchronous command failed\ndocument.body.removeAttribute('SideeXPlayingFlag');sendResponse({result:e.message});}}else{sendResponse({result:'Unknown command: '+request.commands});}}//do every command need giving sideex id\nif(contentSideexTabId===-1){contentSideexTabId=request.mySideexTabId;}return true;}if(request.prepareToInteract){sendResponse({result:'success',rect:selenium.prepareToInteract_(request.locator)});}if(request.buildLocators){try{const element=selenium.browserbot.findElement(request.locator);const locators=locatorBuilders.buildAll(element);sendResponse({result:'success',locators});}catch(e){sendResponse({result:e.message});}}if(request.resolveLocator){try{const element=selenium.browserbot.findElement(request.locator);const locator=locatorBuilders.buildAll(element).find(([loc,strat])=>/^xpath/.test(strat))[0];//eslint-disable-line no-unused-vars\nsendResponse({result:'success',locator});}catch(e){sendResponse({result:e.message});}}if(request.selectMode){sendResponse(true);if(request.selecting&&request.element){targetSelector=new __WEBPACK_IMPORTED_MODULE_2__targetSelector__[\"a\" /* default */](function(element,win){if(element&&win){const target=locatorBuilders.buildAll(element);locatorBuilders.detach();if(target!=null&&target instanceof Array){if(target){//self.editor.treeView.updateCurrentCommand('targetCandidates', target);\n__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({selectTarget:true,target:target,selectNext:request.selectNext});}}}targetSelector=null;},function(){__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({cancelSelectTarget:true});});}else if(request.selecting&&request.region){Object(__WEBPACK_IMPORTED_MODULE_6__region__[\"a\" /* editRegion */])(request.rect,target=>{if(target){__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({selectTarget:true,target:[[target]],selectNext:request.selectNext});}else{__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({cancelSelectTarget:true,selectNext:request.selectNext});}});}else{if(targetSelector){targetSelector.cleanup();targetSelector=null;return;}else{Object(__WEBPACK_IMPORTED_MODULE_6__region__[\"b\" /* removeRegion */])();return;}}}}// show element\nfunction startShowElement(message){if(message.showElement){try{const result=selenium['doShowElement'](message.targetValue);return Promise.resolve({result:result});}catch(e){// If we didn't find the element, it means that another frame might have found it,\n// so we don't resolve the promise. If no frame finds it, then the promise will\n// get rejected.\n}}}if(!window._listener){window._listener=doCommands;__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.onMessage.addListener(startShowElement);__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.onMessage.addListener(doCommands);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29udGVudC9jb21tYW5kcy1hcGkuanM/MDkxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTcgU2lkZWVYIGNvbW1pdHRlcnNcbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovaW1wb3J0IGJyb3dzZXIgZnJvbSd3ZWJleHRlbnNpb24tcG9seWZpbGwnO2ltcG9ydCcuL2Nsb3N1cmUtcG9seWZpbGwnO2ltcG9ydCBUYXJnZXRTZWxlY3RvciBmcm9tJy4vdGFyZ2V0U2VsZWN0b3InO2ltcG9ydCBTZWxlbml1bSBmcm9tJy4vc2VsZW5pdW0tYXBpJztpbXBvcnQgQnJvd3NlckJvdCBmcm9tJy4vc2VsZW5pdW0tYnJvd3NlcmJvdCc7aW1wb3J0IExvY2F0b3JCdWlsZGVycyBmcm9tJy4vbG9jYXRvckJ1aWxkZXJzJztpbXBvcnR7ZWRpdFJlZ2lvbixyZW1vdmVSZWdpb259ZnJvbScuL3JlZ2lvbic7aW1wb3J0e2F0dGFjaH1mcm9tJy4vcHJvbXB0LWluamVjdG9yJztleHBvcnQgY29uc3Qgc2VsZW5pdW09bmV3IFNlbGVuaXVtKEJyb3dzZXJCb3QuY3JlYXRlRm9yV2luZG93KHdpbmRvdyx0cnVlKSk7Y29uc3QgbG9jYXRvckJ1aWxkZXJzPW5ldyBMb2NhdG9yQnVpbGRlcnMod2luZG93KTtsZXQgY29udGVudFNpZGVleFRhYklkPXdpbmRvdy5jb250ZW50U2lkZWV4VGFiSWQ7bGV0IHRhcmdldFNlbGVjdG9yO2F0dGFjaChzZWxlbml1bSk7ZnVuY3Rpb24gZG9Db21tYW5kcyhyZXF1ZXN0LF9zZW5kZXIsc2VuZFJlc3BvbnNlKXtpZihyZXF1ZXN0LmNvbW1hbmRzKXtpZihyZXF1ZXN0LmNvbW1hbmRzPT0nd2FpdFByZXBhcmF0aW9uJyl7c2VsZW5pdW1bJ2RvV2FpdFByZXBhcmF0aW9uJ10oJycsc2VsZW5pdW0ucHJlcHJvY2Vzc1BhcmFtZXRlcignJykpO3NlbmRSZXNwb25zZSh7fSk7fWVsc2UgaWYocmVxdWVzdC5jb21tYW5kcz09J3ByZVBhZ2VXYWl0Jyl7c2VsZW5pdW1bJ2RvUHJlUGFnZVdhaXQnXSgnJyxzZWxlbml1bS5wcmVwcm9jZXNzUGFyYW1ldGVyKCcnKSk7c2VuZFJlc3BvbnNlKHtuZXdfcGFnZTp3aW5kb3cuc2lkZWV4X25ld19wYWdlfSk7fWVsc2UgaWYocmVxdWVzdC5jb21tYW5kcz09J3BhZ2VXYWl0Jyl7c2VsZW5pdW1bJ2RvUGFnZVdhaXQnXSgnJyxzZWxlbml1bS5wcmVwcm9jZXNzUGFyYW1ldGVyKCcnKSk7c2VuZFJlc3BvbnNlKHtwYWdlX2RvbmU6d2luZG93LnNpZGVleF9wYWdlX2RvbmV9KTt9ZWxzZSBpZihyZXF1ZXN0LmNvbW1hbmRzPT0nYWpheFdhaXQnKXtzZWxlbml1bVsnZG9BamF4V2FpdCddKCcnLHNlbGVuaXVtLnByZXByb2Nlc3NQYXJhbWV0ZXIoJycpKTtzZW5kUmVzcG9uc2Uoe2FqYXhfZG9uZTp3aW5kb3cuc2lkZWV4X2FqYXhfZG9uZX0pO31lbHNlIGlmKHJlcXVlc3QuY29tbWFuZHM9PSdkb21XYWl0Jyl7c2VsZW5pdW1bJ2RvRG9tV2FpdCddKCcnLHNlbGVuaXVtLnByZXByb2Nlc3NQYXJhbWV0ZXIoJycpKTtzZW5kUmVzcG9uc2Uoe2RvbV90aW1lOndpbmRvdy5zaWRlZXhfbmV3X3BhZ2V9KTt9ZWxzZSBpZihyZXF1ZXN0LmNvbW1hbmRzPT09J2V2YWx1YXRlQ29uZGl0aW9uYWwnKXt0cnl7bGV0IHZhbHVlPXNlbGVuaXVtWydkb0V2YWx1YXRlQ29uZGl0aW9uYWwnXShyZXF1ZXN0LnRhcmdldCk7c2VuZFJlc3BvbnNlKHtyZXN1bHQ6J3N1Y2Nlc3MnLHZhbHVlOnZhbHVlfSk7fWNhdGNoKGUpe3NlbmRSZXNwb25zZSh7cmVzdWx0OmUubWVzc2FnZX0pO319ZWxzZXtjb25zdCB1cHBlckNhc2U9cmVxdWVzdC5jb21tYW5kcy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStyZXF1ZXN0LmNvbW1hbmRzLnNsaWNlKDEpO2lmKHNlbGVuaXVtWydkbycrdXBwZXJDYXNlXSE9bnVsbCl7dHJ5e2RvY3VtZW50LmJvZHkuc2V0QXR0cmlidXRlKCdTaWRlZVhQbGF5aW5nRmxhZycsdHJ1ZSk7bGV0IHJldHVyblZhbHVlPXNlbGVuaXVtWydkbycrdXBwZXJDYXNlXShzZWxlbml1bS5wcmVwcm9jZXNzUGFyYW1ldGVyKHJlcXVlc3QudGFyZ2V0KSxzZWxlbml1bS5wcmVwcm9jZXNzUGFyYW1ldGVyKHJlcXVlc3QudmFsdWUpKTtpZihyZXR1cm5WYWx1ZSBpbnN0YW5jZW9mIFByb21pc2Upey8vIFRoZSBjb21tYW5kIGlzIGEgYXN5bmNocm9ub3VzIGZ1bmN0aW9uXG5yZXR1cm5WYWx1ZS50aGVuKGZ1bmN0aW9uKCl7Ly8gQXN5bmNocm9ub3VzIGNvbW1hbmQgY29tcGxldGVkIHN1Y2Nlc3NmdWxseVxuZG9jdW1lbnQuYm9keS5yZW1vdmVBdHRyaWJ1dGUoJ1NpZGVlWFBsYXlpbmdGbGFnJyk7c2VuZFJlc3BvbnNlKHtyZXN1bHQ6J3N1Y2Nlc3MnfSk7fSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXsvLyBBc3luY2hyb25vdXMgY29tbWFuZCBmYWlsZWRcbmRvY3VtZW50LmJvZHkucmVtb3ZlQXR0cmlidXRlKCdTaWRlZVhQbGF5aW5nRmxhZycpO3NlbmRSZXNwb25zZSh7cmVzdWx0OnJlYXNvbn0pO30pO31lbHNley8vIFN5bmNocm9ub3VzIGNvbW1hbmQgY29tcGxldGVkIHN1Y2Nlc3NmdWxseVxuZG9jdW1lbnQuYm9keS5yZW1vdmVBdHRyaWJ1dGUoJ1NpZGVlWFBsYXlpbmdGbGFnJyk7c2VuZFJlc3BvbnNlKHtyZXN1bHQ6J3N1Y2Nlc3MnfSk7fX1jYXRjaChlKXsvLyBTeW5jaHJvbm91cyBjb21tYW5kIGZhaWxlZFxuZG9jdW1lbnQuYm9keS5yZW1vdmVBdHRyaWJ1dGUoJ1NpZGVlWFBsYXlpbmdGbGFnJyk7c2VuZFJlc3BvbnNlKHtyZXN1bHQ6ZS5tZXNzYWdlfSk7fX1lbHNle3NlbmRSZXNwb25zZSh7cmVzdWx0OidVbmtub3duIGNvbW1hbmQ6ICcrcmVxdWVzdC5jb21tYW5kc30pO319Ly9kbyBldmVyeSBjb21tYW5kIG5lZWQgZ2l2aW5nIHNpZGVleCBpZFxuaWYoY29udGVudFNpZGVleFRhYklkPT09LTEpe2NvbnRlbnRTaWRlZXhUYWJJZD1yZXF1ZXN0Lm15U2lkZWV4VGFiSWQ7fXJldHVybiB0cnVlO31pZihyZXF1ZXN0LnByZXBhcmVUb0ludGVyYWN0KXtzZW5kUmVzcG9uc2Uoe3Jlc3VsdDonc3VjY2VzcycscmVjdDpzZWxlbml1bS5wcmVwYXJlVG9JbnRlcmFjdF8ocmVxdWVzdC5sb2NhdG9yKX0pO31pZihyZXF1ZXN0LmJ1aWxkTG9jYXRvcnMpe3RyeXtjb25zdCBlbGVtZW50PXNlbGVuaXVtLmJyb3dzZXJib3QuZmluZEVsZW1lbnQocmVxdWVzdC5sb2NhdG9yKTtjb25zdCBsb2NhdG9ycz1sb2NhdG9yQnVpbGRlcnMuYnVpbGRBbGwoZWxlbWVudCk7c2VuZFJlc3BvbnNlKHtyZXN1bHQ6J3N1Y2Nlc3MnLGxvY2F0b3JzfSk7fWNhdGNoKGUpe3NlbmRSZXNwb25zZSh7cmVzdWx0OmUubWVzc2FnZX0pO319aWYocmVxdWVzdC5yZXNvbHZlTG9jYXRvcil7dHJ5e2NvbnN0IGVsZW1lbnQ9c2VsZW5pdW0uYnJvd3NlcmJvdC5maW5kRWxlbWVudChyZXF1ZXN0LmxvY2F0b3IpO2NvbnN0IGxvY2F0b3I9bG9jYXRvckJ1aWxkZXJzLmJ1aWxkQWxsKGVsZW1lbnQpLmZpbmQoKFtsb2Msc3RyYXRdKT0+L154cGF0aC8udGVzdChzdHJhdCkpWzBdOy8vZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuc2VuZFJlc3BvbnNlKHtyZXN1bHQ6J3N1Y2Nlc3MnLGxvY2F0b3J9KTt9Y2F0Y2goZSl7c2VuZFJlc3BvbnNlKHtyZXN1bHQ6ZS5tZXNzYWdlfSk7fX1pZihyZXF1ZXN0LnNlbGVjdE1vZGUpe3NlbmRSZXNwb25zZSh0cnVlKTtpZihyZXF1ZXN0LnNlbGVjdGluZyYmcmVxdWVzdC5lbGVtZW50KXt0YXJnZXRTZWxlY3Rvcj1uZXcgVGFyZ2V0U2VsZWN0b3IoZnVuY3Rpb24oZWxlbWVudCx3aW4pe2lmKGVsZW1lbnQmJndpbil7Y29uc3QgdGFyZ2V0PWxvY2F0b3JCdWlsZGVycy5idWlsZEFsbChlbGVtZW50KTtsb2NhdG9yQnVpbGRlcnMuZGV0YWNoKCk7aWYodGFyZ2V0IT1udWxsJiZ0YXJnZXQgaW5zdGFuY2VvZiBBcnJheSl7aWYodGFyZ2V0KXsvL3NlbGYuZWRpdG9yLnRyZWVWaWV3LnVwZGF0ZUN1cnJlbnRDb21tYW5kKCd0YXJnZXRDYW5kaWRhdGVzJywgdGFyZ2V0KTtcbmJyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7c2VsZWN0VGFyZ2V0OnRydWUsdGFyZ2V0OnRhcmdldCxzZWxlY3ROZXh0OnJlcXVlc3Quc2VsZWN0TmV4dH0pO319fXRhcmdldFNlbGVjdG9yPW51bGw7fSxmdW5jdGlvbigpe2Jyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7Y2FuY2VsU2VsZWN0VGFyZ2V0OnRydWV9KTt9KTt9ZWxzZSBpZihyZXF1ZXN0LnNlbGVjdGluZyYmcmVxdWVzdC5yZWdpb24pe2VkaXRSZWdpb24ocmVxdWVzdC5yZWN0LHRhcmdldD0+e2lmKHRhcmdldCl7YnJvd3Nlci5ydW50aW1lLnNlbmRNZXNzYWdlKHtzZWxlY3RUYXJnZXQ6dHJ1ZSx0YXJnZXQ6W1t0YXJnZXRdXSxzZWxlY3ROZXh0OnJlcXVlc3Quc2VsZWN0TmV4dH0pO31lbHNle2Jyb3dzZXIucnVudGltZS5zZW5kTWVzc2FnZSh7Y2FuY2VsU2VsZWN0VGFyZ2V0OnRydWUsc2VsZWN0TmV4dDpyZXF1ZXN0LnNlbGVjdE5leHR9KTt9fSk7fWVsc2V7aWYodGFyZ2V0U2VsZWN0b3Ipe3RhcmdldFNlbGVjdG9yLmNsZWFudXAoKTt0YXJnZXRTZWxlY3Rvcj1udWxsO3JldHVybjt9ZWxzZXtyZW1vdmVSZWdpb24oKTtyZXR1cm47fX19fS8vIHNob3cgZWxlbWVudFxuZnVuY3Rpb24gc3RhcnRTaG93RWxlbWVudChtZXNzYWdlKXtpZihtZXNzYWdlLnNob3dFbGVtZW50KXt0cnl7Y29uc3QgcmVzdWx0PXNlbGVuaXVtWydkb1Nob3dFbGVtZW50J10obWVzc2FnZS50YXJnZXRWYWx1ZSk7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh7cmVzdWx0OnJlc3VsdH0pO31jYXRjaChlKXsvLyBJZiB3ZSBkaWRuJ3QgZmluZCB0aGUgZWxlbWVudCwgaXQgbWVhbnMgdGhhdCBhbm90aGVyIGZyYW1lIG1pZ2h0IGhhdmUgZm91bmQgaXQsXG4vLyBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBwcm9taXNlLiBJZiBubyBmcmFtZSBmaW5kcyBpdCwgdGhlbiB0aGUgcHJvbWlzZSB3aWxsXG4vLyBnZXQgcmVqZWN0ZWQuXG59fX1pZighd2luZG93Ll9saXN0ZW5lcil7d2luZG93Ll9saXN0ZW5lcj1kb0NvbW1hbmRzO2Jyb3dzZXIucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoc3RhcnRTaG93RWxlbWVudCk7YnJvd3Nlci5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihkb0NvbW1hbmRzKTt9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9jb250ZW50L2NvbW1hbmRzLWFwaS5qc1xuLy8gbW9kdWxlIGlkID0gMTQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///140\n");

/***/ }),

/***/ 151:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_compute_scroll_into_view__ = __webpack_require__(152);\n\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = 'scrollBehavior' in document.body.style;\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(Object(__WEBPACK_IMPORTED_MODULE_0_compute_scroll_into_view__[\"a\" /* default */])(target, options));\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(Object(__WEBPACK_IMPORTED_MODULE_0_compute_scroll_into_view__[\"a\" /* default */])(target, computeOptions), computeOptions.behavior);\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (scrollIntoView);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zY3JvbGwtaW50by12aWV3LWlmLW5lZWRlZC9lcy9pbmRleC5qcz9hODc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb21wdXRlIGZyb20gJ2NvbXB1dGUtc2Nyb2xsLWludG8tdmlldyc7XG5cbmZ1bmN0aW9uIGlzT3B0aW9uc09iamVjdChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zID09PSBPYmplY3Qob3B0aW9ucykgJiYgT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoICE9PSAwO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0QmVoYXZpb3IoYWN0aW9ucywgYmVoYXZpb3IpIHtcbiAgaWYgKGJlaGF2aW9yID09PSB2b2lkIDApIHtcbiAgICBiZWhhdmlvciA9ICdhdXRvJztcbiAgfVxuXG4gIHZhciBjYW5TbW9vdGhTY3JvbGwgPSAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmJvZHkuc3R5bGU7XG4gIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBlbCA9IF9yZWYuZWwsXG4gICAgICAgIHRvcCA9IF9yZWYudG9wLFxuICAgICAgICBsZWZ0ID0gX3JlZi5sZWZ0O1xuXG4gICAgaWYgKGVsLnNjcm9sbCAmJiBjYW5TbW9vdGhTY3JvbGwpIHtcbiAgICAgIGVsLnNjcm9sbCh7XG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICBiZWhhdmlvcjogYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJsb2NrOiAnZW5kJyxcbiAgICAgIGlubGluZTogJ25lYXJlc3QnXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpc09wdGlvbnNPYmplY3Qob3B0aW9ucykpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmxvY2s6ICdzdGFydCcsXG4gICAgaW5saW5lOiAnbmVhcmVzdCdcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcodGFyZ2V0LCBvcHRpb25zKSB7XG4gIGlmIChpc09wdGlvbnNPYmplY3Qob3B0aW9ucykgJiYgdHlwZW9mIG9wdGlvbnMuYmVoYXZpb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5iZWhhdmlvcihjb21wdXRlKHRhcmdldCwgb3B0aW9ucykpO1xuICB9XG5cbiAgdmFyIGNvbXB1dGVPcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgcmV0dXJuIGRlZmF1bHRCZWhhdmlvcihjb21wdXRlKHRhcmdldCwgY29tcHV0ZU9wdGlvbnMpLCBjb21wdXRlT3B0aW9ucy5iZWhhdmlvcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNjcm9sbEludG9WaWV3O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL25vZGVfbW9kdWxlcy9zY3JvbGwtaW50by12aWV3LWlmLW5lZWRlZC9lcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///151\n");

/***/ }),

/***/ 152:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("function isElement(el) {\n  return el != null && typeof el === 'object' && (el.nodeType === 1 || el.nodeType === 11);\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart < scrollingEdgeStart && elementSize < scrollingSize || elementEdgeEnd > scrollingEdgeEnd && elementSize > scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode || cursor.host;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        _height = _frame$getBoundingCli.height,\n        _width = _frame$getBoundingCli.width,\n        _top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        _left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - _top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - _left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///152\n");

/***/ }),

/***/ 153:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"unescapeHtml\"] = unescapeHtml;\n/* harmony export (immutable) */ __webpack_exports__[\"escapeHTML\"] = escapeHTML;\n/*\n * Copyright 2017 SideeX committers\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */ // change HTML entities to sign\nfunction unescapeHtml(str){return str.replace(/&amp;/gi,'&').replace(/&quot;/gi,'\"').replace(/&lt;/gi,'<').replace(/&gt;/gi,'>').replace(/&#39;/gi,\"'\");}function escapeAttr(str){let spaceS=0;let spaceE=-1;let tempStr=str;let tempAttr='';let tempValue='';let processedTag='';let flag=false;let finishedProcessing=false;do{spaceS=str.indexOf(' ');spaceE=str.indexOf(' ',spaceS+1);if(spaceE>=0){while(str.charAt(spaceE-1)!=\"'\"&&str.charAt(spaceE-1)!='\"'){spaceE=str.indexOf(' ',spaceE+1);if(spaceE<0)break;}}//if there is space, then split string\nif(spaceS>=0&&spaceE>=0){tempAttr=str.substring(spaceS+1,spaceE);tempStr=str.substring(0,spaceS+1);str=str.substring(spaceE);}else if(spaceS>=0&&spaceE<0){tempAttr=str.substring(spaceS+1,str.length-1);tempStr=str.substring(0,spaceS+1);str='';}else{//flag is check that has string been processed\nif(flag)processedTag+='>';else processedTag=str;finishedProcessing=true;break;}flag=true;let equal=tempAttr.indexOf('=');if(tempAttr.charAt(equal+1)==\"'\"){//divide the single quote\nif(tempAttr.indexOf(\"'\")!=-1){let quotS=tempAttr.indexOf(\"'\");let quotE=tempAttr.lastIndexOf(\"'\");tempValue=tempAttr.substring(quotS+1,quotE);tempAttr=tempAttr.substring(0,quotS+1);tempValue=replaceChar(tempValue);tempAttr+=tempValue+\"'\";}}if(tempAttr.charAt(equal+1)=='\"'){//divide the double quote\nif(tempAttr.indexOf('\"')!=-1){let dquotS=tempAttr.indexOf('\"');let dquotE=tempAttr.lastIndexOf('\"');tempValue=tempAttr.substring(dquotS+1,dquotE);tempAttr=tempAttr.substring(0,dquotS+1);tempValue=replaceChar(tempValue);tempAttr+=tempValue+'\"';}}//merge the splited string\nprocessedTag+=tempStr+tempAttr;}while(!finishedProcessing);return processedTag;}//escape the character \"<\".\">\".\"&\".\"'\".'\"'\nfunction doEscape(str){return str.replace(/[&\"'<>]/g,m=>({'&':'&amp;','\"':'&quot;',\"'\":'&#39;','<':'&lt;','>':'&gt;'})[m]);}//append\nfunction checkType(cutStr,replaceStr,mode){switch(mode){case 1:return cutStr+=replaceStr+'&amp;';case 2:return cutStr+=replaceStr+'&quot;';case 3:return cutStr+=replaceStr+'&#39;';case 4:return cutStr+=replaceStr+'&lt;';case 5:return cutStr+=replaceStr+'&gt;';default:return cutStr;}}//avoid &amp; to escape &amp;amp;\nfunction replaceChar(str){//escape the character\nlet pos=-1;let cutStr='';let replaceStr='';let doFlag=0;let charType;let ampersandExists=true;while(ampersandExists){pos=str.indexOf('&',pos+1);charType=0;if(pos!=-1){if(str.substring(pos,pos+5)=='&amp;'){charType=1;replaceStr=str.substring(0,pos);str=str.substring(pos+5);}else if(str.substring(pos,pos+6)=='&quot;'){charType=2;replaceStr=str.substring(0,pos);str=str.substring(pos+6);}else if(str.substring(pos,pos+5)=='&#39;'){charType=3;replaceStr=str.substring(0,pos);str=str.substring(pos+5);}else if(str.substring(pos,pos+4)=='&lt;'){charType=4;replaceStr=str.substring(0,pos);str=str.substring(pos+4);}else if(str.substring(pos,pos+4)=='&gt;'){charType=5;replaceStr=str.substring(0,pos);str=str.substring(pos+4);}if(charType!=0){pos=-1;replaceStr=doEscape(replaceStr);cutStr=checkType(cutStr,replaceStr,charType);doFlag=1;}}else{cutStr+=str;ampersandExists=false;}}if(doFlag==0)return doEscape(str);else return cutStr;}//check the HTML value\nfunction escapeHTML(str){let smallIndex=str.indexOf('<');let greatIndex=str.indexOf('>');let tempStr='';let tempTag='';let processed='';let tempSmallIndex=0;let tagsExists=true;while(tagsExists){//find the less target\nif(smallIndex>=0){//find the greater target\nif(greatIndex>=0){do{//split foreward string\nsmallIndex+=tempSmallIndex;tempStr=str.substring(0,smallIndex);//split the tags\ntempTag=str.substring(smallIndex,greatIndex+1);tempSmallIndex=tempTag.lastIndexOf('<');}while(tempSmallIndex!=0);//escape attributes in the tag\ntempTag=escapeAttr(tempTag);str=str.substring(greatIndex+1);//check if the tag is script\n// if(tempTag.toLowerCase().indexOf(\"script\")>=0)\n// tempTag = replaceChar(tempTag);\n//merge them up\nprocessed+=replaceChar(tempStr)+tempTag;}else{replaceChar(str);tagsExists=false;break;}}else{replaceChar(str);tagsExists=false;break;}//going to do next tag\nsmallIndex=str.indexOf('<');greatIndex=0;do{//avoid other >\ngreatIndex=str.indexOf('>',greatIndex+1);}while(greatIndex<smallIndex&&greatIndex!=-1);}if(str!='')processed+=replaceChar(str);return processed;}window.unescapeHtml=unescapeHtml;window.escapeHTML=escapeHTML;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29udGVudC9lc2NhcGUuanM/NzE0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMTcgU2lkZWVYIGNvbW1pdHRlcnNcbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovIC8vIGNoYW5nZSBIVE1MIGVudGl0aWVzIHRvIHNpZ25cbmV4cG9ydCBmdW5jdGlvbiB1bmVzY2FwZUh0bWwoc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLyZhbXA7L2dpLCcmJykucmVwbGFjZSgvJnF1b3Q7L2dpLCdcIicpLnJlcGxhY2UoLyZsdDsvZ2ksJzwnKS5yZXBsYWNlKC8mZ3Q7L2dpLCc+JykucmVwbGFjZSgvJiMzOTsvZ2ksXCInXCIpO31mdW5jdGlvbiBlc2NhcGVBdHRyKHN0cil7bGV0IHNwYWNlUz0wO2xldCBzcGFjZUU9LTE7bGV0IHRlbXBTdHI9c3RyO2xldCB0ZW1wQXR0cj0nJztsZXQgdGVtcFZhbHVlPScnO2xldCBwcm9jZXNzZWRUYWc9Jyc7bGV0IGZsYWc9ZmFsc2U7bGV0IGZpbmlzaGVkUHJvY2Vzc2luZz1mYWxzZTtkb3tzcGFjZVM9c3RyLmluZGV4T2YoJyAnKTtzcGFjZUU9c3RyLmluZGV4T2YoJyAnLHNwYWNlUysxKTtpZihzcGFjZUU+PTApe3doaWxlKHN0ci5jaGFyQXQoc3BhY2VFLTEpIT1cIidcIiYmc3RyLmNoYXJBdChzcGFjZUUtMSkhPSdcIicpe3NwYWNlRT1zdHIuaW5kZXhPZignICcsc3BhY2VFKzEpO2lmKHNwYWNlRTwwKWJyZWFrO319Ly9pZiB0aGVyZSBpcyBzcGFjZSwgdGhlbiBzcGxpdCBzdHJpbmdcbmlmKHNwYWNlUz49MCYmc3BhY2VFPj0wKXt0ZW1wQXR0cj1zdHIuc3Vic3RyaW5nKHNwYWNlUysxLHNwYWNlRSk7dGVtcFN0cj1zdHIuc3Vic3RyaW5nKDAsc3BhY2VTKzEpO3N0cj1zdHIuc3Vic3RyaW5nKHNwYWNlRSk7fWVsc2UgaWYoc3BhY2VTPj0wJiZzcGFjZUU8MCl7dGVtcEF0dHI9c3RyLnN1YnN0cmluZyhzcGFjZVMrMSxzdHIubGVuZ3RoLTEpO3RlbXBTdHI9c3RyLnN1YnN0cmluZygwLHNwYWNlUysxKTtzdHI9Jyc7fWVsc2V7Ly9mbGFnIGlzIGNoZWNrIHRoYXQgaGFzIHN0cmluZyBiZWVuIHByb2Nlc3NlZFxuaWYoZmxhZylwcm9jZXNzZWRUYWcrPSc+JztlbHNlIHByb2Nlc3NlZFRhZz1zdHI7ZmluaXNoZWRQcm9jZXNzaW5nPXRydWU7YnJlYWs7fWZsYWc9dHJ1ZTtsZXQgZXF1YWw9dGVtcEF0dHIuaW5kZXhPZignPScpO2lmKHRlbXBBdHRyLmNoYXJBdChlcXVhbCsxKT09XCInXCIpey8vZGl2aWRlIHRoZSBzaW5nbGUgcXVvdGVcbmlmKHRlbXBBdHRyLmluZGV4T2YoXCInXCIpIT0tMSl7bGV0IHF1b3RTPXRlbXBBdHRyLmluZGV4T2YoXCInXCIpO2xldCBxdW90RT10ZW1wQXR0ci5sYXN0SW5kZXhPZihcIidcIik7dGVtcFZhbHVlPXRlbXBBdHRyLnN1YnN0cmluZyhxdW90UysxLHF1b3RFKTt0ZW1wQXR0cj10ZW1wQXR0ci5zdWJzdHJpbmcoMCxxdW90UysxKTt0ZW1wVmFsdWU9cmVwbGFjZUNoYXIodGVtcFZhbHVlKTt0ZW1wQXR0cis9dGVtcFZhbHVlK1wiJ1wiO319aWYodGVtcEF0dHIuY2hhckF0KGVxdWFsKzEpPT0nXCInKXsvL2RpdmlkZSB0aGUgZG91YmxlIHF1b3RlXG5pZih0ZW1wQXR0ci5pbmRleE9mKCdcIicpIT0tMSl7bGV0IGRxdW90Uz10ZW1wQXR0ci5pbmRleE9mKCdcIicpO2xldCBkcXVvdEU9dGVtcEF0dHIubGFzdEluZGV4T2YoJ1wiJyk7dGVtcFZhbHVlPXRlbXBBdHRyLnN1YnN0cmluZyhkcXVvdFMrMSxkcXVvdEUpO3RlbXBBdHRyPXRlbXBBdHRyLnN1YnN0cmluZygwLGRxdW90UysxKTt0ZW1wVmFsdWU9cmVwbGFjZUNoYXIodGVtcFZhbHVlKTt0ZW1wQXR0cis9dGVtcFZhbHVlKydcIic7fX0vL21lcmdlIHRoZSBzcGxpdGVkIHN0cmluZ1xucHJvY2Vzc2VkVGFnKz10ZW1wU3RyK3RlbXBBdHRyO313aGlsZSghZmluaXNoZWRQcm9jZXNzaW5nKTtyZXR1cm4gcHJvY2Vzc2VkVGFnO30vL2VzY2FwZSB0aGUgY2hhcmFjdGVyIFwiPFwiLlwiPlwiLlwiJlwiLlwiJ1wiLidcIidcbmZ1bmN0aW9uIGRvRXNjYXBlKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC9bJlwiJzw+XS9nLG09Pih7JyYnOicmYW1wOycsJ1wiJzonJnF1b3Q7JyxcIidcIjonJiMzOTsnLCc8JzonJmx0OycsJz4nOicmZ3Q7J30pW21dKTt9Ly9hcHBlbmRcbmZ1bmN0aW9uIGNoZWNrVHlwZShjdXRTdHIscmVwbGFjZVN0cixtb2RlKXtzd2l0Y2gobW9kZSl7Y2FzZSAxOnJldHVybiBjdXRTdHIrPXJlcGxhY2VTdHIrJyZhbXA7JztjYXNlIDI6cmV0dXJuIGN1dFN0cis9cmVwbGFjZVN0cisnJnF1b3Q7JztjYXNlIDM6cmV0dXJuIGN1dFN0cis9cmVwbGFjZVN0cisnJiMzOTsnO2Nhc2UgNDpyZXR1cm4gY3V0U3RyKz1yZXBsYWNlU3RyKycmbHQ7JztjYXNlIDU6cmV0dXJuIGN1dFN0cis9cmVwbGFjZVN0cisnJmd0Oyc7ZGVmYXVsdDpyZXR1cm4gY3V0U3RyO319Ly9hdm9pZCAmYW1wOyB0byBlc2NhcGUgJmFtcDthbXA7XG5mdW5jdGlvbiByZXBsYWNlQ2hhcihzdHIpey8vZXNjYXBlIHRoZSBjaGFyYWN0ZXJcbmxldCBwb3M9LTE7bGV0IGN1dFN0cj0nJztsZXQgcmVwbGFjZVN0cj0nJztsZXQgZG9GbGFnPTA7bGV0IGNoYXJUeXBlO2xldCBhbXBlcnNhbmRFeGlzdHM9dHJ1ZTt3aGlsZShhbXBlcnNhbmRFeGlzdHMpe3Bvcz1zdHIuaW5kZXhPZignJicscG9zKzEpO2NoYXJUeXBlPTA7aWYocG9zIT0tMSl7aWYoc3RyLnN1YnN0cmluZyhwb3MscG9zKzUpPT0nJmFtcDsnKXtjaGFyVHlwZT0xO3JlcGxhY2VTdHI9c3RyLnN1YnN0cmluZygwLHBvcyk7c3RyPXN0ci5zdWJzdHJpbmcocG9zKzUpO31lbHNlIGlmKHN0ci5zdWJzdHJpbmcocG9zLHBvcys2KT09JyZxdW90Oycpe2NoYXJUeXBlPTI7cmVwbGFjZVN0cj1zdHIuc3Vic3RyaW5nKDAscG9zKTtzdHI9c3RyLnN1YnN0cmluZyhwb3MrNik7fWVsc2UgaWYoc3RyLnN1YnN0cmluZyhwb3MscG9zKzUpPT0nJiMzOTsnKXtjaGFyVHlwZT0zO3JlcGxhY2VTdHI9c3RyLnN1YnN0cmluZygwLHBvcyk7c3RyPXN0ci5zdWJzdHJpbmcocG9zKzUpO31lbHNlIGlmKHN0ci5zdWJzdHJpbmcocG9zLHBvcys0KT09JyZsdDsnKXtjaGFyVHlwZT00O3JlcGxhY2VTdHI9c3RyLnN1YnN0cmluZygwLHBvcyk7c3RyPXN0ci5zdWJzdHJpbmcocG9zKzQpO31lbHNlIGlmKHN0ci5zdWJzdHJpbmcocG9zLHBvcys0KT09JyZndDsnKXtjaGFyVHlwZT01O3JlcGxhY2VTdHI9c3RyLnN1YnN0cmluZygwLHBvcyk7c3RyPXN0ci5zdWJzdHJpbmcocG9zKzQpO31pZihjaGFyVHlwZSE9MCl7cG9zPS0xO3JlcGxhY2VTdHI9ZG9Fc2NhcGUocmVwbGFjZVN0cik7Y3V0U3RyPWNoZWNrVHlwZShjdXRTdHIscmVwbGFjZVN0cixjaGFyVHlwZSk7ZG9GbGFnPTE7fX1lbHNle2N1dFN0cis9c3RyO2FtcGVyc2FuZEV4aXN0cz1mYWxzZTt9fWlmKGRvRmxhZz09MClyZXR1cm4gZG9Fc2NhcGUoc3RyKTtlbHNlIHJldHVybiBjdXRTdHI7fS8vY2hlY2sgdGhlIEhUTUwgdmFsdWVcbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVIVE1MKHN0cil7bGV0IHNtYWxsSW5kZXg9c3RyLmluZGV4T2YoJzwnKTtsZXQgZ3JlYXRJbmRleD1zdHIuaW5kZXhPZignPicpO2xldCB0ZW1wU3RyPScnO2xldCB0ZW1wVGFnPScnO2xldCBwcm9jZXNzZWQ9Jyc7bGV0IHRlbXBTbWFsbEluZGV4PTA7bGV0IHRhZ3NFeGlzdHM9dHJ1ZTt3aGlsZSh0YWdzRXhpc3RzKXsvL2ZpbmQgdGhlIGxlc3MgdGFyZ2V0XG5pZihzbWFsbEluZGV4Pj0wKXsvL2ZpbmQgdGhlIGdyZWF0ZXIgdGFyZ2V0XG5pZihncmVhdEluZGV4Pj0wKXtkb3svL3NwbGl0IGZvcmV3YXJkIHN0cmluZ1xuc21hbGxJbmRleCs9dGVtcFNtYWxsSW5kZXg7dGVtcFN0cj1zdHIuc3Vic3RyaW5nKDAsc21hbGxJbmRleCk7Ly9zcGxpdCB0aGUgdGFnc1xudGVtcFRhZz1zdHIuc3Vic3RyaW5nKHNtYWxsSW5kZXgsZ3JlYXRJbmRleCsxKTt0ZW1wU21hbGxJbmRleD10ZW1wVGFnLmxhc3RJbmRleE9mKCc8Jyk7fXdoaWxlKHRlbXBTbWFsbEluZGV4IT0wKTsvL2VzY2FwZSBhdHRyaWJ1dGVzIGluIHRoZSB0YWdcbnRlbXBUYWc9ZXNjYXBlQXR0cih0ZW1wVGFnKTtzdHI9c3RyLnN1YnN0cmluZyhncmVhdEluZGV4KzEpOy8vY2hlY2sgaWYgdGhlIHRhZyBpcyBzY3JpcHRcbi8vIGlmKHRlbXBUYWcudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic2NyaXB0XCIpPj0wKVxuLy8gdGVtcFRhZyA9IHJlcGxhY2VDaGFyKHRlbXBUYWcpO1xuLy9tZXJnZSB0aGVtIHVwXG5wcm9jZXNzZWQrPXJlcGxhY2VDaGFyKHRlbXBTdHIpK3RlbXBUYWc7fWVsc2V7cmVwbGFjZUNoYXIoc3RyKTt0YWdzRXhpc3RzPWZhbHNlO2JyZWFrO319ZWxzZXtyZXBsYWNlQ2hhcihzdHIpO3RhZ3NFeGlzdHM9ZmFsc2U7YnJlYWs7fS8vZ29pbmcgdG8gZG8gbmV4dCB0YWdcbnNtYWxsSW5kZXg9c3RyLmluZGV4T2YoJzwnKTtncmVhdEluZGV4PTA7ZG97Ly9hdm9pZCBvdGhlciA+XG5ncmVhdEluZGV4PXN0ci5pbmRleE9mKCc+JyxncmVhdEluZGV4KzEpO313aGlsZShncmVhdEluZGV4PHNtYWxsSW5kZXgmJmdyZWF0SW5kZXghPS0xKTt9aWYoc3RyIT0nJylwcm9jZXNzZWQrPXJlcGxhY2VDaGFyKHN0cik7cmV0dXJuIHByb2Nlc3NlZDt9d2luZG93LnVuZXNjYXBlSHRtbD11bmVzY2FwZUh0bWw7d2luZG93LmVzY2FwZUhUTUw9ZXNjYXBlSFRNTDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvbnRlbnQvZXNjYXBlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDYiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///153\n");

/***/ }),

/***/ 227:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_scroll_into_view_if_needed__ = __webpack_require__(151);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__SeleniumError__ = __webpack_require__(110);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__commands_api__ = __webpack_require__(140);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__escape__ = __webpack_require__(153);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__ = __webpack_require__(228);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__closure_polyfill__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__PatternMatcher__ = __webpack_require__(229);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils__ = __webpack_require__(111);\n/*\n * Copyright 2011 Software Freedom Conservancy\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */// TODO: stop navigating this.browserbot.document() ... it breaks encapsulation\nclass Selenium{/**\n   * Defines an object that runs Selenium commands.\n   *\n   * <h3><a name=\"locators\"></a>Element Locators</h3>\n   * <p>\n   * Element Locators tell Selenium which HTML element a command refers to.\n   * The format of a locator is:</p>\n   * <blockquote>\n   * <em>locatorType</em><strong>=</strong><em>argument</em>\n   * </blockquote>\n   *\n   * <p>\n   * We support the following strategies for locating elements:\n   * </p>\n   *\n   * <ul>\n   * <li><strong>identifier</strong>=<em>id</em>:\n   * Select the element with the specified &#064;id attribute. If no match is\n   * found, select the first element whose &#064;name attribute is <em>id</em>.\n   * (This is normally the default; see below.)</li>\n   * <li><strong>id</strong>=<em>id</em>:\n   * Select the element with the specified &#064;id attribute.</li>\n   *\n   * <li><strong>name</strong>=<em>name</em>:\n   * Select the first element with the specified &#064;name attribute.\n   * <ul class=\"first last simple\">\n   * <li>username</li>\n   * <li>name=username</li>\n   * </ul>\n   *\n   * <p>The name may optionally be followed by one or more <em>element-filters</em>, separated from the name by whitespace.  If the <em>filterType</em> is not specified, <strong>value</strong> is assumed.</p>\n   *\n   * <ul class=\"first last simple\">\n   * <li>name=flavour value=chocolate</li>\n   * </ul>\n   * </li>\n   * <li><strong>dom</strong>=<em>javascriptExpression</em>:\n   *\n   * Find an element by evaluating the specified string.  This allows you to traverse the HTML Document Object\n   * Model using JavaScript.  Note that you must not return a value in this string; simply make it the last expression in the block.\n   * <ul class=\"first last simple\">\n   * <li>dom=document.forms['myForm'].myDropdown</li>\n   * <li>dom=document.images[56]</li>\n   * <li>dom=function foo() { return document.links[1]; }; foo();</li>\n   * </ul>\n   *\n   * </li>\n   *\n   * <li><strong>xpath</strong>=<em>xpathExpression</em>:\n   * Locate an element using an XPath expression.\n   * <ul class=\"first last simple\">\n   * <li>xpath=//img[&#064;alt='The image alt text']</li>\n   * <li>xpath=//table[&#064;id='table1']//tr[4]/td[2]</li>\n   * <li>xpath=//a[contains(&#064;href,'#id1')]</li>\n   * <li>xpath=//a[contains(&#064;href,'#id1')]/&#064;class</li>\n   * <li>xpath=(//table[&#064;class='stylee'])//th[text()='theHeaderText']/../td</li>\n   * <li>xpath=//input[&#064;name='name2' and &#064;value='yes']</li>\n   * <li>xpath=//*[text()=\"right\"]</li>\n   *\n   * </ul>\n   * </li>\n   * <li><strong>link</strong>=<em>textPattern</em>:\n   * Select the link (anchor) element which contains text matching the\n   * specified <em>pattern</em>.\n   * <ul class=\"first last simple\">\n   * <li>link=The link text</li>\n   * </ul>\n   *\n   * </li>\n   *\n   * <li><strong>css</strong>=<em>cssSelectorSyntax</em>:\n   * Select the element using css selectors. Please refer to <a href=\"http://www.w3.org/TR/REC-CSS2/selector.html\">CSS2 selectors</a>, <a href=\"http://www.w3.org/TR/2001/CR-css3-selectors-20011113/\">CSS3 selectors</a> for more information. You can also check the TestCssLocators test in the selenium test suite for an example of usage, which is included in the downloaded selenium core package.\n   * <ul class=\"first last simple\">\n   * <li>css=a[href=\"#id3\"]</li>\n   * <li>css=span#firstChild + span</li>\n   * </ul>\n   * <p>Currently the css selector locator supports all css1, css2 and css3 selectors except namespace in css3, some pseudo classes(:nth-of-type, :nth-last-of-type, :first-of-type, :last-of-type, :only-of-type, :visited, :hover, :active, :focus, :indeterminate) and pseudo elements(::first-line, ::first-letter, ::selection, ::before, ::after). </p>\n   * </li>\n   *\n   * <li><strong>ui</strong>=<em>uiSpecifierString</em>:\n   * Locate an element by resolving the UI specifier string to another locator, and evaluating it. See the <a href=\"http://svn.openqa.org/fisheye/browse/~raw,r=trunk/selenium/trunk/src/main/resources/core/scripts/ui-doc.html\">Selenium UI-Element Reference</a> for more details.\n   * <ul class=\"first last simple\">\n   * <li>ui=loginPages::loginButton()</li>\n   * <li>ui=settingsPages::toggle(label=Hide Email)</li>\n   * <li>ui=forumPages::postBody(index=2)//a[2]</li>\n   * </ul>\n   * </li>\n   *\n   * </ul>\n   *\n   * <p>\n   * Without an explicit locator prefix, Selenium uses the following default\n   * strategies:\n   * </p>\n   *\n   * <ul class=\"simple\">\n   * <li><strong>dom</strong>, for locators starting with &quot;document.&quot;</li>\n   * <li><strong>xpath</strong>, for locators starting with &quot;//&quot;</li>\n   * <li><strong>identifier</strong>, otherwise</li>\n   * </ul>\n   *\n   * <h3><a name=\"element-filters\">Element Filters</a></h3>\n   * <blockquote>\n   * <p>Element filters can be used with a locator to refine a list of candidate elements.  They are currently used only in the 'name' element-locator.</p>\n   * <p>Filters look much like locators, ie.</p>\n   * <blockquote>\n   * <em>filterType</em><strong>=</strong><em>argument</em></blockquote>\n   *\n   * <p>Supported element-filters are:</p>\n   * <p><strong>value=</strong><em>valuePattern</em></p>\n   * <blockquote>\n   * Matches elements based on their values.  This is particularly useful for refining a list of similarly-named toggle-buttons.</blockquote>\n   * <p><strong>index=</strong><em>index</em></p>\n   * <blockquote>\n   * Selects a single element based on its position in the list (offset from zero).</blockquote>\n   * </blockquote>\n   *\n   * <h3><a name=\"patterns\"></a>String-match Patterns</h3>\n   *\n   * <p>\n   * Various Pattern syntaxes are available for matching string values:\n   * </p>\n   * <ul>\n   * <li><strong>glob:</strong><em>pattern</em>:\n   * Match a string against a \"glob\" (aka \"wildmat\") pattern. \"Glob\" is a\n   * kind of limited regular-expression syntax typically used in command-line\n   * shells. In a glob pattern, \"*\" represents any sequence of characters, and \"?\"\n   * represents any single character. Glob patterns match against the entire\n   * string.</li>\n   * <li><strong>regexp:</strong><em>regexp</em>:\n   * Match a string using a regular-expression. The full power of JavaScript\n   * regular-expressions is available.</li>\n   * <li><strong>regexpi:</strong><em>regexpi</em>:\n   * Match a string using a case-insensitive regular-expression.</li>\n   * <li><strong>exact:</strong><em>string</em>:\n   *\n   * Match a string exactly, verbatim, without any of that fancy wildcard\n   * stuff.</li>\n   * </ul>\n   * <p>\n   * If no pattern prefix is specified, Selenium assumes that it's a \"glob\"\n   * pattern.\n   * </p>\n   * <p>\n   * For commands that return multiple values (such as verifySelectOptions),\n   * the string being matched is a comma-separated list of the return values,\n   * where both commas and backslashes in the values are backslash-escaped.\n   * When providing a pattern, the optional matching syntax (i.e. glob,\n   * regexp, etc.) is specified once, as usual, at the beginning of the\n   * pattern.\n   * </p>\n   */constructor(browserbot){this.browserbot=browserbot;this.optionLocatorFactory=new OptionLocatorFactory();// DGF for backwards compatibility\nthis.page=function(){return browserbot;};this.defaultTimeout=Selenium.DEFAULT_TIMEOUT;this.mouseSpeed=Selenium.DEFAULT_MOUSE_SPEED;}}\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = Selenium;\nSelenium.DEFAULT_TIMEOUT=30*1000;Selenium.DEFAULT_MOUSE_SPEED=10;Selenium.RIGHT_MOUSE_CLICK=2;Selenium.decorateFunctionWithTimeout=function(f,timeout,callback){if(f==null){return null;}let timeoutTime=Object(__WEBPACK_IMPORTED_MODULE_8__utils__[\"d\" /* getTimeoutTime */])(timeout);return function(){if(new Date().getTime()>timeoutTime){if(callback!=null){callback();}throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Timed out after '+timeout+'ms');}return f();};};Selenium.createForWindow=function(window,proxyInjectionMode){if(!window.location){throw'error: not a window!';}return Selenium(__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"b\" /* default */].createForWindow(window,proxyInjectionMode));};Selenium.prototype.reset=function(){this.defaultTimeout=Selenium.DEFAULT_TIMEOUT;// todo: this.browserbot.reset()\nthis.browserbot.selectWindow('null');this.browserbot.resetPopups();};Selenium.prototype.eval=function(script,argv=[],scoped=true,isExpression=false){// we are still stringifying here, but we are not supporting passing HTMLElements anyway :)\n// Single quotes are important! JSON.stringifies uses double quotes, to avoid syntax error we use single quotes!!\nif(isExpression){return window.eval(scoped?`((...arguments) => (${script}))(...JSON.parse('${JSON.stringify(argv)}'))`:script);}else{return window.eval(scoped?`((...arguments) => {${script}})(...JSON.parse('${JSON.stringify(argv)}'))`:script);}};Selenium.prototype.doEvaluateConditional=function(script){return!!this.eval(script.script,script.argv,true,true);};Selenium.prototype.doVerifyChecked=function(locator){let element=this.browserbot.findElement(locator);if(element.type!=='checkbox'&&element.type!=='radio'){throw new Error(`Element with locator ${locator} is not a checkbox nor a radio button`);}else if(!element.checked){throw new Error(`Element with locator ${locator} is not checked`);}};Selenium.prototype.doVerifyNotChecked=function(locator){let element=this.browserbot.findElement(locator);if(element.type!=='checkbox'&&element.type!=='radio'){throw new Error(`Element with locator ${locator} is not a checkbox nor a radio button`);}else if(element.checked){throw new Error(`Element with locator ${locator} is checked`);}};Selenium.prototype.doVerifyEditable=function(locator){if(!this.isEditable(locator)){throw new Error(`Element with locator ${locator} is not editable`);}};Selenium.prototype.doVerifyNotEditable=function(locator){if(this.isEditable(locator)){throw new Error(`Element with locator ${locator} is editable`);}};Selenium.prototype.doVerifySelectedValue=function(locator,value){let element=this.browserbot.findElement(locator);if(element.type!=='select-one'){throw new Error(`Element with locator ${locator} is not a select`);}else if(element.value!==value){throw new Error(\"Actual value '\"+element.value+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doVerifyNotSelectedValue=function(locator,value){let element=this.browserbot.findElement(locator);if(element.type!=='select-one'){throw new Error(`Element with locator ${locator} is not a select`);}else if(element.value===value){throw new Error(\"Actual value '\"+element.value+\"' did match\");}};Selenium.prototype.doVerifyText=function(locator,value){this.doAssertText(locator,value);};Selenium.prototype.doVerifyNotText=function(locator,value){this.doAssertNotText(locator,value);};Selenium.prototype.doVerifyValue=function(locator,value){let element=this.browserbot.findElement(locator);if(element.value!==value){throw new Error(\"Actual value '\"+element.value+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doVerifyTitle=function(value){if(__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].string.normalizeSpaces(this.getTitle())!==value){throw new Error(\"Actual value '\"+__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].string.normalizeSpaces(this.getTitle())+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doVerifyElementPresent=function(locator){try{this.browserbot.findElement(locator);}catch(error){if(error.message.match(/Element[\\s\\S]*?not found/)){throw new Error(`Element with locator ${locator} could not be found`);}else{throw error;}}};Selenium.prototype.doVerifyElementNotPresent=function(locator){try{this.browserbot.findElement(locator);throw new Error(`Element with locator ${locator} was found`);}catch(error){if(!error.message.match(/Element[\\s\\S]*?not found/)){throw error;}}};Selenium.prototype.doVerify=function(variableName,expected){return this.doAssert(variableName,expected);};Selenium.prototype.doAssert=function(variableName,expected){return new Promise((res,rej)=>{__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({getVar:true,variable:variableName}).then(actual=>{if(`${actual}`!=expected){return rej(\"Actual value '\"+actual+\"' did not match '\"+expected+\"'\");}return res();});});};Selenium.prototype.doAssertChecked=function(locator){let element=this.browserbot.findElement(locator);if(element.type!=='checkbox'&&element.type!=='radio'){throw new Error(`Element with locator ${locator} is not a checkbox nor a radio button`);}else if(!element.checked){throw new Error(`Element with locator ${locator} is not checked`);}};Selenium.prototype.doAssertNotChecked=function(locator){let element=this.browserbot.findElement(locator);if(element.type!=='checkbox'&&element.type!=='radio'){throw new Error(`Element with locator ${locator} is not a checkbox nor a radio button`);}else if(element.checked){throw new Error(`Element with locator ${locator} is checked`);}};Selenium.prototype.doAssertEditable=function(locator){if(!this.isEditable(locator)){throw new Error(`Element with locator ${locator} is not editable`);}};Selenium.prototype.doAssertNotEditable=function(locator){if(this.isEditable(locator)){throw new Error(`Element with locator ${locator} is editable`);}};Selenium.prototype.doAssertSelectedValue=function(locator,value){let element=this.browserbot.findElement(locator);if(element.type!=='select-one'){throw new Error(`Element with locator ${locator} is not a select`);}else if(element.value!==value){throw new Error(\"Actual value '\"+element.value+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doVerifySelectedLabel=function(selectLocator,value){let selectedLabel=this.findSelectedOptionProperty(selectLocator,'text');if(selectedLabel!==value){throw new Error(\"Actual label '\"+selectedLabel+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doAssertSelectedLabel=function(selectLocator,value){let selectedLabel=this.findSelectedOptionProperty(selectLocator,'text');if(selectedLabel!==value){throw new Error(\"Actual label '\"+selectedLabel+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doAssertNotSelectedValue=function(locator,value){let element=this.browserbot.findElement(locator);if(element.type!=='select-one'){throw new Error(`Element with locator ${locator} is not a select`);}else if(element.value===value){throw new Error(\"Actual value '\"+element.value+\"' did match\");}};Selenium.prototype.findElementVisible=function(locator){const element=this.browserbot.findElement(locator);if(!__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].dom.isShown(element))throw new Error(`Element ${locator} not visible`);return element;};Selenium.prototype.doAssertText=function(locator,value){const element=this.findElementVisible(locator);const visibleText=__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(element).trim();if(visibleText!==value){throw new Error(`Actual value \"${visibleText}\" did not match \"${value}\"`);}};Selenium.prototype.doAssertNotText=function(locator,value){const element=this.findElementVisible(locator);const visibleText=__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(element).trim();if(visibleText===value){throw new Error(`Actual value \"${visibleText}\" did match \"${value}\"`);}};Selenium.prototype.doAssertValue=function(locator,value){let element=this.browserbot.findElement(locator);if(element.value!==value){throw new Error(\"Actual value '\"+element.value+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doAssertTitle=function(value){if(__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].string.normalizeSpaces(this.getTitle())!==value){throw new Error(\"Actual value '\"+__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].string.normalizeSpaces(this.getTitle())+\"' did not match '\"+value+\"'\");}};Selenium.prototype.doAssertElementPresent=function(locator){try{this.browserbot.findElement(locator);}catch(error){if(error.message.match(/Element[\\s\\S]*?not found/)){throw new Error(`Element with locator ${locator} could not be found`);}else{throw error;}}};Selenium.prototype.doAssertElementNotPresent=function(locator){try{this.browserbot.findElement(locator);throw new Error(`Element with locator ${locator} was found`);}catch(error){if(!error.message.match(/Element[\\s\\S]*?not found/)){throw error;}}};function throwIfNoVarNameProvided(varName){if(!varName){throw new Error('No variable name provided.');}}Selenium.prototype.doStore=function(value,varName){throwIfNoVarNameProvided(varName);return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:value,storeVar:varName});};Selenium.prototype.doStoreEval=function(){throw new Error('store eval is obsolete please migrate to execute script');};Selenium.prototype.doStoreJson=function(json,varName){throwIfNoVarNameProvided(varName);const result=JSON.parse(json);return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:result,storeVar:varName});};Selenium.prototype.doStoreText=function(locator,varName){throwIfNoVarNameProvided(varName);let text;try{// Try to get the text if the element is visible\nconst element=this.findElementVisible(locator);text=__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(element).trim();}catch(e){// element is not visible, but it may be due to the fact that it has no text\nconst element=this.browserbot.findElement(locator);if(element.innerHTML===''){// element is empty then return empty string\ntext='';}else{// element has content this is indeed invisible\nthrow e;}}return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:text,storeVar:varName});};Selenium.prototype.doStoreValue=function(locator,varName){throwIfNoVarNameProvided(varName);let element=this.browserbot.findElement(locator);return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:element.value.trim(),storeVar:varName});};Selenium.prototype.doStoreTitle=function(value,varName){throwIfNoVarNameProvided(varName);let doc=__WEBPACK_IMPORTED_MODULE_3__commands_api__[\"selenium\"].browserbot.getDocument();return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:value||doc.title,storeVar:varName});};Selenium.prototype.doStoreXpathCount=function(xpath,varName){throwIfNoVarNameProvided(varName);let count=this.browserbot.evaluateXPathCount(xpath,this.browserbot.getDocument());return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:`${count}`||'0',storeVar:varName});};Selenium.prototype.doStoreAttribute=function(locator,varName){throwIfNoVarNameProvided(varName);let attributeValue=this.browserbot.findAttribute(locator);return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:attributeValue,storeVar:varName});};function waitUntil(condition,target,timeout,failureMessage){if(!timeout){throw new Error('Timeout not specified.');}return new Promise(function(resolve,reject){let count=0;let retryInterval=100;let result;let interval=setInterval(function(){if(count>timeout){clearInterval(interval);reject(failureMessage);}try{result=condition(target);}catch(error){clearInterval(interval);reject(error.message);}if(!result){count+=retryInterval;}else if(result){clearInterval(interval);resolve();}},retryInterval);});}Selenium.prototype.doWaitForElementPresent=function(locator,timeout){return waitUntil(this.isElementPresent.bind(this),locator,timeout,'Unable to find the target element within the timeout specified.');};Selenium.prototype.doWaitForElementNotPresent=function(locator,timeout){return waitUntil(isElementNotPresent.bind(this),locator,timeout,'Element still present on the page within the timeout specified.');};Selenium.prototype.doWaitForElementVisible=function(locator,timeout){return waitUntil(isDisplayed.bind(this),locator,timeout,'Element not visible on the page within the timeout specified.');};Selenium.prototype.doWaitForElementNotVisible=function(locator,timeout){return waitUntil(isNotDisplayed.bind(this),locator,timeout,'Element still visible on the page within the timeout specified.');};Selenium.prototype.doWaitForElementEditable=function(locator,timeout){return waitUntil(isEditable.bind(this),locator,timeout,'Element not editable within the timeout specified.');};Selenium.prototype.doWaitForElementNotEditable=function(locator,timeout){return waitUntil(isNotEditable.bind(this),locator,timeout,'Element still editable within the timeout specified.');};// xian\nSelenium.prototype.doWaitPreparation=function(){// function setNewPageValue(e) {\n//     window.new_page = true;\n// };\n// window.addEventListener(\"beforeunload\", setNewPageValue, false);\n// if (window.XMLHttpRequest) {\n//     // only override XMLHttpRequest once\n//     if (!window.origXMLHttpRequest || !window.ajax_obj) {\n//         // it's new page, so set the new window's XMLHttpRequest, and all of the obj in the ajax_obj\n//         // are last window's instance, so clear it\n//         window.ajax_obj = [];\n//         window.origXMLHttpRequest = window.XMLHttpRequest;\n//         window.XMLHttpRequest = function() {\n//             var xhr = new window.origXMLHttpRequest();\n//             window.ajax_obj.push(xhr);\n//             return xhr;\n//         }\n//     }\n// }\n// function setDOMModifiedTime() {\n//     window.domModifiedTime = Date.now();\n// }\n// var _win = window.document.body;\n// _win.addEventListener(\"DOMNodeInserted\", setDOMModifiedTime, false);\n// _win.addEventListener(\"DOMNodeInsertedIntoDocument\", setDOMModifiedTime, false);\n// _win.addEventListener(\"DOMNodeRemoved\", setDOMModifiedTime, false);\n// _win.addEventListener(\"DOMNodeRemovedFromDocument\", setDOMModifiedTime, false);\n// _win.addEventListener(\"DOMSubtreeModified\", setDOMModifiedTime, false);\nthis.eval('function setNewPageValue(e) {window.new_page = true;};\\\n                window.addEventListener(\"beforeunload\", setNewPageValue, false);\\\n                if (window.XMLHttpRequest) {if (!window.origXMLHttpRequest || !window.ajax_obj) {\\\n                window.ajax_obj = []; window.origXMLHttpRequest = window.XMLHttpRequest;\\\n                window.XMLHttpRequest = function() { var xhr = new window.origXMLHttpRequest();\\\n                window.ajax_obj.push(xhr); return xhr;}}} function setDOMModifiedTime() {\\\n                window.domModifiedTime = Date.now();}var _win = window.document.body;\\\n                _win.addEventListener(\"DOMNodeInserted\", setDOMModifiedTime, false);\\\n                _win.addEventListener(\"DOMNodeInsertedIntoDocument\", setDOMModifiedTime, false);\\\n                _win.addEventListener(\"DOMNodeRemoved\", setDOMModifiedTime, false);\\\n                _win.addEventListener(\"DOMNodeRemovedFromDocument\", setDOMModifiedTime, false);\\\n                _win.addEventListener(\"DOMSubtreeModified\", setDOMModifiedTime, false);',[],false);};Selenium.prototype.doPrePageWait=function(){window.sideex_new_page=this.eval('(function() {return window.new_page;}())',[],false);};Selenium.prototype.doPageWait=function(){// if (window.document.readyState == \"complete\") {\n//     return true;\n// } else {\n//     return false;\n// }\nlet expression='if(window.document.readyState==\"complete\"){return true;}else{return false;}';window.sideex_page_done=this.eval('(function() {'+expression+'}())',[],false);};Selenium.prototype.doAjaxWait=function(){// // check ajax wait\n// if (window.ajax_obj) {\n//     if (window.ajax_obj.length == 0) {\n//         return true;\n//     } else {\n//         for (var index in window.ajax_obj) {\n//         // if readyState is 1~3, then keep waiting\n//             if (window.ajax_obj[index].readyState !== 4 &&\n//                 window.ajax_obj[index].readyState !== undefined &&\n//                 window.ajax_obj[index].readyState !== 0) {\n//                     return false;\n//             }\n//         }\n//         return true;\n//     }\n// } else {\n//     if (window.origXMLHttpRequest) {\n//         window.origXMLHttpRequest = \"\";\n//     }\n//     return true;\n// }\nlet expression='if (window.ajax_obj) { if (window.ajax_obj.length == 0) {return true;} else {\\\n                      for (var index in window.ajax_obj) {\\\n                      if (window.ajax_obj[index].readyState !== 4 &&\\\n                      window.ajax_obj[index].readyState !== undefined &&\\\n                      window.ajax_obj[index].readyState !== 0) {return false;}}return true;}}\\\n                      else {if (window.origXMLHttpRequest) {window.origXMLHttpRequest = \"\";}return true;}';window.sideex_ajax_done=this.eval('(function() {'+expression+'}())',[],false);};Selenium.prototype.doDomWait=function(){window.sideex_dom_time=this.eval('(function() {return window.domModifiedTime;}())',[],false);};Selenium.prototype.doClick=function(locator){/**\n   * Clicks on a link, button, checkbox or radio button. If the click action\n   * causes a new page to load (like a link usually does), call\n   * waitForPageToLoad.\n   *\n   * @param locator an element locator\n   *\n   */let element=this.browserbot.findElement(locator);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.click(element);};Selenium.prototype.doDoubleClick=function(locator){/**\n   * Double clicks on a link, button, checkbox or radio button. If the double click action\n   * causes a new page to load (like a link usually does), call\n   * waitForPageToLoad.\n   *\n   * @param locator an element locator\n   *\n   */let element=this.browserbot.findElement(locator);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.doubleClick(element);};Selenium.prototype.doContextMenu=function(locator){/**\n   * Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element).\n   *\n   * @param locator an element locator\n   *\n   */let element=this.browserbot.findElement(locator);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.rightClick(element);};Selenium.prototype.doClickAt=function(locator,coordString){/**\n   * Clicks on a link, button, checkbox or radio button. If the click action\n   * causes a new page to load (like a link usually does), call\n   * waitForPageToLoad.\n   *\n   * @param locator an element locator\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   *\n   */let element=this.browserbot.findElement(locator);let coords=getCoords(element,coordString);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.click(element,coords);};Selenium.prototype.doDoubleClickAt=function(locator,coordString){/**\n   * Doubleclicks on a link, button, checkbox or radio button. If the action\n   * causes a new page to load (like a link usually does), call\n   * waitForPageToLoad.\n   *\n   * @param locator an element locator\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   *\n   */let element=this.browserbot.findElement(locator);let coords=getCoords(element,coordString);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.doubleClick(element,coords);};Selenium.prototype.doContextMenuAt=function(locator,coordString){/**\n   * Simulates opening the context menu for the specified element (as might happen if the user \"right-clicked\" on the element).\n   *\n   * @param locator an element locator\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   *\n   */let element=this.browserbot.findElement(locator);let coords=getCoords(element,coordString);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.rightClick(element,coords);};Selenium.prototype.doFocus=function(locator){/** Move the focus to the specified element; for example, if the element is an input field, move the cursor to that field.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);if(element.focus){element.focus();}else{__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);}};Selenium.prototype.doShiftKeyDown=function(){/**\n   * Press the shift key and hold it down until doShiftUp() is called or a new page is loaded.\n   *\n   */this.browserbot.shiftKeyDown=true;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.shiftKeyDown_=true;};Selenium.prototype.doShiftKeyUp=function(){/**\n   * Release the shift key.\n   *\n   */this.browserbot.shiftKeyDown=false;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.shiftKeyDown_=false;};Selenium.prototype.doMetaKeyDown=function(){/**\n   * Press the meta key and hold it down until doMetaUp() is called or a new page is loaded.\n   *\n   */this.browserbot.metaKeyDown=true;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.metaKeyDown_=true;};Selenium.prototype.doMetaKeyUp=function(){/**\n   * Release the meta key.\n   *\n   */this.browserbot.metaKeyDown=false;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.metaKeyDown_=false;};Selenium.prototype.doAltKeyDown=function(){/**\n   * Press the alt key and hold it down until doAltUp() is called or a new page is loaded.\n   *\n   */this.browserbot.altKeyDown=true;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.altKeyDown_=true;};Selenium.prototype.doAltKeyUp=function(){/**\n   * Release the alt key.\n   *\n   */this.browserbot.altKeyDown=false;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.altKeyDown_=false;};Selenium.prototype.doControlKeyDown=function(){/**\n   * Press the control key and hold it down until doControlUp() is called or a new page is loaded.\n   *\n   */this.browserbot.controlKeyDown=true;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.controlKeyDown_=true;};Selenium.prototype.doControlKeyUp=function(){/**\n   * Release the control key.\n   *\n   */this.browserbot.controlKeyDown=false;__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.controlKeyDown_=false;};function getClientXY(element,coordString){// Parse coordString\nlet coords=null;let x;let y;if(coordString){coords=coordString.split(/,/);x=Number(coords[0]);y=Number(coords[1]);}else{x=y=0;}// Get position of element,\n// Return 2 item array with clientX and clientY\nreturn[Selenium.prototype.getElementPositionLeft(element)+x,Selenium.prototype.getElementPositionTop(element)+y];}function getCoords(_element,coordString){// Parse coordString\nlet coords=null;let x;let y;if(coordString){coords=coordString.split(/,/);x=Number(coords[0]);y=Number(coords[1]);}else{x=y=0;}return new __WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].math.Coordinate(x,y);}Selenium.prototype.prepareToInteract_=function(locator){let element=this.browserbot.findElement(locator);let rect=element.getBoundingClientRect();__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.prepareToInteractWith_(element,new __WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].math.Coordinate(rect.width/2,rect.height/2));return element.getBoundingClientRect();};Selenium.prototype.doMouseOver=function(locator){/**\n   * Simulates a user hovering a mouse over the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);let rect=element.getBoundingClientRect();__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.moveMouse(element,new __WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"c\" /* default */].math.Coordinate(rect.width/2,rect.height/2));};Selenium.prototype.doMouseOut=function(locator){/**\n   * Simulates a user moving the mouse pointer away from the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);this.browserbot.triggerMouseEvent(element,'mouseout',true);};Selenium.prototype.doMouseDown=function(locator){/**\n   * Simulates a user pressing the left mouse button (without releasing it yet) on\n   * the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);this.browserbot.triggerMouseEvent(element,'mousedown',true);};Selenium.prototype.doMouseDownRight=function(locator){/**\n   * Simulates a user pressing the right mouse button (without releasing it yet) on\n   * the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);this.browserbot.triggerMouseEvent(element,'mousedown',true,undefined,undefined,Selenium.RIGHT_MOUSE_CLICK);};Selenium.prototype.doMouseDownAt=function(locator,coordString){/**\n   * Simulates a user pressing the left mouse button (without releasing it yet) at\n   * the specified location.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   */let element=this.browserbot.findElement(locator);let clientXY=getClientXY(element,coordString);this.browserbot.triggerMouseEvent(element,'mousedown',true,clientXY[0],clientXY[1]);};Selenium.prototype.doMouseDownRightAt=function(locator,coordString){/**\n   * Simulates a user pressing the right mouse button (without releasing it yet) at\n   * the specified location.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   */let element=this.browserbot.findElement(locator);let clientXY=getClientXY(element,coordString);this.browserbot.triggerMouseEvent(element,'mousedown',true,clientXY[0],clientXY[1],Selenium.RIGHT_MOUSE_CLICK);};Selenium.prototype.doMouseUp=function(locator){/**\n   * Simulates the event that occurs when the user releases the mouse button (i.e., stops\n   * holding the button down) on the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);this.browserbot.triggerMouseEvent(element,'mouseup',true);};Selenium.prototype.doMouseUpRight=function(locator){/**\n   * Simulates the event that occurs when the user releases the right mouse button (i.e., stops\n   * holding the button down) on the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);this.browserbot.triggerMouseEvent(element,'mouseup',true,undefined,undefined,Selenium.RIGHT_MOUSE_CLICK);};Selenium.prototype.doMouseUpAt=function(locator,coordString){/**\n   * Simulates the event that occurs when the user releases the mouse button (i.e., stops\n   * holding the button down) at the specified location.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   */let element=this.browserbot.findElement(locator);let clientXY=getClientXY(element,coordString);this.browserbot.triggerMouseEvent(element,'mouseup',true,clientXY[0],clientXY[1]);};Selenium.prototype.doMouseUpRightAt=function(locator,coordString){/**\n   * Simulates the event that occurs when the user releases the right mouse button (i.e., stops\n   * holding the button down) at the specified location.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   */let element=this.browserbot.findElement(locator);let clientXY=getClientXY(element,coordString);this.browserbot.triggerMouseEvent(element,'mouseup',true,clientXY[0],clientXY[1],Selenium.RIGHT_MOUSE_CLICK);};Selenium.prototype.doMouseMove=function(locator){/**\n   * Simulates a user pressing the mouse button (without releasing it yet) on\n   * the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */let element=this.browserbot.findElement(locator);this.browserbot.triggerMouseEvent(element,'mousemove',true);};Selenium.prototype.doMouseMoveAt=function(locator,coordString){/**\n   * Simulates a user pressing the mouse button (without releasing it yet) on\n   * the specified element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param coordString specifies the x,y position (i.e. - 10,20) of the mouse\n   *      event relative to the element returned by the locator.\n   */let element=this.browserbot.findElement(locator);let clientXY=getClientXY(element,coordString);this.browserbot.triggerMouseEvent(element,'mousemove',true,clientXY[0],clientXY[1]);};Selenium.prototype.doType=function(locator,value){/**\n   * Sets the value of an input field, as though you typed it in.\n   *\n   * <p>Can also be used to set the value of combo boxes, check boxes, etc. In these cases,\n   * value should be the value of the option selected, not the visible text.</p>\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param value the value to type\n   */if(this.browserbot.controlKeyDown||this.browserbot.altKeyDown||this.browserbot.metaKeyDown){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('type not supported immediately after call to controlKeyDown() or altKeyDown() or metaKeyDown()');}let element=this.browserbot.findElement(locator);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.setValue(element,'');const type=element.type;if(type==='number'||type==='date'){__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.setValue(element,value);}else{__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.type(element,value);if(element.value!==value){__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"b\" /* core */].events.setValue(element,value);}}__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);};Selenium.prototype.doSendKeys=function(locator,value){/**\n   * *Experimental* Simulates keystroke events on the specified element, as though you typed the value key-by-key.\n   *\n   * <p>This simulates a real user typing every character in the specified string; it is also bound by the limitations of a\n   * real user, like not being able to type into a invisible or read only elements. This is useful for dynamic UI widgets\n   * (like auto-completing combo boxes) that require explicit key events.</p>\n   * <p>Unlike the simple \"type\" command, which forces the specified value into the page directly, this command will not\n   * replace the existing content. If you want to replace the existing contents, you need to use the simple \"type\" command to set the value of the\n   * field to empty string to clear the field and then the \"sendKeys\" command to send the keystroke for what you want\n   * to type.</p>\n   * <p>This command is experimental. It may replace the typeKeys command in the future.</p>\n   * <p>For those who are interested in the details, unlike the typeKeys command, which tries to\n   * fire the keyDown, the keyUp and the keyPress events, this command is backed by the atoms from Selenium 2 and provides a\n   * much more robust implementation that will be maintained in the future.</p>\n   *\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @param value the value to type\n   */if(this.browserbot.controlKeyDown||this.browserbot.altKeyDown||this.browserbot.metaKeyDown){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('type not supported immediately after call to controlKeyDown() or altKeyDown() or metaKeyDown()');}let element=this.browserbot.findElement(locator);let keys=this.replaceKeys(value);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.type(element,keys);__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);};Selenium.prototype.doSetSpeed=function(){/**\n   * Set execution speed (i.e., set the millisecond length of a delay which will follow each selenium operation).  By default, there is no such delay, i.e.,\n   * the delay is 0 milliseconds.\n   *\n   * @param value the number of milliseconds to pause after operation\n   */throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('this operation is only implemented in selenium-rc, and should never result in a request making it across the wire');};Selenium.prototype.getSpeed=function(){/**\n   * Get execution speed (i.e., get the millisecond length of the delay following each selenium operation).  By default, there is no such delay, i.e.,\n   * the delay is 0 milliseconds.\n   *\n   * See also setSpeed.\n   *\n   * @return string the execution speed in milliseconds.\n   */throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('this operation is only implemented in selenium-rc, and should never result in a request making it across the wire');};Selenium.prototype.findToggleButton=function(locator){let element=this.browserbot.findElement(locator);if(element.checked==null){throw new Error('Element '+locator+' is not a toggle-button.');// eslint-disable-line no-undef\n}return element;};Selenium.prototype.doCheck=function(locator){/**\n   * Check a toggle-button (checkbox/radio)\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */this.findToggleButton(locator).checked=true;};Selenium.prototype.doUncheck=function(locator){/**\n   * Uncheck a toggle-button (checkbox/radio)\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   */this.findToggleButton(locator).checked=false;};Selenium.prototype.doSelect=function(selectLocator,optionLocator){/**\n   * Select an option from a drop-down using an option locator.\n   *\n   * <p>\n   * Option locators provide different ways of specifying options of an HTML\n   * Select element (e.g. for selecting a specific option, or for asserting\n   * that the selected option satisfies a specification). There are several\n   * forms of Select Option Locator.\n   * </p>\n   * <ul>\n   * <li><strong>label</strong>=<em>labelPattern</em>:\n   * matches options based on their labels, i.e. the visible text. (This\n   * is the default.)\n   * <ul class=\"first last simple\">\n   * <li>label=regexp:^[Oo]ther</li>\n   * </ul>\n   * </li>\n   * <li><strong>value</strong>=<em>valuePattern</em>:\n   * matches options based on their values.\n   * <ul class=\"first last simple\">\n   * <li>value=other</li>\n   * </ul>\n   *\n   *\n   * </li>\n   * <li><strong>id</strong>=<em>id</em>:\n   *\n   * matches options based on their ids.\n   * <ul class=\"first last simple\">\n   * <li>id=option1</li>\n   * </ul>\n   * </li>\n   * <li><strong>index</strong>=<em>index</em>:\n   * matches an option based on its index (offset from zero).\n   * <ul class=\"first last simple\">\n   *\n   * <li>index=2</li>\n   * </ul>\n   * </li>\n   * </ul>\n   * <p>\n   * If no option locator prefix is provided, the default behaviour is to match on <strong>label</strong>.\n   * </p>\n   *\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @param optionLocator an option locator (a label by default)\n   */let element=this.browserbot.findElement(selectLocator);if(!('options'in element)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Specified element is not a Select (has no options)');}let locator=this.optionLocatorFactory.fromLocatorString(optionLocator);let option=locator.findOption(element);this.browserbot.selectOption(element,option);};Selenium.prototype.doAddSelection=function(locator,optionLocator){/**\n   * Add a selection to the set of selected options in a multi-select element using an option locator.\n   *\n   * @see #doSelect for details of option locators\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> identifying a multi-select box\n   * @param optionLocator an option locator (a label by default)\n   */let element=this.browserbot.findElement(locator);if(!('options'in element)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Specified element is not a Select (has no options)');}let currLocator=this.optionLocatorFactory.fromLocatorString(optionLocator);let option=currLocator.findOption(element);this.browserbot.addSelection(element,option);};Selenium.prototype.doRemoveSelection=function(locator,optionLocator){/**\n   * Remove a selection from the set of selected options in a multi-select element using an option locator.\n   *\n   * @see #doSelect for details of option locators\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> identifying a multi-select box\n   * @param optionLocator an option locator (a label by default)\n   */let element=this.browserbot.findElement(locator);if(!('options'in element)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Specified element is not a Select (has no options)');}let currLocator=this.optionLocatorFactory.fromLocatorString(optionLocator);let option=currLocator.findOption(element);this.browserbot.removeSelection(element,option);};Selenium.prototype.doRemoveAllSelections=function(locator){/**\n   * Unselects all of the selected options in a multi-select element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> identifying a multi-select box\n   */let element=this.browserbot.findElement(locator);if(!('options'in element)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Specified element is not a Select (has no options)');}for(let i=0;i<element.options.length;i++){this.browserbot.removeSelection(element,element.options[i]);}};Selenium.prototype.doSubmit=function(formLocator){/**\n   * Submit the specified form. This is particularly useful for forms without\n   * submit buttons, e.g. single-input \"Search\" forms.\n   *\n   * @param formLocator an <a href=\"#locators\">element locator</a> for the form you want to submit\n   */__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({log:{type:'warn',message:'submit is deprecated and will be removed from later versions of Selenium IDE, please re-record the step.'}});let form=this.browserbot.findElement(formLocator);return __WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].action.submit(form);};Selenium.prototype.makePageLoadCondition=function(timeout){if(timeout==null){timeout=this.defaultTimeout;}// if the timeout is zero, we won't wait for the page to load before returning\nif(timeout==0){// abort XHR request\nthis._abortXhrRequest();return;}return Selenium.decorateFunctionWithTimeout(this._isNewPageLoaded.bind(this),timeout,this._abortXhrRequest.bind(this));};Selenium.prototype.doOpen=function(url,ignoreResponseCode){/**\n   * Opens an URL in the test frame. This accepts both relative and absolute\n   * URLs.\n   *\n   * The &quot;open&quot; command waits for the page to load before proceeding,\n   * ie. the &quot;AndWait&quot; suffix is implicit.\n   *\n   * <em>Note</em>: The URL must be on the same domain as the runner HTML\n   * due to security restrictions in the browser (Same Origin Policy). If you\n   * need to open an URL on another domain, use the Selenium Server to start a\n   * new browser session on that domain.\n   *\n   * @param url the URL to open; may be relative or absolute\n   * @param ignoreResponseCode (optional) turn off ajax head request functionality\n   *\n   */if(ignoreResponseCode==null||ignoreResponseCode.length==0){this.browserbot.ignoreResponseCode=true;}else if(ignoreResponseCode.toLowerCase()=='true'){this.browserbot.ignoreResponseCode=true;}else{this.browserbot.ignoreResponseCode=false;}this.browserbot.openLocation(url);if(window['proxyInjectionMode']==null||!window['proxyInjectionMode']){return this.makePageLoadCondition();}// in PI mode, just return \"OK\"; the server will waitForLoad\n};Selenium.prototype.doOpenWindow=function(url,windowID){/**\n   * Opens a popup window (if a window with that ID isn't already open).\n   * After opening the window, you'll need to select it using the selectWindow\n   * command.\n   *\n   * <p>This command can also be a useful workaround for bug SEL-339.  In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example).\n   * In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using\n   * an empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").</p>\n   *\n   * @param url the URL to open, which can be blank\n   * @param windowID the JavaScript window ID of the window to select\n   */this.browserbot.openWindow(url,windowID);};Selenium.prototype.doSelectWindow=function(windowID){/**\n   * Selects a popup window using a window locator; once a popup window has been selected, all\n   * commands go to that window. To select the main window again, use null\n   * as the target.\n   *\n   * <p>\n   *\n   * Window locators provide different ways of specifying the window object:\n   * by title, by internal JavaScript \"name,\" or by JavaScript variable.\n   * </p>\n   * <ul>\n   * <li><strong>title</strong>=<em>My Special Window</em>:\n   * Finds the window using the text that appears in the title bar.  Be careful;\n   * two windows can share the same title.  If that happens, this locator will\n   * just pick one.\n   * </li>\n   * <li><strong>name</strong>=<em>myWindow</em>:\n   * Finds the window using its internal JavaScript \"name\" property.  This is the second\n   * parameter \"windowName\" passed to the JavaScript method window.open(url, windowName, windowFeatures, replaceFlag)\n   * (which Selenium intercepts).\n   * </li>\n   * <li><strong>var</strong>=<em>variableName</em>:\n   * Some pop-up windows are unnamed (anonymous), but are associated with a JavaScript variable name in the current\n   * application window, e.g. \"window.foo = window.open(url);\".  In those cases, you can open the window using\n   * \"var=foo\".\n   * </li>\n   * </ul>\n   * <p>\n   * If no window locator prefix is provided, we'll try to guess what you mean like this:</p>\n   * <p>1.) if windowID is null, (or the string \"null\") then it is assumed the user is referring to the original window instantiated by the browser).</p>\n   * <p>2.) if the value of the \"windowID\" parameter is a JavaScript variable name in the current application window, then it is assumed\n   * that this variable contains the return value from a call to the JavaScript window.open() method.</p>\n   * <p>3.) Otherwise, selenium looks in a hash it maintains that maps string names to window \"names\".</p>\n   * <p>4.) If <em>that</em> fails, we'll try looping over all of the known windows to try to find the appropriate \"title\".\n   * Since \"title\" is not necessarily unique, this may have unexpected behavior.</p>\n   *\n   * <p>If you're having trouble figuring out the name of a window that you want to manipulate, look at the Selenium log messages\n   * which identify the names of windows created via window.open (and therefore intercepted by Selenium).  You will see messages\n   * like the following for each window as it is opened:</p>\n   *\n   * <p><code>debug: window.open call intercepted; window ID (which you can use with selectWindow()) is \"myNewWindow\"</code></p>\n   *\n   * <p>In some cases, Selenium will be unable to intercept a call to window.open (if the call occurs during or before the \"onLoad\" event, for example).\n   * (This is bug SEL-339.)  In those cases, you can force Selenium to notice the open window's name by using the Selenium openWindow command, using\n   * an empty (blank) url, like this: openWindow(\"\", \"myFunnyWindow\").</p>\n   *\n   * @param windowID the JavaScript window ID of the window to select\n   */this.browserbot.selectWindow(windowID);};Selenium.prototype.doSelectPopUp=function(windowID){/**\n   * Simplifies the process of selecting a popup window (and does not offer\n   * functionality beyond what <code>selectWindow()</code> already provides).\n   * <ul>\n   * <li>If <code>windowID</code> is either not specified, or specified as\n   * \"null\", the first non-top window is selected. The top window is the one\n   * that would be selected by <code>selectWindow()</code> without providing a\n   * <code>windowID</code> . This should not be used when more than one popup\n   * window is in play.</li>\n   * <li>Otherwise, the window will be looked up considering\n   * <code>windowID</code> as the following in order: 1) the \"name\" of the\n   * window, as specified to <code>window.open()</code>; 2) a javascript\n   * variable which is a reference to a window; and 3) the title of the\n   * window. This is the same ordered lookup performed by\n   * <code>selectWindow</code> .</li>\n   * </ul>\n   *\n   * @param windowID  an identifier for the popup window, which can take on a\n   *                  number of different meanings\n   */this.browserbot.selectPopUp(windowID);};Selenium.prototype.doDeselectPopUp=function(){/**\n   * Selects the main window. Functionally equivalent to using\n   * <code>selectWindow()</code> and specifying no value for\n   * <code>windowID</code>.\n   */this.browserbot.selectWindow();};Selenium.prototype.doSelectFrame=function(locator){/**\n   * Selects a frame within the current window.  (You may invoke this command\n   * multiple times to select nested frames.)  To select the parent frame, use\n   * \"relative=parent\" as a locator; to select the top frame, use \"relative=top\".\n   * You can also select a frame by its 0-based index number; select the first frame with\n   * \"index=0\", or the third frame with \"index=2\".\n   *\n   * <p>You may also use a DOM expression to identify the frame you want directly,\n   * like this: <code>dom=frames[\"main\"].frames[\"subframe\"]</code></p>\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> identifying a frame or iframe\n   */this.browserbot.selectFrame(locator);};Selenium.prototype.getWhetherThisFrameMatchFrameExpression=function(currentFrameString,target){/**\n   * Determine whether current/locator identify the frame containing this running code.\n   *\n   * <p>This is useful in proxy injection mode, where this code runs in every\n   * browser frame and window, and sometimes the selenium server needs to identify\n   * the \"current\" frame.  In this case, when the test calls selectFrame, this\n   * routine is called for each frame to figure out which one has been selected.\n   * The selected frame will return true, while all others will return false.</p>\n   *\n   * @param currentFrameString starting frame\n   * @param target new frame (which might be relative to the current one)\n   * @return boolean true if the new frame is this code's window\n   */return this.browserbot.doesThisFrameMatchFrameExpression(currentFrameString,target);};Selenium.prototype.getWhetherThisWindowMatchWindowExpression=function(_currentWindowString,target){/**\n   * Determine whether currentWindowString plus target identify the window containing this running code.\n   *\n   * <p>This is useful in proxy injection mode, where this code runs in every\n   * browser frame and window, and sometimes the selenium server needs to identify\n   * the \"current\" window.  In this case, when the test calls selectWindow, this\n   * routine is called for each window to figure out which one has been selected.\n   * The selected window will return true, while all others will return false.</p>\n   *\n   * @param currentWindowString starting window\n   * @param target new window (which might be relative to the current one, e.g., \"_parent\")\n   * @return boolean true if the new window is this code's window\n   */if(window.opener!=null&&window.opener[target]!=null&&window.opener[target]==window){return true;}return false;};Selenium.prototype.doWaitForPopUp=function(windowID,timeout){/**\n   * Waits for a popup window to appear and load up.\n   *\n   * @param windowID the JavaScript window \"name\" of the window that will appear (not the text of the title bar)\n   *                 If unspecified, or specified as \"null\", this command will\n   *                 wait for the first non-top window to appear (don't rely\n   *                 on this if you are working with multiple popups\n   *                 simultaneously).\n   * @param timeout a timeout in milliseconds, after which the action will return with an error.\n   *                If this value is not specified, the default Selenium\n   *                timeout will be used. See the setTimeout() command.\n   */if(!timeout){timeout=this.defaultTimeout;}let timeoutTime=Object(__WEBPACK_IMPORTED_MODULE_8__utils__[\"d\" /* getTimeoutTime */])(timeout);let popupLoadedPredicate=function(){let targetWindow;try{if(windowID&&windowID!='null'){targetWindow=__WEBPACK_IMPORTED_MODULE_3__commands_api__[\"selenium\"].browserbot.getWindowByName(windowID,true);}else{let names=__WEBPACK_IMPORTED_MODULE_3__commands_api__[\"selenium\"].browserbot.getNonTopWindowNames();targetWindow=__WEBPACK_IMPORTED_MODULE_3__commands_api__[\"selenium\"].browserbot.getWindowByName(names[0],true);}}catch(e){if(new Date().getTime()>timeoutTime){throw e;}}if(!targetWindow)return false;try{if(!targetWindow.location)return false;if('about:blank'==targetWindow.location)return false;}catch(e){//LOG.debug(\"Location exception (\" + e.message + \")!\");\nreturn false;}if(__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"a\" /* browserVersion */].isKonqueror){if('/'==targetWindow.location.href){// apparently Konqueror uses this as the temporary location, instead of about:blank\nreturn false;}}if(__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"a\" /* browserVersion */].isSafari){if(targetWindow.location.href==__WEBPACK_IMPORTED_MODULE_3__commands_api__[\"selenium\"].browserbot.buttonWindow.location.href){// Apparently Safari uses this as the temporary location, instead of about:blank\n// what a world!\n//LOG.debug(\"DGF what a world!\");\nreturn false;}}if(!targetWindow.document)return false;if(!__WEBPACK_IMPORTED_MODULE_3__commands_api__[\"selenium\"].browserbot.getCurrentWindow().document.readyState){// This is Firefox, with no readyState extension\nreturn true;}if('complete'!=targetWindow.document.readyState)return false;return true;};return Selenium.decorateFunctionWithTimeout(popupLoadedPredicate,timeout);};Selenium.prototype.doWaitForPopUp.dontCheckAlertsAndConfirms=true;//Selenium.prototype.doChooseCancelOnNextConfirmation = function() {\n/**\n * <p>\n * By default, Selenium's overridden window.confirm() function will\n * return true, as if the user had manually clicked OK; after running\n * this command, the next call to confirm() will return false, as if\n * the user had clicked Cancel.  Selenium will then resume using the\n * default behavior for future confirmations, automatically returning\n * true (OK) unless/until you explicitly call this command for each\n * confirmation.\n * </p>\n * <p>\n * Take note - every time a confirmation comes up, you must\n * consume it with a corresponding getConfirmation, or else\n * the next selenium operation will fail.\n * </p>\n */ //this.browserbot.cancelNextConfirmation(false);\n//};\n//Selenium.prototype.doChooseOkOnNextConfirmation = function() {\n/**\n * <p>\n * Undo the effect of calling chooseCancelOnNextConfirmation.  Note\n * that Selenium's overridden window.confirm() function will normally automatically\n * return true, as if the user had manually clicked OK, so you shouldn't\n * need to use this command unless for some reason you need to change\n * your mind prior to the next confirmation.  After any confirmation, Selenium will resume using the\n * default behavior for future confirmations, automatically returning\n * true (OK) unless/until you explicitly call chooseCancelOnNextConfirmation for each\n * confirmation.\n * </p>\n * <p>\n * Take note - every time a confirmation comes up, you must\n * consume it with a corresponding getConfirmation, or else\n * the next selenium operation will fail.\n * </p>\n *\n */ //this.browserbot.cancelNextConfirmation(true);\n//};\n//Selenium.prototype.doAnswerOnNextPrompt = function(answer) {\n/**\n * Instructs Selenium to return the specified answer string in response to\n * the next JavaScript prompt [window.prompt()].\n *\n *\n * @param answer the answer to give in response to the prompt pop-up\n */ //this.browserbot.setNextPromptResult(answer);\n//};\nSelenium.prototype.doGoBack=function(){/**\n   * Simulates the user clicking the \"back\" button on their browser.\n   *\n   */this.browserbot.goBack();};Selenium.prototype.doRefresh=function(){/**\n   * Simulates the user clicking the \"Refresh\" button on their browser.\n   *\n   */this.browserbot.refresh();};Selenium.prototype.doClose=function(){/**\n   * Simulates the user clicking the \"close\" button in the titlebar of a popup\n   * window or tab.\n   */this.browserbot.close();};Selenium.prototype.ensureNoUnhandledPopups=function(){if(this.browserbot.hasAlerts()){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('There was an unexpected Alert! ['+this.browserbot.getNextAlert()+']');}if(this.browserbot.hasConfirmations()){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('There was an unexpected Confirmation! ['+this.browserbot.getNextConfirmation()+']');}};Selenium.prototype.isAlertPresent=function(){/**\n   * Has an alert occurred?\n   *\n   * <p>\n   * This function never throws an exception\n   * </p>\n   * @return boolean true if there is an alert\n   */return this.browserbot.hasAlerts();};Selenium.prototype.isPromptPresent=function(){/**\n   * Has a prompt occurred?\n   *\n   * <p>\n   * This function never throws an exception\n   * </p>\n   * @return boolean true if there is a pending prompt\n   */return this.browserbot.hasPrompts();};Selenium.prototype.isConfirmationPresent=function(){/**\n   * Has confirm() been called?\n   *\n   * <p>\n   * This function never throws an exception\n   * </p>\n   * @return boolean true if there is a pending confirmation\n   */return this.browserbot.hasConfirmations();};Selenium.prototype.getAlert=function(){/**\n     * Retrieves the message of a JavaScript alert generated during the previous action, or fail if there were no alerts.\n     *\n     * <p>Getting an alert has the same effect as manually clicking OK. If an\n     * alert is generated but you do not consume it with getAlert, the next Selenium action\n     * will fail.</p>\n     *\n     * <p>Under Selenium, JavaScript alerts will NOT pop up a visible alert\n     * dialog.</p>\n     *\n     * <p>Selenium does NOT support JavaScript alerts that are generated in a\n     * page's onload() event handler. In this case a visible dialog WILL be\n     * generated and Selenium will hang until someone manually clicks OK.</p>\n     * @return string The message of the most recent JavaScript alert\n\n     */if(!this.browserbot.hasAlerts()){Assert.fail('There were no alerts');// eslint-disable-line no-undef\n}return this.browserbot.getNextAlert();};Selenium.prototype.getAlert.dontCheckAlertsAndConfirms=true;Selenium.prototype.getConfirmation=function(){/**\n   * Retrieves the message of a JavaScript confirmation dialog generated during\n   * the previous action.\n   *\n   * <p>\n   * By default, the confirm function will return true, having the same effect\n   * as manually clicking OK. This can be changed by prior execution of the\n   * chooseCancelOnNextConfirmation command.\n   * </p>\n   * <p>\n   * If an confirmation is generated but you do not consume it with getConfirmation,\n   * the next Selenium action will fail.\n   * </p>\n   *\n   * <p>\n   * NOTE: under Selenium, JavaScript confirmations will NOT pop up a visible\n   * dialog.\n   * </p>\n   *\n   * <p>\n   * NOTE: Selenium does NOT support JavaScript confirmations that are\n   * generated in a page's onload() event handler. In this case a visible\n   * dialog WILL be generated and Selenium will hang until you manually click\n   * OK.\n   * </p>\n   *\n   * @return string the message of the most recent JavaScript confirmation dialog\n   */if(!this.browserbot.hasConfirmations()){Assert.fail('There were no confirmations');// eslint-disable-line no-undef\n}return this.browserbot.getNextConfirmation();};Selenium.prototype.getConfirmation.dontCheckAlertsAndConfirms=true;Selenium.prototype.getPrompt=function(){/**\n   * Retrieves the message of a JavaScript question prompt dialog generated during\n   * the previous action.\n   *\n   * <p>Successful handling of the prompt requires prior execution of the\n   * answerOnNextPrompt command. If a prompt is generated but you\n   * do not get/verify it, the next Selenium action will fail.</p>\n   *\n   * <p>NOTE: under Selenium, JavaScript prompts will NOT pop up a visible\n   * dialog.</p>\n   *\n   * <p>NOTE: Selenium does NOT support JavaScript prompts that are generated in a\n   * page's onload() event handler. In this case a visible dialog WILL be\n   * generated and Selenium will hang until someone manually clicks OK.</p>\n   * @return string the message of the most recent JavaScript question prompt\n   */if(!this.browserbot.hasPrompts()){Assert.fail('There were no prompts');// eslint-disable-line no-undef\n}return this.browserbot.getNextPrompt();};Selenium.prototype.getLocation=function(){/** Gets the absolute URL of the current page.\n   *\n   * @return string the absolute URL of the current page\n   */return this.browserbot.getCurrentWindow().location.href;};Selenium.prototype.getTitle=function(){/** Gets the title of the current page.\n   *\n   * @return string the title of the current page\n   */return this.browserbot.getTitle();};Selenium.prototype.getBodyText=function(){/**\n   * Gets the entire text of the page.\n   * @return string the entire text of the page\n   */return this.browserbot.bodyText();};Selenium.prototype.getValue=function(locator){/**\n   * Gets the (whitespace-trimmed) value of an input field (or anything else with a value parameter).\n   * For checkbox/radio elements, the value will be \"on\" or \"off\" depending on\n   * whether the element is checked or not.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @return string the element value, or \"on/off\" for checkbox/radio elements\n   */let element=this.browserbot.findElement(locator);return element.value.trim();};Selenium.prototype.getText=function(locator){/**\n   * Gets the text of an element. This works for any element that contains\n   * text. This command uses either the textContent (Mozilla-like browsers) or\n   * the innerText (IE-like browsers) of the element, which is the rendered\n   * text shown to the user.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @return string the text of the element\n   */let element=this.browserbot.findElement(locator);return __WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(element).trim();};Selenium.prototype.getEval=function(script){/** Gets the result of evaluating the specified JavaScript snippet.  The snippet may\n   * have multiple lines, but only the result of the last line will be returned.\n   *\n   * <p>Note that, by default, the snippet will run in the context of the \"selenium\"\n   * object itself, so <code>this</code> will refer to the Selenium object.  Use <code>window</code> to\n   * refer to the window of your application, e.g. <code>window.document.getElementById('foo')</code></p>\n   *\n   * <p>If you need to use\n   * a locator to refer to a single element in your application page, you can\n   * use <code>this.browserbot.findElement(\"id=foo\")</code> where \"id=foo\" is your locator.</p>\n   *\n   * @param script the JavaScript snippet to run\n   * @return string the results of evaluating the snippet\n   */try{//LOG.info('script is: ' + script);\nlet result=this.eval(script);// Selenium RC doesn't allow returning null\nif(null==result)return'null';return result;}catch(e){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Threw an exception: '+Object(__WEBPACK_IMPORTED_MODULE_8__utils__[\"b\" /* extractExceptionMessage */])(e));}};Selenium.prototype.isChecked=function(locator){/**\n   * Gets whether a toggle-button (checkbox/radio) is checked.  Fails if the specified element doesn't exist or isn't a toggle-button.\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to a checkbox or radio button\n   * @return boolean true if the checkbox is checked, false otherwise\n   */let element=this.browserbot.findElement(locator);if(element.checked==null){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Element '+locator+' is not a toggle-button.');}return element.checked;};Selenium.prototype.getTable=function(tableCellAddress){/**\n   * Gets the text from a cell of a table. The cellAddress syntax\n   * tableLocator.row.column, where row and column start at 0.\n   *\n   * @param tableCellAddress a cell address, e.g. \"foo.1.4\"\n   * @return string the text from the specified cell\n   */ // This regular expression matches \"tableName.row.column\"\n// For example, \"mytable.3.4\"\nlet pattern=/(.*)\\.(\\d+)\\.(\\d+)/;if(!pattern.test(tableCellAddress)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Invalid target format. Correct format is tableName.rowNum.columnNum');}let pieces=tableCellAddress.match(pattern);let tableName=pieces[1];let row=pieces[2];let col=pieces[3];let table=this.browserbot.findElement(tableName);if(row>table.rows.length){// eslint-disable-next-line no-undef\nAssert.fail('Cannot access row '+row+' - table has '+table.rows.length+' rows');}else if(col>table.rows[row].cells.length){// eslint-disable-next-line no-undef\nAssert.fail('Cannot access column '+col+' - table row has '+table.rows[row].cells.length+' columns');}else{let actualContent=__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(table.rows[row].cells[col]);return actualContent.trim();}return null;};Selenium.prototype.getSelectedLabels=function(selectLocator){/** Gets all option labels (visible text) for selected options in the specified select or multi-select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string[] an array of all selected option labels in the specified select drop-down\n   */return this.findSelectedOptionProperties(selectLocator,'text');};Selenium.prototype.getSelectedLabel=function(selectLocator){/** Gets option label (visible text) for selected option in the specified select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string the selected option label in the specified select drop-down\n   */return this.findSelectedOptionProperty(selectLocator,'text');};Selenium.prototype.getSelectedValues=function(selectLocator){/** Gets all option values (value attributes) for selected options in the specified select or multi-select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string[] an array of all selected option values in the specified select drop-down\n   */return this.findSelectedOptionProperties(selectLocator,'value');};Selenium.prototype.getSelectedValue=function(selectLocator){/** Gets option value (value attribute) for selected option in the specified select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string the selected option value in the specified select drop-down\n   */return this.findSelectedOptionProperty(selectLocator,'value');};Selenium.prototype.getSelectedIndexes=function(selectLocator){/** Gets all option indexes (option number, starting at 0) for selected options in the specified select or multi-select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string[] an array of all selected option indexes in the specified select drop-down\n   */return this.findSelectedOptionProperties(selectLocator,'index');};Selenium.prototype.getSelectedIndex=function(selectLocator){/** Gets option index (option number, starting at 0) for selected option in the specified select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string the selected option index in the specified select drop-down\n   */return this.findSelectedOptionProperty(selectLocator,'index');};Selenium.prototype.getSelectedIds=function(selectLocator){/** Gets all option element IDs for selected options in the specified select or multi-select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string[] an array of all selected option IDs in the specified select drop-down\n   */return this.findSelectedOptionProperties(selectLocator,'id');};Selenium.prototype.getSelectedId=function(selectLocator){/** Gets option element ID for selected option in the specified select element.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string the selected option ID in the specified select drop-down\n   */return this.findSelectedOptionProperty(selectLocator,'id');};Selenium.prototype.isSomethingSelected=function(selectLocator){/** Determines whether some option in a drop-down menu is selected.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return boolean true if some option has been selected, false otherwise\n   */let element=this.browserbot.findElement(selectLocator);if(!('options'in element)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Specified element is not a Select (has no options)');}for(let i=0;i<element.options.length;i++){if(element.options[i].selected){return true;}}return false;};Selenium.prototype.findSelectedOptionProperties=function(locator,property){let element=this.browserbot.findElement(locator);if(!('options'in element)){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Specified element is not a Select (has no options)');}let selectedOptions=[];for(let i=0;i<element.options.length;i++){if(element.options[i].selected){let propVal=element.options[i][property];selectedOptions.push(propVal);}}if(selectedOptions.length==0)Assert.fail('No option selected');// eslint-disable-line no-undef\nreturn selectedOptions;};Selenium.prototype.findSelectedOptionProperty=function(locator,property){let selectedOptions=this.findSelectedOptionProperties(locator,property);if(selectedOptions.length>1){Assert.fail('More than one selected option!');// eslint-disable-line no-undef\n}return selectedOptions[0];};Selenium.prototype.getSelectOptions=function(selectLocator){/** Gets all option labels in the specified select drop-down.\n   *\n   * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n   * @return string[] an array of all option labels in the specified select drop-down\n   */let element=this.browserbot.findElement(selectLocator);let selectOptions=[];for(let i=0;i<element.options.length;i++){let option=element.options[i].text;selectOptions.push(option);}return selectOptions;};Selenium.prototype.getAttribute=function(attributeLocator){/**\n   * Gets the value of an element attribute. The value of the attribute may\n   * differ across browsers (this is the case for the \"style\" attribute, for\n   * example).\n   *\n   * @param attributeLocator an element locator followed by an &#064; sign and then the name of the attribute, e.g. \"foo&#064;bar\"\n   * @return string the value of the specified attribute\n   */let result=this.browserbot.findAttribute(attributeLocator);if(result==null){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Could not find element attribute: '+attributeLocator);}return result;};Selenium.prototype.isTextPresent=function(pattern){/**\n   * Verifies that the specified text pattern appears somewhere on the rendered page shown to the user.\n   * @param pattern a <a href=\"#patterns\">pattern</a> to match with the text of the page\n   * @return boolean true if the pattern matches the text, false otherwise\n   */let allText=this.browserbot.bodyText();let patternMatcher=new __WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */](pattern);if(patternMatcher.strategy==__WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */].strategies.glob){if(pattern.indexOf('glob:')==0){pattern=pattern.substring('glob:'.length);// strip off \"glob:\"\n}patternMatcher.matcher=new __WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */].strategies.globContains(pattern);}else if(patternMatcher.strategy==__WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */].strategies.exact){pattern=pattern.substring('exact:'.length);// strip off \"exact:\"\nreturn allText.indexOf(pattern)!=-1;}return patternMatcher.matches(allText);};function isElementNotPresent(locator){return!this.isElementPresent(locator);}Selenium.prototype.isElementPresent=function(locator){/**\n   * Verifies that the specified element is somewhere on the page.\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @return boolean true if the element is present, false otherwise\n   */let element=this.browserbot.findElementOrNull(locator);if(element==null){return false;}return true;};function unableToLocateTargetElementError(){throw new Error('Unable to locate target element.');}function isNotDisplayed(locator){try{return!this.isVisible(locator);}catch(error){unableToLocateTargetElementError();}}function isDisplayed(locator){try{return this.isVisible(locator);}catch(error){return false;}}Selenium.prototype.isVisible=function(locator){/**\n   * Determines if the specified element is visible. An\n   * element can be rendered invisible by setting the CSS \"visibility\"\n   * property to \"hidden\", or the \"display\" property to \"none\", either for the\n   * element itself or one if its ancestors.  This method will fail if\n   * the element is not present.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @return boolean true if the specified element is visible, false otherwise\n   */let element;element=this.browserbot.findElement(locator);// DGF if it's an input tag of type \"hidden\" then it's not visible\nif(element.tagName){let tagName=new String(element.tagName).toLowerCase();if(tagName=='input'){if(element.type){let elementType=new String(element.type).toLowerCase();if(elementType=='hidden'){return false;}}}}let visibility=this.findEffectiveStyleProperty(element,'visibility');let _isDisplayed=this._isDisplayed(element);return visibility!='hidden'&&_isDisplayed;};Selenium.prototype.findEffectiveStyleProperty=function(element,property){let effectiveStyle=this.findEffectiveStyle(element);let propertyValue=effectiveStyle[property];if(propertyValue=='inherit'&&element.parentNode.style){return this.findEffectiveStyleProperty(element.parentNode,property);}return propertyValue;};Selenium.prototype._isDisplayed=function(element){let display=this.findEffectiveStyleProperty(element,'display');if(display=='none')return false;if(element.parentNode.style){return this._isDisplayed(element.parentNode);}return true;};Selenium.prototype.findEffectiveStyle=function(element){if(element.style==undefined){return undefined;// not a styled element\n}let window=this.browserbot.getCurrentWindow();if(window.getComputedStyle){// DOM-Level-2-CSS\nreturn window.getComputedStyle(element,null);}if(element.currentStyle){// non-standard IE alternative\nreturn element.currentStyle;// TODO: this won't really work in a general sense, as\n//   currentStyle is not identical to getComputedStyle()\n//   ... but it's good enough for \"visibility\"\n}if(window.document.defaultView&&window.document.defaultView.getComputedStyle){return window.document.defaultView.getComputedStyle(element,null);}throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('cannot determine effective stylesheet in this browser');};function isEditable(locator){try{return this.isEditable(locator);}catch(error){unableToLocateTargetElementError();}}function isNotEditable(locator){try{return!this.isEditable(locator);}catch(error){unableToLocateTargetElementError();}}Selenium.prototype.isEditable=function(locator){/**\n   * Determines whether the specified input element is editable, ie hasn't been disabled.\n   * This method will fail if the specified element isn't an input element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a>\n   * @return boolean true if the input element is editable, false otherwise\n   */let element=this.browserbot.findElement(locator);if(element.value==undefined){Assert.fail('Element '+locator+' is not an input.');// eslint-disable-line no-undef\n}if(element.disabled){return false;}// DGF \"readonly\" is a bit goofy... it doesn't necessarily have a value\n// You can write <input readonly value=\"black\">\nlet readOnlyNode=element.getAttributeNode('readonly');if(readOnlyNode){// DGF on IE, every input element has a readOnly node, but it may be false\nif(typeof readOnlyNode.nodeValue=='boolean'){let readOnly=readOnlyNode.nodeValue;if(readOnly){return false;}}else{return false;}}return true;};Selenium.prototype.getAllButtons=function(){/** Returns the IDs of all buttons on the page.\n   *\n   * <p>If a given button has no ID, it will appear as \"\" in this array.</p>\n   *\n   * @return string[] the IDs of all buttons on the page\n   */return this.browserbot.getAllButtons();};Selenium.prototype.getAllLinks=function(){/** Returns the IDs of all links on the page.\n   *\n   * <p>If a given link has no ID, it will appear as \"\" in this array.</p>\n   *\n   * @return string[] the IDs of all links on the page\n   */return this.browserbot.getAllLinks();};Selenium.prototype.getAllFields=function(){/** Returns the IDs of all input fields on the page.\n   *\n   * <p>If a given field has no ID, it will appear as \"\" in this array.</p>\n   *\n   * @return string[] the IDs of all field on the page\n   */return this.browserbot.getAllFields();};Selenium.prototype.doSetMouseSpeed=function(pixels){/** Configure the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).\n   * <p>Setting this value to 0 means that we'll send a \"mousemove\" event to every single pixel\n   * in between the start location and the end location; that can be very slow, and may\n   * cause some browsers to force the JavaScript to timeout.</p>\n   *\n   * <p>If the mouse speed is greater than the distance between the two dragged objects, we'll\n   * just send one \"mousemove\" at the start location and then one final one at the end location.</p>\n   * @param pixels the number of pixels between \"mousemove\" events\n   */let intValue=new Number(pixels);if(intValue.constructor!=Number||intValue<0){this.mouseSpeed=Selenium.DEFAULT_MOUSE_SPEED;}else{this.mouseSpeed=pixels;}};Selenium.prototype.getMouseSpeed=function(){/** Returns the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10).\n   *\n   * @return number the number of pixels between \"mousemove\" events during dragAndDrop commands (default=10)\n   */return this.mouseSpeed;};Selenium.prototype.doDragAndDrop=function(locator,movementsString){/** Drags an element a certain distance and then drops it\n   * @param locator an element locator\n   * @param movementsString offset in pixels from the current location to which the element should be moved, e.g., \"+70,-300\"\n   */let element=this.browserbot.findElement(locator);let clientStartXY=getClientXY(element);let clientStartX=clientStartXY[0];let clientStartY=clientStartXY[1];let movements=movementsString.split(/,/);let movementX=Number(movements[0]);let movementY=Number(movements[1]);let clientFinishX=clientStartX+movementX<0?0:clientStartX+movementX;let clientFinishY=clientStartY+movementY<0?0:clientStartY+movementY;let mouseSpeed=this.mouseSpeed;let move=function(current,dest){if(current==dest)return current;if(Math.abs(current-dest)<mouseSpeed)return dest;return current<dest?current+mouseSpeed:current-mouseSpeed;};this.browserbot.triggerMouseEvent(element,'mousedown',true,clientStartX,clientStartY);this.browserbot.triggerMouseEvent(element,'mousemove',true,clientStartX,clientStartY);let clientX=clientStartX;let clientY=clientStartY;while(clientX!=clientFinishX||clientY!=clientFinishY){clientX=move(clientX,clientFinishX);clientY=move(clientY,clientFinishY);this.browserbot.triggerMouseEvent(element,'mousemove',true,clientX,clientY);}this.browserbot.triggerMouseEvent(element,'mousemove',true,clientFinishX,clientFinishY);this.browserbot.triggerMouseEvent(element,'mouseup',true,clientFinishX,clientFinishY);};Selenium.prototype.doDragAndDropToObject=function(locatorOfObjectToBeDragged,locatorOfDragDestinationObject){/** Drags an element and drops it on another element\n   *\n   * @param locatorOfObjectToBeDragged an element to be dragged\n   * @param locatorOfDragDestinationObject an element whose location (i.e., whose center-most pixel) will be the point where locatorOfObjectToBeDragged  is dropped\n   */if(!this.browserbot.findElement(locatorOfObjectToBeDragged).draggable){//origin code\nlet startX=this.getElementPositionLeft(locatorOfObjectToBeDragged);let startY=this.getElementPositionTop(locatorOfObjectToBeDragged);let destinationLeftX=this.getElementPositionLeft(locatorOfDragDestinationObject);let destinationTopY=this.getElementPositionTop(locatorOfDragDestinationObject);let destinationWidth=this.getElementWidth(locatorOfDragDestinationObject);let destinationHeight=this.getElementHeight(locatorOfDragDestinationObject);let endX=Math.round(destinationLeftX+destinationWidth/2);let endY=Math.round(destinationTopY+destinationHeight/2);let deltaX=endX-startX;let deltaY=endY-startY;let movementsString=''+deltaX+','+deltaY;this.doDragAndDrop(locatorOfObjectToBeDragged,movementsString);}else{//DragAndDropExt, Shuo-Heng Shih, SELAB, CSIE, NCKU, 2016/09/29\nlet element=this.browserbot.findElement(locatorOfObjectToBeDragged);let target=this.browserbot.findElement(locatorOfDragDestinationObject);this.browserbot.triggerDragEvent(element,target);}};Selenium.prototype.doWindowFocus=function(){/** Gives focus to the currently selected window\n   *\n   */this.browserbot.getCurrentWindow().focus();};Selenium.prototype.doWindowMaximize=function(){/** Resize currently selected window to take up the entire screen\n   *\n   */let window=this.browserbot.getCurrentWindow();if(window!=null&&window.screen){window.moveTo(0,0);// It appears Firefox on Mac won't move a window to (0,0).  But, you can move it to (0,1), which\n// seems to do basically the same thing.  In my (KJM - 6/20/10) tests, anything less than (0, 22)\n// pushed the browser to (0,0), so it seems it's improperly accounting for something in the browser chrome.\nif(window.screenX!=0){window.moveTo(0,1);}window.resizeTo(screen.availWidth,screen.availHeight);}};Selenium.prototype.getHtmlSource=function(){/** Returns the entire HTML source between the opening and\n   * closing \"html\" tags.\n   *\n   * @return string the entire HTML source\n   */return this.browserbot.getDocument().getElementsByTagName('html')[0].innerHTML;};Selenium.prototype.doSetCursorPosition=function(locator,position){/**\n   * Moves the text cursor to the specified position in the given input element or textarea.\n   * This method will fail if the specified element isn't an input element or textarea.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an input element or textarea\n   * @param position the numerical position of the cursor in the field; position should be 0 to move the position to the beginning of the field.  You can also set the cursor to -1 to move it to the end of the field.\n   */let element=this.browserbot.findElement(locator);if(element.value==undefined){Assert.fail('Element '+locator+' is not an input.');// eslint-disable-line no-undef\n}if(position==-1){position=element.value.length;}if(element.setSelectionRange&&!__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"a\" /* browserVersion */].isOpera){element.focus();element.setSelectionRange(/*start*/position,/*end*/position);}else if(element.createTextRange){__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);let range=element.createTextRange();range.collapse(true);range.moveEnd('character',position);range.moveStart('character',position);range.select();}};Selenium.prototype.getElementIndex=function(locator){/**\n   * Get the relative index of an element to its parent (starting from 0). The comment node and empty text node\n   * will be ignored.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an element\n   * @return number of relative index of the element to its parent (starting from 0)\n   */let element=this.browserbot.findElement(locator);let previousSibling;let index=0;while((previousSibling=element.previousSibling)!=null){if(!this._isCommentOrEmptyTextNode(previousSibling)){index++;}element=previousSibling;}return index;};Selenium.prototype.isOrdered=function(locator1,locator2){/**\n   * Check if these two elements have same parent and are ordered siblings in the DOM. Two same elements will\n   * not be considered ordered.\n   *\n   * @param locator1 an <a href=\"#locators\">element locator</a> pointing to the first element\n   * @param locator2 an <a href=\"#locators\">element locator</a> pointing to the second element\n   * @return boolean true if element1 is the previous sibling of element2, false otherwise\n   */let element1=this.browserbot.findElement(locator1);let element2=this.browserbot.findElement(locator2);if(element1===element2)return false;let previousSibling;while((previousSibling=element2.previousSibling)!=null){if(previousSibling===element1){return true;}element2=previousSibling;}return false;};Selenium.prototype._isCommentOrEmptyTextNode=function(node){return node.nodeType==8||node.nodeType==3&&!/[^\\t\\n\\r ]/.test(node.data);};Selenium.prototype.getElementPositionLeft=function(locator){/**\n   * Retrieves the horizontal position of an element\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an element OR an element itself\n   * @return number of pixels from the edge of the frame.\n   */let element;if('string'==typeof locator){element=this.browserbot.findElement(locator);}else{element=locator;}let x=element.offsetLeft;let elementParent=element.offsetParent;while(elementParent!=null){if(document.all){if(elementParent.tagName!='TABLE'&&elementParent.tagName!='BODY'){x+=elementParent.clientLeft;}}// Netscape/DOM\nelse{if(elementParent.tagName=='TABLE'){let parentBorder=parseInt(elementParent.border);if(isNaN(parentBorder)){let parentFrame=elementParent.getAttribute('frame');if(parentFrame!=null){x+=1;}}else if(parentBorder>0){x+=parentBorder;}}}x+=elementParent.offsetLeft;elementParent=elementParent.offsetParent;}return x;};Selenium.prototype.getElementPositionTop=function(locator){/**\n   * Retrieves the vertical position of an element\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an element OR an element itself\n   * @return number of pixels from the edge of the frame.\n   */let element;if('string'==typeof locator){element=this.browserbot.findElement(locator);}else{element=locator;}let y=0;while(element!=null){if(document.all){if(element.tagName!='TABLE'&&element.tagName!='BODY'){y+=element.clientTop;}}// Netscape/DOM\nelse{if(element.tagName=='TABLE'){let parentBorder=parseInt(element.border);if(isNaN(parentBorder)){let parentFrame=element.getAttribute('frame');if(parentFrame!=null){y+=1;}}else if(parentBorder>0){y+=parentBorder;}}}y+=element.offsetTop;// Netscape can get confused in some cases, such that the height of the parent is smaller\n// than that of the element (which it shouldn't really be). If this is the case, we need to\n// exclude this element, since it will result in too large a 'top' return value.\nif(element.offsetParent&&element.offsetParent.offsetHeight&&element.offsetParent.offsetHeight<element.offsetHeight){// skip the parent that's too small\nelement=element.offsetParent.offsetParent;}else{// Next up...\nelement=element.offsetParent;}}return y;};Selenium.prototype.getElementWidth=function(locator){/**\n   * Retrieves the width of an element\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an element\n   * @return number width of an element in pixels\n   */let element=this.browserbot.findElement(locator);return element.offsetWidth;};Selenium.prototype.getElementHeight=function(locator){/**\n   * Retrieves the height of an element\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an element\n   * @return number height of an element in pixels\n   */let element=this.browserbot.findElement(locator);return element.offsetHeight;};Selenium.prototype.getCursorPosition=function(locator){/**\n   * Retrieves the text cursor position in the given input element or textarea; beware, this may not work perfectly on all browsers.\n   *\n   * <p>Specifically, if the cursor/selection has been cleared by JavaScript, this command will tend to\n   * return the position of the last location of the cursor, even though the cursor is now gone from the page.  This is filed as <a href=\"http://jira.openqa.org/browse/SEL-243\">SEL-243</a>.</p>\n   * This method will fail if the specified element isn't an input element or textarea, or there is no cursor in the element.\n   *\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an input element or textarea\n   * @return number the numerical position of the cursor in the field\n   */let element=this.browserbot.findElement(locator);let doc=this.browserbot.getDocument();let win=this.browserbot.getCurrentWindow();let elementRange;if(doc.selection&&!__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"a\" /* browserVersion */].isOpera){try{let selectRange=doc.selection.createRange().duplicate();elementRange=element.createTextRange();selectRange.move('character',0);elementRange.move('character',0);elementRange.setEndPoint('EndToEnd',selectRange);}catch(e){Assert.fail('There is no cursor on this page!');// eslint-disable-line no-undef\n}let answer=String(elementRange.text).replace(/\\r/g,'').length;return answer;}else{if(typeof element.selectionStart!='undefined'){if(win.getSelection&&typeof win.getSelection().rangeCount!=undefined&&win.getSelection().rangeCount==0){Assert.fail('There is no cursor on this page!');// eslint-disable-line no-undef\n}return element.selectionStart;}}throw new Error(\"Couldn't detect cursor position on this browser!\");};Selenium.prototype.getExpression=function(expression){/**\n   * Returns the specified expression.\n   *\n   * <p>This is useful because of JavaScript preprocessing.\n   * It is used to generate commands like assertExpression and waitForExpression.</p>\n   *\n   * @param expression the value to return\n   * @return string the value passed in\n   */return expression;};Selenium.prototype.getXpathCount=function(xpath){/**\n   * Returns the number of nodes that match the specified xpath, eg. \"//table\" would give\n   * the number of tables.\n   *\n   * @param xpath the xpath expression to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.\n   * @return number the number of nodes that match the specified xpath\n   */let result=this.browserbot.evaluateXPathCount(xpath,this.browserbot.getDocument());return result;};Selenium.prototype.getCssCount=function(css){/**\n   * Returns the number of nodes that match the specified css selector, eg. \"css=table\" would give\n   * the number of tables.\n   *\n   * @param css the css selector to evaluate. do NOT wrap this expression in a 'count()' function; we will do that for you.\n   * @return the number of nodes that match the specified selector\n   */let result=this.browserbot.evaluateCssCount(css,this.browserbot.getDocument());return result;};Selenium.prototype.doAssignId=function(locator,identifier){/**\n   * Temporarily sets the \"id\" attribute of the specified element, so you can locate it in the future\n   * using its ID rather than a slow/complicated XPath.  This ID will disappear once the page is\n   * reloaded.\n   * @param locator an <a href=\"#locators\">element locator</a> pointing to an element\n   * @param identifier a string to be used as the ID of the specified element\n   */let element=this.browserbot.findElement(locator);element.id=identifier;};Selenium.prototype.doAllowNativeXpath=function(allow){/**\n   * Specifies whether Selenium should use the native in-browser implementation\n   * of XPath (if any native version is available); if you pass \"false\" to\n   * this function, we will always use our pure-JavaScript xpath library.\n   * Using the pure-JS xpath library can improve the consistency of xpath\n   * element locators between different browser vendors, but the pure-JS\n   * version is much slower than the native implementations.\n   * @param allow boolean, true means we'll prefer to use native XPath; false means we'll only use JS XPath\n   */if('false'==allow||'0'==allow){// The strings \"false\" and \"0\" are true values in JS\nallow=false;}this.browserbot.setAllowNativeXPath(allow);};Selenium.prototype.doIgnoreAttributesWithoutValue=function(ignore){/**\n   * Specifies whether Selenium will ignore xpath attributes that have no\n   * value, i.e. are the empty string, when using the non-native xpath\n   * evaluation engine. You'd want to do this for performance reasons in IE.\n   * However, this could break certain xpaths, for example an xpath that looks\n   * for an attribute whose value is NOT the empty string.\n   *\n   * The hope is that such xpaths are relatively rare, but the user should\n   * have the option of using them. Note that this only influences xpath\n   * evaluation when using the ajaxslt engine (i.e. not \"javascript-xpath\").\n   *\n   * @param ignore boolean, true means we'll ignore attributes without value\n   *                        at the expense of xpath \"correctness\"; false means\n   *                        we'll sacrifice speed for correctness.\n   */if('false'==ignore||'0'==ignore){ignore=false;}this.browserbot.setIgnoreAttributesWithoutValue(ignore);};Selenium.prototype.doWaitForCondition=function(script,timeout){/**\n   * Runs the specified JavaScript snippet repeatedly until it evaluates to \"true\".\n   * The snippet may have multiple lines, but only the result of the last line\n   * will be considered.\n   *\n   * <p>Note that, by default, the snippet will be run in the runner's test window, not in the window\n   * of your application.  To get the window of your application, you can use\n   * the JavaScript snippet <code>selenium.browserbot.getCurrentWindow()</code>, and then\n   * run your JavaScript in there</p>\n   * @param script the JavaScript snippet to run\n   * @param timeout a timeout in milliseconds, after which this command will return with an error\n   */return Selenium.decorateFunctionWithTimeout(function(){return this.eval(script);},timeout);};Selenium.prototype.doWaitForCondition.dontCheckAlertsAndConfirms=true;Selenium.prototype.doSetTimeout=function(timeout){/**\n   * Specifies the amount of time that Selenium will wait for actions to complete.\n   *\n   * <p>Actions that require waiting include \"open\" and the \"waitFor*\" actions.</p>\n   * The default timeout is 30 seconds.\n   * @param timeout a timeout in milliseconds, after which the action will return with an error\n   */if(!timeout){timeout=Selenium.DEFAULT_TIMEOUT;}this.defaultTimeout=timeout;};Selenium.prototype.doWaitForPageToLoad=function(timeout){/**\n   * Waits for a new page to load.\n   *\n   * <p>You can use this command instead of the \"AndWait\" suffixes, \"clickAndWait\", \"selectAndWait\", \"typeAndWait\" etc.\n   * (which are only available in the JS API).</p>\n   *\n   * <p>Selenium constantly keeps track of new pages loading, and sets a \"newPageLoaded\"\n   * flag when it first notices a page load.  Running any other Selenium command after\n   * turns the flag to false.  Hence, if you want to wait for a page to load, you must\n   * wait immediately after a Selenium command that caused a page-load.</p>\n   * @param timeout a timeout in milliseconds, after which this command will return with an error\n   */ // in pi-mode, the test and the harness share the window; thus if we are executing this code, then we have loaded\nif(window['proxyInjectionMode']==null||!window['proxyInjectionMode']){return this.makePageLoadCondition(timeout);}};Selenium.prototype.doWaitForFrameToLoad=function(_frameAddress,timeout){/**\n   * Waits for a new frame to load.\n   *\n   * <p>Selenium constantly keeps track of new pages and frames loading,\n   * and sets a \"newPageLoaded\" flag when it first notices a page load.</p>\n   *\n   * See waitForPageToLoad for more information.\n   *\n   * @param frameAddress FrameAddress from the server side\n   * @param timeout a timeout in milliseconds, after which this command will return with an error\n   */ // in pi-mode, the test and the harness share the window; thus if we are executing this code, then we have loaded\nif(window['proxyInjectionMode']==null||!window['proxyInjectionMode']){return this.makePageLoadCondition(timeout);}};Selenium.prototype._isNewPageLoaded=function(){return this.browserbot.isNewPageLoaded();};Selenium.prototype._abortXhrRequest=function(){return this.browserbot.abortXhrRequest();};Selenium.prototype.doWaitForPageToLoad.dontCheckAlertsAndConfirms=true;/**\n * Evaluate a parameter, performing JavaScript evaluation and variable substitution.\n * If the string matches the pattern \"javascript{ ... }\", evaluate the string between the braces.\n */Selenium.prototype.preprocessParameter=function(value){if(!value.script){// only for non-scripts\nlet match=value.match(/^javascript\\{((.|\\r?\\n)+)\\}$/);if(match&&match[1]){__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({log:{type:'warn',message:'parameter preprocessing using javascript{} tag is deprecated, please use execute script'}});let result=this.eval(match[1]);return result==null?null:result.toString();}}return value;};Selenium.prototype.replaceKeys=function(str){let keys=[];let match=str.match(/\\$\\{\\w+\\}/g);if(!match){keys.push(str);}else{let i=0;while(i<str.length){let currentKey=match.shift(),currentKeyIndex=str.indexOf(currentKey,i);if(currentKeyIndex>i){// push the string before the current key\nkeys.push(str.substr(i,currentKeyIndex-i));i=currentKeyIndex;}if(currentKey){if(/^\\$\\{KEY_\\w+\\}/.test(currentKey)){// is a key\nlet keyName=currentKey.match(/\\$\\{KEY_(\\w+)\\}/)[1];let key=__WEBPACK_IMPORTED_MODULE_6__closure_polyfill__[\"a\" /* bot */].Keyboard.Keys[keyName];if(key){keys.push(key);}else{throw new Error(`Unrecognised key ${keyName}`);}}else{// not a key, and not a stored variable, push it as-is\nkeys.push(currentKey);}i+=currentKey.length;}else if(i<str.length){// push the rest of the string\nkeys.push(str.substr(i,str.length));i=str.length;}}}return keys;};Selenium.prototype.getCookie=function(){/**\n   * Return all cookies of the current page under test.\n   *\n   * @return string all cookies of the current page under test\n   */let doc=this.browserbot.getDocument();return doc.cookie;};Selenium.prototype.getCookieByName=function(name){/**\n   * Returns the value of the cookie with the specified name, or throws an error if the cookie is not present.\n   * @param name the name of the cookie\n   * @return string the value of the cookie\n   */let v=this.browserbot.getCookieByName(name);if(v===null){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */](\"Cookie '\"+name+\"' was not found\");}return v;};Selenium.prototype.isCookiePresent=function(name){/**\n   * Returns true if a cookie with the specified name is present, or false otherwise.\n   * @param name the name of the cookie\n   * @return boolean true if a cookie with the specified name is present, or false otherwise.\n   */let v=this.browserbot.getCookieByName(name);let absent=v===null;return!absent;};Selenium.prototype.doCreateCookie=function(nameValuePair,optionsString){/**\n   * Create a new cookie whose path and domain are same with those of current page\n   * under test, unless you specified a path for this cookie explicitly.\n   *\n   * @param nameValuePair name and value of the cookie in a format \"name=value\"\n   * @param optionsString options for the cookie. Currently supported options include 'path', 'max_age' and 'domain'.\n   *      the optionsString's format is \"path=/path/, max_age=60, domain=.foo.com\". The order of options are irrelevant, the unit\n   *      of the value of 'max_age' is second.  Note that specifying a domain that isn't a subset of the current domain will\n   *      usually fail.\n   */ // eslint-disable-next-line no-useless-escape\nlet results=/[^\\s=\\[\\]\\(\\),\"\\/\\?@:;]+=[^\\s=\\[\\]\\(\\),\"\\/\\?@:;]*/.test(nameValuePair);if(!results){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Invalid parameter.');}let cookie=nameValuePair.trim();results=/max_age=(\\d+)/.exec(optionsString);if(results){let expireDateInMilliseconds=new Date().getTime()+results[1]*1000;cookie+='; expires='+new Date(expireDateInMilliseconds).toGMTString();}results=/path=([^\\s,]+)[,]?/.exec(optionsString);if(results){let path=results[1];if(__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"a\" /* browserVersion */].khtml){// Safari and conquerer don't like paths with / at the end\nif('/'!=path){path=path.replace(/\\/$/,'');}}cookie+='; path='+path;}results=/domain=([^\\s,]+)[,]?/.exec(optionsString);if(results){let domain=results[1];cookie+='; domain='+domain;}//LOG.debug(\"Setting cookie to: \" + cookie);\nthis.browserbot.getDocument().cookie=cookie;};Selenium.prototype.doDeleteCookie=function(name,optionsString){/**\n   * Delete a named cookie with specified path and domain.  Be careful; to delete a cookie, you\n   * need to delete it using the exact same path and domain that were used to create the cookie.\n   * If the path is wrong, or the domain is wrong, the cookie simply won't be deleted.  Also\n   * note that specifying a domain that isn't a subset of the current domain will usually fail.\n   *\n   * Since there's no way to discover at runtime the original path and domain of a given cookie,\n   * we've added an option called 'recurse' to try all sub-domains of the current domain with\n   * all paths that are a subset of the current path.  Beware; this option can be slow.  In\n   * big-O notation, it operates in O(n*m) time, where n is the number of dots in the domain\n   * name and m is the number of slashes in the path.\n   *\n   * @param name the name of the cookie to be deleted\n   * @param optionsString options for the cookie. Currently supported options include 'path', 'domain'\n   *      and 'recurse.' The optionsString's format is \"path=/path/, domain=.foo.com, recurse=true\".\n   *      The order of options are irrelevant. Note that specifying a domain that isn't a subset of\n   *      the current domain will usually fail.\n   */ // set the expire time of the cookie to be deleted to one minute before now.\nlet path='';let domain='';let recurse=false;let matched=false;let results=/path=([^\\s,]+)[,]?/.exec(optionsString);if(results){matched=true;path=results[1];}results=/domain=([^\\s,]+)[,]?/.exec(optionsString);if(results){matched=true;domain=results[1];}results=/recurse=([^\\s,]+)[,]?/.exec(optionsString);if(results){matched=true;recurse=results[1];if('false'==recurse){recurse=false;}}// Treat the entire optionsString as a path (for backwards compatibility)\nif(optionsString&&!matched){//LOG.warn(\"Using entire optionsString as a path; please change the argument to deleteCookie to use path=\" + optionsString);\npath=optionsString;}if(__WEBPACK_IMPORTED_MODULE_5__selenium_browserbot__[\"a\" /* browserVersion */].khtml){// Safari and conquerer don't like paths with / at the end\nif('/'!=path){path=path.replace(/\\/$/,'');}}path=path.trim();domain=domain.trim();let cookieName=name.trim();if(recurse){this.browserbot.recursivelyDeleteCookie(cookieName,domain,path);}else{this.browserbot.deleteCookie(cookieName,domain,path);}};Selenium.prototype.doDeleteAllVisibleCookies=function(){/** Calls deleteCookie with recurse=true on all cookies visible to the current page.\n   * As noted on the documentation for deleteCookie, recurse=true can be much slower\n   * than simply deleting the cookies using a known domain/path.\n   */let win=this.browserbot.getCurrentWindow();let doc=win.document;let cookieNames=this.browserbot.getAllCookieNames(doc);let domain=doc.domain;let path=win.location.pathname;for(let i=0;i<cookieNames.length;i++){this.browserbot.recursivelyDeleteCookie(cookieNames[i],domain,path,win);}};//Selenium.prototype.doSetBrowserLogLevel = function(logLevel) {\n/**\n * Sets the threshold for browser-side logging messages; log messages beneath this threshold will be discarded.\n * Valid logLevel strings are: \"debug\", \"info\", \"warn\", \"error\" or \"off\".\n * To see the browser logs, you need to\n * either show the log window in GUI mode, or enable browser-side logging in Selenium RC.\n *\n * @param logLevel one of the following: \"debug\", \"info\", \"warn\", \"error\" or \"off\"\n */ /*    if (logLevel == null || logLevel == \"\") {\n        throw new SeleniumError(\"You must specify a log level\");\n    }\n    logLevel = logLevel.toLowerCase();\n    if (//LOG.logLevels[logLevel] == null) {\n        throw new SeleniumError(\"Invalid log level: \" + logLevel);\n    }\n    //LOG.setLogLevelThreshold(logLevel);\n}*/Selenium.prototype.doExecuteScript=function(script,varName){const value=this.eval(script.script,script.argv);if(value&&value.constructor.name==='Promise'){throw new Error('Expected sync operation, instead received Promise');}if(varName){return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:value,storeVar:varName});}};Selenium.prototype.doExecuteAsyncScript=function(script,varName){const value=this.eval(script.script,script.argv);if(value&&value.constructor.name!=='Promise'){throw new Error(`Expected async operation, instead received ${value?value.constructor.name:value}`);}return Promise.resolve(value).then(v=>{if(varName){return __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.sendMessage({storeStr:v,storeVar:varName});}});};Selenium.prototype.doRunScript=function(script){/**\n   * Creates a new \"script\" tag in the body of the current test window, and\n   * adds the specified text into the body of the command.  Scripts run in\n   * this way can often be debugged more easily than scripts executed using\n   * Selenium's \"getEval\" command.  Beware that JS exceptions thrown in these script\n   * tags aren't managed by Selenium, so you should probably wrap your script\n   * in try/catch blocks if there is any chance that the script will throw\n   * an exception.\n   * @param script the JavaScript snippet to run\n   */this.eval(script.script,script.argv);};Selenium.prototype.doRollup=function(rollupName,kwargs){/**\n   * Executes a command rollup, which is a series of commands with a unique\n   * name, and optionally arguments that control the generation of the set of\n   * commands. If any one of the rolled-up commands fails, the rollup is\n   * considered to have failed. Rollups may also contain nested rollups.\n   *\n   * @param rollupName  the name of the rollup command\n   * @param kwargs      keyword arguments string that influences how the\n   *                    rollup expands into commands\n   */ // we have to temporarily hijack the commandStarted, nextCommand(),\n// commandComplete(), and commandError() methods of the TestLoop object.\n// When the expanded rollup commands are done executing (or an error has\n// occurred), we'll restore them to their original values.\nlet loop=currentTest||htmlTestRunner.currentTest;// eslint-disable-line no-undef\nlet backupManager={backup:function(){for(let item in this.data){this.data[item]=loop[item];}},restore:function(){for(let item in this.data){loop[item]=this.data[item];}},data:{requiresCallBack:null,commandStarted:null,nextCommand:null,commandComplete:null,commandError:null,pendingRollupCommands:null,rollupFailed:null,rollupFailedMessage:null}// eslint-disable-next-line no-undef\n};let rule=RollupManager.getInstance().getRollupRule(rollupName);let expandedCommands=rule.getExpandedCommands(kwargs);// hold your breath ...\ntry{backupManager.backup();loop.requiresCallBack=false;loop.commandStarted=function(){};loop.nextCommand=function(){if(this.pendingRollupCommands.length==0){return null;}let command=this.pendingRollupCommands.shift();return command;};loop.commandComplete=function(result){if(result.failed){this.rollupFailed=true;this.rollupFailureMessages.push(result.failureMessage);}if(this.pendingRollupCommands.length==0){result={failed:this.rollupFailed,failureMessage:this.rollupFailureMessages.join('; ')//LOG.info('Rollup execution complete: ' + (result.failed ? 'failed! (see error messages below)' : 'ok'));\n};backupManager.restore();this.commandComplete(result);}};loop.commandError=function(errorMessage){//LOG.info('Rollup execution complete: bombed!');\nbackupManager.restore();this.commandError(errorMessage);};loop.pendingRollupCommands=expandedCommands;loop.rollupFailed=false;loop.rollupFailureMessages=[];}catch(e){//LOG.error('Rollup error: ' + e);\nbackupManager.restore();}};Selenium.prototype.doAddScript=function(scriptContent,scriptTagId){/**\n   * Loads script content into a new script tag in the Selenium document. This\n   * differs from the runScript command in that runScript adds the script tag\n   * to the document of the AUT, not the Selenium document. The following\n   * entities in the script content are replaced by the characters they\n   * represent:\n   *\n   *     &lt;\n   *     &gt;\n   *     &amp;\n   *\n   * The corresponding remove command is removeScript.\n   *\n   * @param scriptContent  the Javascript content of the script to add\n   * @param scriptTagId    (optional) the id of the new script tag. If\n   *                       specified, and an element with this id already\n   *                       exists, this operation will fail.\n   */if(scriptTagId&&document.getElementById(scriptTagId)){let msg=\"Element with id '\"+scriptTagId+\"' already exists!\";throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */](msg);}let head=document.getElementsByTagName('head')[0];let script=document.createElement('script');script.type='text/javascript';if(scriptTagId){script.id=scriptTagId;}// replace some entities\nscriptContent=scriptContent.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');script.text=scriptContent;head.appendChild(script);};Selenium.prototype.doRemoveScript=function(scriptTagId){/**\n   * Removes a script tag from the Selenium document identified by the given\n   * id. Does nothing if the referenced tag doesn't exist.\n   *\n   * @param scriptTagId  the id of the script element to remove.\n   */let script=document.getElementById(scriptTagId);if(script&&Object(__WEBPACK_IMPORTED_MODULE_8__utils__[\"c\" /* getTagName */])(script)=='script'){script.parentNode.removeChild(script);}};Selenium.prototype.doUseXpathLibrary=function(libraryName){/**\n   * Allows choice of one of the available libraries.\n   * @param libraryName name of the desired library\n   * Only the following can be chosen:\n   * <ul>\n   *   <li>\"ajaxslt\" - Google's library</li>\n   *   <li>\"javascript-xpath\" - Cybozu Labs' faster library</li>\n   *   <li>\"rpc-optimizing-ajaxslt\" - the RPC optimizing strategy, delegating to ajaxslt</li>\n   *   <li>\"rpc-optimizing-jsxpath\" - the RPC optimizing strategy, delegating to javascript-xpath</li>\n   *   <li>\"default\" - The default library.  Currently the default library is \"ajaxslt\" .</li>\n   * </ul>\n   * If libraryName isn't one of these, it may be the name of another engine\n   * registered to the browserbot's XPathEvaluator, for example by overriding\n   * XPathEvaluator.prototype.init() . If it is not a registered engine\n   * either, then no change will be made.\n   */if(!this.browserbot.getXPathEngine(libraryName)){return;}this.browserbot.setXPathEngine(libraryName);};/**\n *  Factory for creating \"Option Locators\".\n *  An OptionLocator is an object for dealing with Select options (e.g. for\n *  finding a specified option, or asserting that the selected option of\n *  Select element matches some condition.\n *  The type of locator returned by the factory depends on the locator string:\n *     label=<exp>  (OptionLocatorByLabel)\n *     value=<exp>  (OptionLocatorByValue)\n *     index=<exp>  (OptionLocatorByIndex)\n *     id=<exp>     (OptionLocatorById)\n *     <exp> (default is OptionLocatorByLabel).\n */function OptionLocatorFactory(){}OptionLocatorFactory.prototype.fromLocatorString=function(locatorString){let locatorType='label';let locatorValue=locatorString;// If there is a locator prefix, use the specified strategy\nlet result=locatorString.match(/^([a-zA-Z]+)=(.*)/);if(result){locatorType=result[1];locatorValue=result[2];}if(this.optionLocators==undefined){this.registerOptionLocators();}if(this.optionLocators[locatorType]){return new this.optionLocators[locatorType](locatorValue);}throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Unknown option locator type: '+locatorType);};/**\n * To allow for easy extension, all of the option locators are found by\n * searching for all methods of OptionLocatorFactory.prototype that start\n * with \"OptionLocatorBy\".\n * TODO: Consider using the term \"Option Specifier\" instead of \"Option Locator\".\n */OptionLocatorFactory.prototype.registerOptionLocators=function(){this.optionLocators={};for(let functionName in this){let result=/OptionLocatorBy([A-Z].+)$/.exec(functionName);if(result!=null){let locatorName=Object(__WEBPACK_IMPORTED_MODULE_8__utils__[\"e\" /* lowerFirstChar */])(result[1]);this.optionLocators[locatorName]=this[functionName];}}};/**\n *  OptionLocator for options identified by their labels.\n */OptionLocatorFactory.prototype.OptionLocatorByLabel=function(label){this.label=label;this.labelMatcher=new __WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */](this.label);this.findOption=function(element){for(let i=0;i<element.options.length;i++){if(this.labelMatcher.matches(element.options[i].text)){return element.options[i];}}throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */](\"Option with label '\"+this.label+\"' not found\");};this.assertSelected=function(element){let selectedLabel=element.options[element.selectedIndex].text;Assert.matches(this.label,selectedLabel);// eslint-disable-line no-undef\n};};/**\n *  OptionLocator for options identified by their values.\n */OptionLocatorFactory.prototype.OptionLocatorByValue=function(value){this.value=value;this.valueMatcher=new __WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */](this.value);this.findOption=function(element){for(let i=0;i<element.options.length;i++){if(this.valueMatcher.matches(element.options[i].value)){return element.options[i];}}throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */](\"Option with value '\"+this.value+\"' not found\");};this.assertSelected=function(element){let selectedValue=element.options[element.selectedIndex].value;Assert.matches(this.value,selectedValue);// eslint-disable-line no-undef\n};};/**\n *  OptionLocator for options identified by their index.\n */OptionLocatorFactory.prototype.OptionLocatorByIndex=function(index){this.index=Number(index);if(isNaN(this.index)||this.index<0){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Illegal Index: '+index);}this.findOption=function(element){if(element.options.length<=this.index){throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('Index out of range.  Only '+element.options.length+' options available');}return element.options[this.index];};this.assertSelected=function(element){Assert.equals(this.index,element.selectedIndex);// eslint-disable-line no-undef\n};};/**\n *  OptionLocator for options identified by their id.\n */OptionLocatorFactory.prototype.OptionLocatorById=function(id){this.id=id;this.idMatcher=new __WEBPACK_IMPORTED_MODULE_7__PatternMatcher__[\"a\" /* default */](this.id);this.findOption=function(element){for(let i=0;i<element.options.length;i++){if(this.idMatcher.matches(element.options[i].id)){return element.options[i];}}throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */](\"Option with id '\"+this.id+\"' not found\");};this.assertSelected=function(element){let selectedId=element.options[element.selectedIndex].id;Assert.matches(this.id,selectedId);// eslint-disable-line no-undef\n};};//EditContentExt, Lin Yun Wen, SELAB, CSIE, NCKU, 2016/11/17\nSelenium.prototype.doEditContent=function(locator,value){/**\n   *to set text in the element which's conentEditable attribute is true\n   *@param locator an element locator\n   *@param value the context of the element in html\n   */let element=this.browserbot.findElement(locator);let editable=element.contentEditable;if(editable=='true'){element.innerHTML=Object(__WEBPACK_IMPORTED_MODULE_4__escape__[\"escapeHTML\"])(value);}else{throw new __WEBPACK_IMPORTED_MODULE_2__SeleniumError__[\"a\" /* default */]('The value of contentEditable attribute of this element is not true.');}};// Modified prompt by SideeX comitters (Copyright 2017)\nSelenium.prototype.doChooseCancelOnNextPrompt=function(){return this.browserbot.cancelNextPrompt();};Selenium.prototype.doAnswerOnNextPrompt=function(answer){return this.browserbot.setNextPromptResult(answer);};Selenium.prototype.doAssertPrompt=function(message){return this.browserbot.getPromptMessage().then(function(actualMessage){if(message!=actualMessage)return Promise.reject(\"Prompt message doesn't match actual message\");else return Promise.resolve(true);});};// Modified alert by SideeX comitters (Copyright 2017)\nSelenium.prototype.doAssertAlert=function(message){return this.browserbot.getAlertMessage().then(function(actualMessage){if(message!=actualMessage)return Promise.reject(\"Alert message doesn't match actual message\");else return Promise.resolve(true);});};// Modified confirm by SideeX comitters (Copyright 2017)\nSelenium.prototype.doChooseCancelOnNextConfirmation=function(){return this.browserbot.setNextConfirmationResult(false);};Selenium.prototype.doChooseOkOnNextConfirmation=function(){return this.browserbot.setNextConfirmationResult(true);};Selenium.prototype.doAssertConfirmation=function(value){return this.browserbot.getConfirmationMessage().then(function(actualMessage){if(value!=actualMessage)return Promise.reject(\"Confirmation message doesn't match actual message\");else return Promise.resolve(true);});};Selenium.prototype.doShowElement=function(locator){const elementForInjectingStyle=document.createElement('link');elementForInjectingStyle.rel='stylesheet';elementForInjectingStyle.href=__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.getURL('/assets/highlight.css');(document.head||document.documentElement).appendChild(elementForInjectingStyle);const highlightElement=document.createElement('div');highlightElement.id='selenium-highlight';document.body.appendChild(highlightElement);if(locator.x){highlightElement.style.left=parseInt(locator.x)+'px';highlightElement.style.top=parseInt(locator.y)+'px';highlightElement.style.width=parseInt(locator.width)+'px';highlightElement.style.height=parseInt(locator.height)+'px';}else{const bodyRects=document.documentElement.getBoundingClientRect();const element=this.browserbot.findElement(locator);const elementRects=element.getBoundingClientRect();highlightElement.style.left=parseInt(elementRects.left-bodyRects.left)+'px';highlightElement.style.top=parseInt(elementRects.top-bodyRects.top)+'px';highlightElement.style.width=parseInt(elementRects.width)+'px';highlightElement.style.height=parseInt(elementRects.height)+'px';}highlightElement.style.position='absolute';highlightElement.style.zIndex='100';highlightElement.style.display='block';highlightElement.style.pointerEvents='none';Object(__WEBPACK_IMPORTED_MODULE_1_scroll_into_view_if_needed__[\"a\" /* default */])(highlightElement,{centerIfNeeded:true});highlightElement.className='active-selenium-highlight';setTimeout(()=>{document.body.removeChild(highlightElement);elementForInjectingStyle.parentNode.removeChild(elementForInjectingStyle);},500);return'element found';};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///227\n");

/***/ }),

/***/ 228:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selenium_api__ = __webpack_require__(227);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__SeleniumError__ = __webpack_require__(110);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__commands_api__ = __webpack_require__(140);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils__ = __webpack_require__(111);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__PatternMatcher__ = __webpack_require__(229);\n/*\n * Copyright 2011 Software Freedom Conservancy\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */ /*\n * This script provides the Javascript API to drive the test application contained within\n * a Browser Window.\n * TODO:\n *    Add support for more events (keyboard and mouse)\n *    Allow to switch \"user-entry\" mode from mouse-based to keyboard-based, firing different\n *          events in different modes.\n */const browserVersion=new window.global.BrowserVersion();\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = browserVersion;\nwindow.global.browserVersion=browserVersion;// The window to which the commands will be sent.  For example, to click on a\n// popup window, first select that window, and then do a normal click command.\nclass BrowserBot{constructor(topLevelApplicationWindow){this.topWindow=topLevelApplicationWindow;this.topFrame=this.topWindow;this.baseUrl=window.location.href;__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].setWindow(window);//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/05/26\nthis.count=1;// the buttonWindow is the Selenium window\n// it contains the Run/Pause buttons... this should *not* be the AUT window\nthis.buttonWindow=window;this.currentWindow=this.topWindow;this.currentWindowName=null;this.allowNativeXpath=true;this.xpathEvaluator=new XPathEvaluator('ajaxslt');// change to \"javascript-xpath\" for the newer, faster engine\n// We need to know this in advance, in case the frame closes unexpectedly\nthis.isSubFrameSelected=false;this.altKeyDown=false;this.controlKeyDown=false;this.shiftKeyDown=false;this.metaKeyDown=false;this.modalDialogTest=null;this.recordedAlerts=new Array();this.recordedConfirmations=new Array();this.recordedPrompts=new Array();this.openedWindows={};//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/05/26\nthis.openedWindows['win_ser_local']=this.topWindow;this.nextConfirmResult=true;this.nextPromptResult='';this.newPageLoaded=false;this.pageLoadError=null;this.ignoreResponseCode=false;this.xhr=null;this.abortXhr=false;this.isXhrSent=false;this.isXhrDone=false;this.xhrOpenLocation=null;this.xhrResponseCode=null;this.xhrStatusText=null;this.shouldHighlightLocatedElement=false;this.uniqueId='seleniumMarker'+new Date().getTime();this.pollingForLoad=new Object();this.permDeniedCount=new Object();this.windowPollers=new Array();// DGF for backwards compatibility\nthis.browserbot=this;let self=this;Object.assign(this,PageBot.prototype);this._registerAllLocatorFunctions();this.recordPageLoad=function(){self.newPageLoaded=true;};this.isNewPageLoaded=function(){let e;if(this.pageLoadError){e=this.pageLoadError;this.pageLoadError=null;throw e;}if(self.ignoreResponseCode){return self.newPageLoaded;}else{if(self.isXhrSent&&self.isXhrDone){if(!(self.xhrResponseCode>=200&&self.xhrResponseCode<=399||self.xhrResponseCode==0)){// TODO: for IE status like: 12002, 12007, ... provide corresponding statusText messages also.\ne='XHR ERROR: URL = '+self.xhrOpenLocation+' Response_Code = '+self.xhrResponseCode+' Error_Message = '+self.xhrStatusText;self.abortXhr=false;self.isXhrSent=false;self.isXhrDone=false;self.xhrResponseCode=null;self.xhrStatusText=null;throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */](e);}}return self.newPageLoaded&&(self.isXhrSent?self.abortXhr||self.isXhrDone:true);}};this.setAllowNativeXPath=function(allow){this.xpathEvaluator.setAllowNativeXPath(allow);};this.setIgnoreAttributesWithoutValue=function(ignore){this.xpathEvaluator.setIgnoreAttributesWithoutValue(ignore);};this.setXPathEngine=function(engineName){this.xpathEvaluator.setCurrentEngine(engineName);};this.getXPathEngine=function(){return this.xpathEvaluator.getCurrentEngine();};}}\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = BrowserBot;\n// DGF PageBot exists for backwards compatibility with old user-extensions\nconst PageBot=function(){};BrowserBot.createForWindow=function(window,proxyInjectionMode){let browserbot;if(browserVersion.isIE){browserbot=new IEBrowserBot(window);}else if(browserVersion.isKonqueror){browserbot=new KonquerorBrowserBot(window);}else if(browserVersion.isOpera){browserbot=new OperaBrowserBot(window);}else if(browserVersion.isSafari){browserbot=new SafariBrowserBot(window);}else{// Use mozilla by default\nbrowserbot=new MozillaBrowserBot(window);}// getCurrentWindow has the side effect of modifying it to handle page loads etc\nbrowserbot.proxyInjectionMode=proxyInjectionMode;browserbot.getCurrentWindow();// for modifyWindow side effect.  This is not a transparent style\nreturn browserbot;};// todo: rename?  This doesn't actually \"do\" anything.\nBrowserBot.prototype.doModalDialogTest=function(test){this.modalDialogTest=test;};BrowserBot.prototype.cancelNextConfirmation=function(result){this.nextConfirmResult=result;};//BrowserBot.prototype.setNextPromptResult = function(result) {\n//this.nextResult = result;\n//};\nBrowserBot.prototype.hasAlerts=function(){return this.recordedAlerts.length>0;};BrowserBot.prototype.relayBotToRC=function(s){// DGF need to do this funny trick to see if we're in PI mode, because\n// \"this\" might be the window, rather than the browserbot (e.g. during window.alert)\nlet piMode=this.proxyInjectionMode;if(!piMode){if(typeof __WEBPACK_IMPORTED_MODULE_2__commands_api__[\"selenium\"]!='undefined'){piMode=__WEBPACK_IMPORTED_MODULE_2__commands_api__[\"selenium\"].browserbot&&__WEBPACK_IMPORTED_MODULE_2__commands_api__[\"selenium\"].browserbot.proxyInjectionMode;}}if(piMode){this.relayToRC('selenium.'+s);}};BrowserBot.prototype.relayToRC=function(){return null;};BrowserBot.prototype.resetPopups=function(){this.recordedAlerts=[];this.recordedConfirmations=[];this.recordedPrompts=[];};BrowserBot.prototype.getNextAlert=function(){let t=this.recordedAlerts.shift();if(t){t=t.replace(/\\n/g,' ');// because Selenese loses \\n's when retrieving text from HTML table\n}this.relayBotToRC('browserbot.recordedAlerts');return t;};BrowserBot.prototype.hasConfirmations=function(){return this.recordedConfirmations.length>0;};BrowserBot.prototype.getNextConfirmation=function(){let t=this.recordedConfirmations.shift();this.relayBotToRC('browserbot.recordedConfirmations');return t;};BrowserBot.prototype.hasPrompts=function(){return this.recordedPrompts.length>0;};BrowserBot.prototype.getNextPrompt=function(){let t=this.recordedPrompts.shift();this.relayBotToRC('browserbot.recordedPrompts');return t;};/* Fire a mouse event in a browser-compatible manner */BrowserBot.prototype.triggerMouseEvent=function(element,eventType,canBubble,clientX,clientY,button){clientX=clientX?clientX:0;clientY=clientY?clientY:0;//LOG.debug(\"triggerMouseEvent assumes setting screenX and screenY to 0 is ok\");\nlet screenX=0;let screenY=0;canBubble=typeof canBubble==undefined?true:canBubble;let doc=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"c\" /* default */].dom.getOwnerDocument(element);let view=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"c\" /* default */].dom.getWindow(doc);let evt=doc.createEvent('MouseEvents');if(evt.initMouseEvent){// see http://developer.mozilla.org/en/docs/DOM:event.button and\n// http://developer.mozilla.org/en/docs/DOM:event.initMouseEvent for button ternary logic logic\n//Safari\nevt.initMouseEvent(eventType,canBubble,true,view,1,screenX,screenY,clientX,clientY,this.controlKeyDown,this.altKeyDown,this.shiftKeyDown,this.metaKeyDown,button?button:0,null);}else{//LOG.warn(\"element doesn't have initMouseEvent; firing an event which should -- but doesn't -- have other mouse-event related attributes here, as well as controlKeyDown, altKeyDown, shiftKeyDown, metaKeyDown\");\nevt.initEvent(eventType,canBubble,true);evt.shiftKey=this.shiftKeyDown;evt.metaKey=this.metaKeyDown;evt.altKey=this.altKeyDown;evt.ctrlKey=this.controlKeyDown;if(button){evt.button=button;}}element.dispatchEvent(evt);};//DragAndDropExt, Shuo-Heng Shih, SELAB, CSIE, NCKU, 2016/10/17\nBrowserBot.prototype.triggerDragEvent=function(element,target){const getXpathOfElement=function(element){if(element==null){return'null';}if(element.parentElement==null){return'/'+element.tagName;}let siblingElement=element.parentElement.children;let tagCount=0;let totalTagCount=0;let isFound=false;for(let i=0;i<siblingElement.length;i++){if(siblingElement[i].tagName==element.tagName&&!isFound){tagCount++;totalTagCount++;}else if(siblingElement[i].tagName==element.tagName){totalTagCount++;}if(siblingElement[i]==element){isFound=true;}}if(totalTagCount>1){return getXpathOfElement(element.parentElement)+'/'+element.tagName+'['+tagCount+']';}return getXpathOfElement(element.parentElement)+'/'+element.tagName;};let script=\"                                              \\\n        function simulateDragDrop(sourceNode, destinationNode){\\\n        function createCustomEvent(type) {                     \\\n            var event = new CustomEvent('CustomEvent');        \\\n            event.initCustomEvent(type, true, true, null);     \\\n            event.dataTransfer = {                             \\\n                data: {                                        \\\n                },                                             \\\n                setData: function(type, val) {                 \\\n                    this.data[type] = val;                     \\\n                },                                             \\\n                getData: function(type) {                      \\\n                    return this.data[type];                    \\\n                }                                              \\\n            };                                                 \\\n            return event;                                      \\\n        }                                                      \\\n        function dispatchEvent(node, type, event) {            \\\n            if (node.dispatchEvent) {                          \\\n                return node.dispatchEvent(event);              \\\n            }                                                  \\\n            if (node.fireEvent) {                              \\\n                return node.fireEvent('on' + type, event);     \\\n            }                                                  \\\n        }                                                      \\\n        var event = createCustomEvent('dragstart');            \\\n        dispatchEvent(sourceNode, 'dragstart', event);         \\\n                                                               \\\n        var dropEvent = createCustomEvent('drop');             \\\n        dropEvent.dataTransfer = event.dataTransfer;           \\\n        dispatchEvent(destinationNode, 'drop', dropEvent);     \\\n                                                               \\\n        var dragEndEvent = createCustomEvent('dragend');       \\\n        dragEndEvent.dataTransfer = event.dataTransfer;        \\\n        dispatchEvent(sourceNode, 'dragend', dragEndEvent);    \\\n    }                                                          \\\n    simulateDragDrop(document.evaluate('\"+getXpathOfElement(element)+\"', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue, document.evaluate('\"+getXpathOfElement(target)+\"', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue);\\\n    \";let win=this.browserbot.getCurrentWindow();let doc=win.document;let scriptTag=doc.createElement('script');scriptTag.type='text/javascript';scriptTag.text=script;doc.body.appendChild(scriptTag);};BrowserBot.prototype._windowClosed=function(win){try{let c=win.closed;if(c==null)return true;return c;}catch(ignored){// Firefox 15+ may already have marked the win dead. Accessing it\n// causes an exception to be thrown. That exception tells us the window\n// is closed.\nreturn true;}};BrowserBot.uniqueKey=1;BrowserBot.prototype._modifyWindow=function(win){// In proxyInjectionMode, have to suppress //LOG calls in _modifyWindow to avoid an infinite loop\nif(this._windowClosed(win)){if(!this.proxyInjectionMode){//LOG.error(\"modifyWindow: Window was closed!\");\n}return null;}if(!this.proxyInjectionMode){}//LOG.debug('modifyWindow ' + this.uniqueId + \":\" + win[this.uniqueId]);\n// Assign a unique label for this window. We set this on a known attribute so we can reliably\n// find it later. This is slightly different from uniqueId.\nwin.seleniumKey=BrowserBot.uniqueKey++;try{this.modifyWindowToRecordPopUpDialogs(win,this);}catch(ex){console.error(ex);// eslint-disable-line no-console\n}//Commenting out for issue 1854\n//win[this.uniqueId] = 1;\n// In proxyInjection mode, we have our own mechanism for detecting page loads\nif(!this.proxyInjectionMode){this.modifySeparateTestWindowToDetectPageLoads(win);}if(win.frames&&win.frames.length&&win.frames.length>0){for(let i=0;i<win.frames.length;i++){try{this._modifyWindow(win.frames[i]);}catch(e){}// eslint-disable-line no-empty\n// we're just trying to be opportunistic; don't worry if this doesn't work out\n}}return win;};BrowserBot.prototype.selectWindow=function(target){if(!target||target=='null'){this._selectTopWindow();return;}let result=target.match(/^([a-zA-Z]+)=(.*)/);if(!result){this._selectWindowByWindowId(target);return;}let locatorType=result[1];let locatorValue=result[2];if(locatorType=='title'){this._selectWindowByTitle(locatorValue);}// TODO separate name and var into separate functions\nelse if(locatorType=='name'){this._selectWindowByName(locatorValue);}else if(locatorType=='var'){let win=this.getCurrentWindow().eval(locatorValue);if(win){this._selectWindowByName(win.name);}else{throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Window not found by var: '+locatorValue);}}else{throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Window locator not recognized: '+locatorType);}};BrowserBot.prototype.selectPopUp=function(windowId){if(!windowId||windowId=='null'){this._selectFirstNonTopWindow();}else{this._selectWindowByWindowId(windowId);}};BrowserBot.prototype._selectTopWindow=function(){this.currentWindowName=null;this.currentWindow=this.topWindow;this.topFrame=this.topWindow;this.isSubFrameSelected=false;};BrowserBot.prototype._selectWindowByWindowId=function(windowId){try{this._selectWindowByName(windowId);}catch(e){this._selectWindowByTitle(windowId);}};BrowserBot.prototype._selectWindowByName=function(target){this.currentWindow=this.getWindowByName(target,false);this.topFrame=this.currentWindow;this.currentWindowName=target;this.isSubFrameSelected=false;};BrowserBot.prototype._selectWindowByTitle=function(target){let windowName=this.getWindowNameByTitle(target);if(!windowName){this._selectTopWindow();}else{this._selectWindowByName(windowName);}};BrowserBot.prototype._selectFirstNonTopWindow=function(){let names=this.getNonTopWindowNames();if(names.length){this._selectWindowByName(names[0]);}};BrowserBot.prototype.selectFrame=function(target){let frame;if(target.indexOf('index=')==0){target=target.substr(6);frame=this.getCurrentWindow().frames[target];if(frame==null){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Not found: frames['+target+']');}if(!frame.document){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('frames['+target+'] is not a frame');}this.currentWindow=frame;this.isSubFrameSelected=true;}else if(target=='relative=up'||target=='relative=parent'){this.currentWindow=this.getCurrentWindow().parent;this.isSubFrameSelected=this._getFrameElement(this.currentWindow)!=null;}else if(target=='relative=top'){this.currentWindow=this.topFrame;this.isSubFrameSelected=false;}else{frame=this.findElement(target);if(frame==null){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Not found: '+target);}// now, did they give us a frame or a frame ELEMENT?\nlet match=false;if(frame.contentWindow){// this must be a frame element\nif(browserVersion.isHTA){// stupid HTA bug; can't get in the front door\ntarget=frame.contentWindow.name;}else{this.currentWindow=frame.contentWindow;this.isSubFrameSelected=true;match=true;}}else if(frame.document&&frame.location){// must be an actual window frame\nthis.currentWindow=frame;this.isSubFrameSelected=true;match=true;}if(!match){// neither, let's loop through the frame names\nlet win=this.getCurrentWindow();if(win&&win.frames&&win.frames.length){for(let i=0;i<win.frames.length;i++){if(win.frames[i].name==target){this.currentWindow=win.frames[i];this.isSubFrameSelected=true;match=true;break;}}}if(!match){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Not a frame: '+target);}}}// modifies the window\nthis.getCurrentWindow();};BrowserBot.prototype.doesThisFrameMatchFrameExpression=function(currentFrameString,target){let isDom=false;if(target.indexOf('dom=')==0){target=target.substr(4);isDom=true;}else if(target.indexOf('index=')==0){target='frames['+target.substr(6)+']';isDom=true;}let t;//Evalinsandbox\n// eslint-disable-next-line no-undef\nlet mySandbox=new Components.utils.Sandbox(this.currentWindow.location.href);mySandbox.currentFrameString=currentFrameString;mySandbox.target=target;try{// eslint-disable-next-line no-undef\nt=Components.utils.evalInSandbox(currentFrameString+'.'+target,mySandbox);//eval(\"t=\" + currentFrameString + \".\" + target);\n}catch(e){}// eslint-disable-line no-empty\nlet autWindow=this.browserbot.getCurrentWindow();if(t!=null){try{if(t.window==autWindow){return true;}if(t.window.uniqueId==autWindow.uniqueId){return true;}return false;}catch(permDenied){// DGF if the windows are incomparable, they're probably not the same...\n}}if(isDom){return false;}// eslint-disable-next-line no-undef\nlet currentFrame=Components.utils.evalInSandbox(currentFrameString,mySandbox);//var currentFrame;\n//eval(\"currentFrame=\" + currentFrameString);\nif(target=='relative=up'){if(currentFrame.window.parent==autWindow){return true;}return false;}if(target=='relative=top'){if(currentFrame.window.top==autWindow){return true;}return false;}if(currentFrame.window==autWindow.parent){if(autWindow.name==target){return true;}try{let element=this.findElement(target,currentFrame.window);if(element.contentWindow==autWindow){return true;}}catch(e){}// eslint-disable-line no-empty\n}return false;};BrowserBot.prototype.abortXhrRequest=function(){if(this.ignoreResponseCode){//LOG.debug(\"XHR response code being ignored. Nothing to abort.\");\n}else{if(this.abortXhr==false&&this.isXhrSent&&!this.isXhrDone){//LOG.info(\"abortXhrRequest(): aborting request\");\nthis.abortXhr=true;this.xhr.abort();}}};BrowserBot.prototype.onXhrStateChange=function(method){//LOG.info(\"onXhrStateChange(): xhr.readyState = \" + this.xhr.readyState + \" method = \" + method + \" time = \" + new Date().getTime());\nif(this.xhr.readyState==4){// check if the request got aborted.\nif(this.abortXhr==true){this.xhrResponseCode=0;this.xhrStatusText='Request Aborted';this.isXhrDone=true;return;}try{if(method=='HEAD'&&(this.xhr.status==501||this.xhr.status==405)){//LOG.info(\"onXhrStateChange(): HEAD ajax returned 501 or 405, retrying with GET\");\n// handle 501 response code from servers that do not support 'HEAD' method.\n// send GET ajax request with range 0-1.\nthis.xhr=new XMLHttpRequest();this.xhr.onreadystatechange=this.onXhrStateChange.bind(this,'GET');this.xhr.open('GET',this.xhrOpenLocation,true);this.xhr.setRequestHeader('Range','bytes:0-1');this.xhr.send('');this.isXhrSent=true;return;}this.xhrResponseCode=this.xhr.status;this.xhrStatusText=this.xhr.statusText;}catch(ex){//LOG.info(\"encountered exception while reading xhrResponseCode.\" + ex.message);\nthis.xhrResponseCode=-1;this.xhrStatusText='Request Error';}this.isXhrDone=true;}};BrowserBot.prototype.openWindow=function(url,windowID){if(url!=''){url='https://www.google.com';}if(browserVersion.isHTA){// in HTA mode, calling .open on the window interprets the url relative to that window\n// we need to absolute-ize the URL to make it consistent\nlet child=this.getCurrentWindow().open(url,windowID,'resizable=yes');__WEBPACK_IMPORTED_MODULE_2__commands_api__[\"selenium\"].browserbot.openedWindows[windowID]=child;}else{this.getCurrentWindow().open(url,windowID,'resizable=yes');}};BrowserBot.prototype.setIFrameLocation=function(iframe,location){iframe.src=location;};BrowserBot.prototype.getCurrentPage=function(){return this;};BrowserBot.prototype.windowNeedsModifying=function(win,uniqueId){// On anything but Firefox, checking the unique id is enough.\n// Firefox 4 introduces a race condition which selenium regularly loses.\ntry{// eslint-disable-next-line no-undef\nlet appInfo=Components.classes['@mozilla.org/xre/app-info;1'].getService(// eslint-disable-next-line no-undef\nComponents.interfaces.nsIXULAppInfo);// eslint-disable-next-line no-undef\nlet versionChecker=Components.classes['@mozilla.org/xpcom/version-comparator;1'// eslint-disable-next-line no-undef\n].getService(Components.interfaces.nsIVersionComparator);if(versionChecker.compare(appInfo.version,'4.0b1')>=0){return win.alert.toString().indexOf('native code')!=-1;}}catch(ignored){}// eslint-disable-line no-empty\nreturn!win[uniqueId];};BrowserBot.prototype.modifyWindowToRecordPopUpDialogs=function(originalWindow,browserBot){let self=this;// Apparently, Firefox 4 makes it possible to unwrap an object to find that\n// there's nothing in it.\nlet windowToModify=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(originalWindow);if(!windowToModify){windowToModify=originalWindow;}windowToModify.seleniumAlert=windowToModify.alert;if(!self.windowNeedsModifying(windowToModify,browserBot.uniqueId)){return;}windowToModify.alert=function(alert){browserBot.recordedAlerts.push(alert);self.relayBotToRC.call(self,'browserbot.recordedAlerts');};windowToModify.confirm=function(message){browserBot.recordedConfirmations.push(message);let result=browserBot.nextConfirmResult;browserBot.nextConfirmResult=true;self.relayBotToRC.call(self,'browserbot.recordedConfirmations');return result;};windowToModify.prompt=function(message){browserBot.recordedPrompts.push(message);let result=!browserBot.nextConfirmResult?null:browserBot.nextPromptResult;browserBot.nextConfirmResult=true;browserBot.nextPromptResult='';self.relayBotToRC.call(self,'browserbot.recordedPrompts');return result;};// Keep a reference to all popup windows by name\n// note that in IE the \"windowName\" argument must be a valid javascript identifier, it seems.\nlet originalOpen=windowToModify.open;let originalOpenReference;if(browserVersion.isHTA){originalOpenReference='selenium_originalOpen'+new Date().getTime();windowToModify[originalOpenReference]=windowToModify.open;}let isHTA=browserVersion.isHTA;let newOpen=function(url,windowName,windowFeatures,replaceFlag){let myOriginalOpen=originalOpen;if(isHTA){myOriginalOpen=this[originalOpenReference];}//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/05/26\nif(windowName==''||windowName=='_blank'||typeof windowName==='undefined'){windowName='win_ser_'+self.count;self.count+=1;}let openedWindow=myOriginalOpen(url,windowName,windowFeatures,replaceFlag);//LOG.debug(\"window.open call intercepted; window ID (which you can use with selectWindow()) is \\\"\" +  windowName + \"\\\"\");\nif(windowName!=null){openedWindow['seleniumWindowName']=windowName;}__WEBPACK_IMPORTED_MODULE_2__commands_api__[\"selenium\"].browserbot.openedWindows[windowName]=openedWindow;return openedWindow;};if(browserVersion.isHTA){originalOpenReference='selenium_originalOpen'+new Date().getTime();const newOpenReference='selenium_newOpen'+new Date().getTime();let setOriginalRef=\"this['\"+originalOpenReference+\"'] = this.open;\";if(windowToModify.eval){windowToModify.eval(setOriginalRef);windowToModify.open=newOpen;}else{// DGF why can't I eval here?  Seems like I'm querying the window at a bad time, maybe?\nsetOriginalRef+=\"this.open = this['\"+newOpenReference+\"'];\";windowToModify[newOpenReference]=newOpen;windowToModify.setTimeout(setOriginalRef,0);}}else{windowToModify.open=newOpen;}};/**\n * Call the supplied function when a the current page unloads and a new one loads.\n * This is done by polling continuously until the document changes and is fully loaded.\n */BrowserBot.prototype.modifySeparateTestWindowToDetectPageLoads=function(windowObject){// Since the unload event doesn't fire in Safari 1.3, we start polling immediately\nif(!windowObject){//LOG.warn(\"modifySeparateTestWindowToDetectPageLoads: no windowObject!\");\nreturn;}if(this._windowClosed(windowObject)){//LOG.info(\"modifySeparateTestWindowToDetectPageLoads: windowObject was closed\");\nreturn;}let oldMarker=this.isPollingForLoad(windowObject);if(oldMarker){//LOG.debug(\"modifySeparateTestWindowToDetectPageLoads: already polling this window: \" + oldMarker);\nreturn;}let marker='selenium'+new Date().getTime();//LOG.debug(\"Starting pollForLoad (\" + marker + \"): \" + windowObject.location);\nthis.pollingForLoad[marker]=true;// if this is a frame, add a load listener, otherwise, attach a poller\nlet frameElement=this._getFrameElement(windowObject);// DGF HTA mode can't attach load listeners to subframes (yuk!)\nlet htaSubFrame=this._isHTASubFrame(windowObject);if(frameElement&&!htaSubFrame){//LOG.debug(\"modifySeparateTestWindowToDetectPageLoads: this window is a frame; attaching a load listener\");\n//addLoadListener(frameElement, this.recordPageLoad); TODO: check if this is necessary\nframeElement[marker]=true;frameElement['frame'+this.uniqueId]=marker;//LOG.debug(\"dgf this.uniqueId=\"+this.uniqueId);\n//LOG.debug(\"dgf marker=\"+marker);\n//LOG.debug(\"dgf frameElement['frame'+this.uniqueId]=\"+frameElement['frame'+this.uniqueId]);\nframeElement[this.uniqueId]=marker;//LOG.debug(\"dgf frameElement[this.uniqueId]=\"+frameElement[this.uniqueId]);\n}else{windowObject.location[marker]=true;windowObject[this.uniqueId]=marker;this.pollForLoad(this.recordPageLoad,windowObject,windowObject.document,windowObject.location,windowObject.location.href,marker);}};BrowserBot.prototype._isHTASubFrame=function(){if(!browserVersion.isHTA)return false;// DGF this is wrong! what if \"win\" isn't the selected window?\nreturn this.isSubFrameSelected;};BrowserBot.prototype._getFrameElement=function(win){let frameElement=null;let caught;try{frameElement=win.frameElement;}catch(e){caught=true;}if(caught){// on IE, checking frameElement in a pop-up results in a \"No such interface supported\" exception\n// but it might have a frame element anyway!\nlet parentContainsIdenticallyNamedFrame=false;try{parentContainsIdenticallyNamedFrame=win.parent.frames[win.name];}catch(e){}// eslint-disable-line no-empty\n// this may fail if access is denied to the parent; in that case, assume it's not a pop-up\nif(parentContainsIdenticallyNamedFrame){// it can't be a coincidence that the parent has a frame with the same name as myself!\nlet result;try{result=parentContainsIdenticallyNamedFrame.frameElement;if(result){return result;}}catch(e){}// eslint-disable-line no-empty\n// it was worth a try! _getFrameElementsByName is often slow\nresult=this._getFrameElementByName(win.name,win.parent.document,win);return result;}}//LOG.debug(\"_getFrameElement: frameElement=\"+frameElement);\nif(frameElement){//LOG.debug(\"frameElement.name=\"+frameElement.name);\n}return frameElement;};BrowserBot.prototype._getFrameElementByName=function(name,doc,win){let frames;let frame;let i;frames=doc.getElementsByTagName('iframe');for(i=0;i<frames.length;i++){frame=frames[i];if(frame.name===name){return frame;}}frames=doc.getElementsByTagName('frame');for(i=0;i<frames.length;i++){frame=frames[i];if(frame.name===name){return frame;}}// DGF weird; we only call this function when we know the doc contains the frame\n//LOG.warn(\"_getFrameElementByName couldn't find a frame or iframe; checking every element for the name \" + name);\nreturn BrowserBot.prototype.locateElementByName(win.name,win.parent.document);};/**\n * Set up a polling timer that will keep checking the readyState of the document until it's complete.\n * Since we might call this before the original page is unloaded, we first check to see that the current location\n * or href is different from the original one.\n */BrowserBot.prototype.pollForLoad=function(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker){//LOG.debug(\"pollForLoad original (\" + marker + \"): \" + originalHref);\ntry{//Samit: Fix: open command sometimes fails if current url is chrome and new is not\nwindowObject=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(windowObject);if(this._windowClosed(windowObject)){//LOG.debug(\"pollForLoad WINDOW CLOSED (\" + marker + \")\");\ndelete this.pollingForLoad[marker];return;}let isSamePage=this._isSamePage(windowObject,originalDocument,originalLocation,originalHref,marker);let rs=this.getReadyState(windowObject,windowObject.document);if(!isSamePage&&rs=='complete'){let currentHref=windowObject.location.href;//LOG.debug(\"pollForLoad FINISHED (\" + marker + \"): \" + rs + \" (\" + currentHref + \")\");\ndelete this.pollingForLoad[marker];this._modifyWindow(windowObject);let newMarker=this.isPollingForLoad(windowObject);if(!newMarker){//LOG.debug(\"modifyWindow didn't start new poller: \" + newMarker);\nthis.modifySeparateTestWindowToDetectPageLoads(windowObject);}newMarker=this.isPollingForLoad(windowObject);let currentlySelectedWindow;let currentlySelectedWindowMarker;currentlySelectedWindow=this.getCurrentWindow(true);currentlySelectedWindowMarker=currentlySelectedWindow[this.uniqueId];//LOG.debug(\"pollForLoad (\" + marker + \") restarting \" + newMarker);\nif(/(TestRunner-splash|Blank)\\.html\\?start=true$/.test(currentHref)){//LOG.debug(\"pollForLoad Oh, it's just the starting page.  Never mind!\");\n}else if(currentlySelectedWindowMarker==newMarker){loadFunction(currentlySelectedWindow);}else{//LOG.debug(\"pollForLoad page load detected in non-current window; ignoring (currentlySelected=\"+currentlySelectedWindowMarker+\", detection in \"+newMarker+\")\");\n}return;}//LOG.debug(\"pollForLoad continue (\" + marker + \"): \" + currentHref);\nthis.reschedulePoller(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);}catch(e){//LOG.debug(\"Exception during pollForLoad; this should get noticed soon (\" + e.message + \")!\");\n//DGF this is supposed to get logged later; log it at debug just in case\n////LOG.exception(e);\nthis.pageLoadError=e;}};BrowserBot.prototype._isSamePage=function(windowObject,originalDocument,originalLocation,originalHref,marker){let currentDocument=windowObject.document;let currentLocation=windowObject.location;let currentHref=currentLocation.href;let sameDoc=this._isSameDocument(originalDocument,currentDocument);let sameLoc=originalLocation===currentLocation;// hash marks don't meant the page has loaded, so we need to strip them off if they exist...\nlet currentHash=currentHref.indexOf('#');if(currentHash>0){currentHref=currentHref.substring(0,currentHash);}let originalHash=originalHref.indexOf('#');if(originalHash>0){originalHref=originalHref.substring(0,originalHash);}//LOG.debug(\"_isSamePage: currentHref: \" + currentHref);\n//LOG.debug(\"_isSamePage: originalHref: \" + originalHref);\nlet sameHref=originalHref===currentHref;let markedLoc=currentLocation[marker];if(browserVersion.isKonqueror||browserVersion.isSafari){// the mark disappears too early on these browsers\nmarkedLoc=true;}// since this is some _very_ important logic, especially for PI and multiWindow mode, we should log all these out\n//LOG.debug(\"_isSamePage: sameDoc: \" + sameDoc);\n//LOG.debug(\"_isSamePage: sameLoc: \" + sameLoc);\n//LOG.debug(\"_isSamePage: sameHref: \" + sameHref);\n//LOG.debug(\"_isSamePage: markedLoc: \" + markedLoc);\nreturn sameDoc&&sameLoc&&sameHref&&markedLoc;};BrowserBot.prototype._isSameDocument=function(originalDocument,currentDocument){return originalDocument===currentDocument;};BrowserBot.prototype.getReadyState=function(windowObject,currentDocument){let rs=currentDocument.readyState;if(rs==null){if(this.buttonWindow!=null&&this.buttonWindow.document.readyState==null||// not proxy injection mode (and therefore buttonWindow isn't null)\ntop.document.readyState==null){// proxy injection mode (and therefore everything's in the top window, but buttonWindow doesn't exist)\n// uh oh!  we're probably on Firefox with no readyState extension installed!\n// We'll have to just take a guess as to when the document is loaded; this guess\n// will never be perfect. :-(\nif(typeof currentDocument.getElementsByTagName!='undefined'&&typeof currentDocument.getElementById!='undefined'&&(currentDocument.getElementsByTagName('body')[0]!=null||currentDocument.body!=null)){if(windowObject.frameElement&&windowObject.location.href=='about:blank'&&windowObject.frameElement.src!='about:blank'){//LOG.info(\"getReadyState not loaded, frame location was about:blank, but frame src = \" + windowObject.frameElement.src);\nreturn null;}//LOG.debug(\"getReadyState = windowObject.frames.length = \" + windowObject.frames.length);\nfor(let i=0;i<windowObject.frames.length;i++){//LOG.debug(\"i = \" + i);\nif(this.getReadyState(windowObject.frames[i],windowObject.frames[i].document)!='complete'){//LOG.debug(\"getReadyState aha! the nested frame \" + windowObject.frames[i].name + \" wasn't ready!\");\nreturn null;}}rs='complete';}else{//LOG.debug(\"pollForLoad readyState was null and DOM appeared to not be ready yet\");\n}}}else if(rs=='loading'&&browserVersion.isIE){//LOG.debug(\"pageUnloading = true!!!!\");\nthis.pageUnloading=true;}//LOG.debug(\"getReadyState returning \" + rs);\nreturn rs;};/** This function isn't used normally, but was the way we used to schedule pollers:\n asynchronously executed autonomous units.  This is deprecated, but remains here\n for future reference.\n */BrowserBot.prototype.XXXreschedulePoller=function(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker){let self=this;window.setTimeout(function(){self.pollForLoad(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);},500);};/** This function isn't used normally, but is useful for debugging asynchronous pollers\n * To enable it, rename it to \"reschedulePoller\", so it will override the\n * existing reschedulePoller function\n */BrowserBot.prototype.XXXreschedulePoller=function(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker){let doc=this.buttonWindow.document;let button=doc.createElement('button');let buttonName=doc.createTextNode(marker+' - '+windowObject.name);button.appendChild(buttonName);let tools=doc.getElementById('tools');let self=this;button.onclick=function(){tools.removeChild(button);self.pollForLoad(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);};tools.appendChild(button);window.setTimeout(button.onclick,500);};BrowserBot.prototype.reschedulePoller=function(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker){let self=this;let pollerFunction=function(){self.pollForLoad(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);};this.windowPollers.push(pollerFunction);};BrowserBot.prototype.runScheduledPollers=function(){//LOG.debug(\"runScheduledPollers\");\nlet oldPollers=this.windowPollers;this.windowPollers=new Array();for(let i=0;i<oldPollers.length;i++){oldPollers[i].call();}//LOG.debug(\"runScheduledPollers DONE\");\n};BrowserBot.prototype.isPollingForLoad=function(win){let marker;let frameElement=this._getFrameElement(win);let htaSubFrame=this._isHTASubFrame(win);if(frameElement&&!htaSubFrame){marker=frameElement['frame'+this.uniqueId];}else{marker=win[this.uniqueId];}if(!marker){//LOG.debug(\"isPollingForLoad false, missing uniqueId \" + this.uniqueId + \": \" + marker);\nreturn false;}if(!this.pollingForLoad[marker]){//LOG.debug(\"isPollingForLoad false, this.pollingForLoad[\" + marker + \"]: \" + this.pollingForLoad[marker]);\nreturn false;}return marker;};BrowserBot.prototype.getWindowByName=function(windowName,doNotModify){//LOG.debug(\"getWindowByName(\" + windowName + \")\");\n// First look in the map of opened windows\nlet targetWindow=this.openedWindows[windowName];if(!targetWindow){targetWindow=this.topWindow[windowName];}if(!targetWindow&&windowName=='_blank'){for(let winName in this.openedWindows){// _blank can match selenium_blank*, if it looks like it's OK (valid href, not closed)\nif(/^selenium_blank/.test(winName)){targetWindow=this.openedWindows[winName];let ok;try{if(!this._windowClosed(targetWindow)){ok=targetWindow.location.href;}}catch(e){}// eslint-disable-line no-empty\nif(ok)break;}}}if(!targetWindow){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Window does not exist. If this looks like a Selenium bug, make sure to read http://seleniumhq.org/docs/02_selenium_ide.html#alerts-popups-and-multiple-windows for potential workarounds.');}if(browserVersion.isHTA){try{targetWindow.location.href;}catch(e){targetWindow=window.open('',targetWindow.name);this.openedWindows[targetWindow.name]=targetWindow;}}if(!doNotModify){this._modifyWindow(targetWindow);}return targetWindow;};/**\n * Find a window name from the window title.\n */BrowserBot.prototype.getWindowNameByTitle=function(windowTitle){//LOG.debug(\"getWindowNameByTitle(\" + windowTitle + \")\");\n// First look in the map of opened windows and iterate them\nfor(let windowName in this.openedWindows){let targetWindow=this.openedWindows[windowName];// If the target window's title is our title\ntry{// TODO implement Pattern Matching here\nif(!this._windowClosed(targetWindow)&&targetWindow.document.title==windowTitle){return windowName;}}catch(e){// You'll often get Permission Denied errors here in IE\n// eh, if we can't read this window's title,\n// it's probably not available to us right now anyway\n}}try{if(this.topWindow.document.title==windowTitle){return'';}}catch(e){}// eslint-disable-line no-empty\n// IE Perm denied\nthrow new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Could not find window with title '+windowTitle);};BrowserBot.prototype.getNonTopWindowNames=function(){let nonTopWindowNames=[];for(let windowName in this.openedWindows){let win=this.openedWindows[windowName];if(!this._windowClosed(win)&&win!=this.topWindow){nonTopWindowNames.push(windowName);}}return nonTopWindowNames;};BrowserBot.prototype.getCurrentWindow=function(doNotModify){if(this.proxyInjectionMode){return window;}let testWindow=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(this.currentWindow);if(!doNotModify){this._modifyWindow(testWindow);//LOG.debug(\"getCurrentWindow newPageLoaded = false\");\nthis.newPageLoaded=false;}testWindow=this._handleClosedSubFrame(testWindow,doNotModify);__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].window_=testWindow;return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(testWindow);};/**\n * Offer a method the end-user can reliably use to retrieve the current window.\n * This should work even for windows with an XPCNativeWrapper. Returns the\n * current window object.\n */BrowserBot.prototype.getUserWindow=function(){let userWindow=this.getCurrentWindow(true);return userWindow;};BrowserBot.prototype._handleClosedSubFrame=function(testWindow,doNotModify){if(this.proxyInjectionMode){return testWindow;}if(this.isSubFrameSelected){let missing=true;if(testWindow.parent&&testWindow.parent.frames&&testWindow.parent.frames.length){for(let i=0;i<testWindow.parent.frames.length;i++){let frame=testWindow.parent.frames[i];if(frame==testWindow||frame.seleniumKey==testWindow.seleniumKey){missing=false;break;}}}if(missing){//LOG.warn(\"Current subframe appears to have closed; selecting top frame\");\nthis.selectFrame('relative=top');return this.getCurrentWindow(doNotModify);}}else if(this._windowClosed(testWindow)){//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/11/25\n/*var closedError = new SeleniumError(\"Current window or frame is closed!\");\n        closedError.windowClosed = true;\n        throw closedError;*/testWindow=this.topWindow;//select live object\n}return testWindow;};BrowserBot.prototype.setShouldHighlightElement=function(shouldHighlight){this.shouldHighlightLocatedElement=shouldHighlight;};/*****************************************************************/ /* BROWSER-SPECIFIC FUNCTIONS ONLY AFTER THIS LINE */BrowserBot.prototype._registerAllLocatorFunctions=function(){// TODO - don't do this in the constructor - only needed once ever\nthis.locationStrategies={};for(let functionName in this){let result=/^locateElementBy([A-Z].+)$/.exec(functionName);if(result!=null){let locatorFunction=this[functionName];if(typeof locatorFunction!='function'){continue;}// Use a specified prefix in preference to one generated from\n// the function name\nlet locatorPrefix=locatorFunction.prefix||result[1].toLowerCase();this.locationStrategies[locatorPrefix]=locatorFunction;}}/**\n   * Find a locator based on a prefix.\n   */this.findElementBy=function(locatorType,locator,inDocument,inWindow){let locatorFunction=this.locationStrategies[locatorType];if(!locatorFunction){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */](\"Unrecognised locator type: '\"+locatorType+\"'\");}return locatorFunction.call(this,locator,inDocument,inWindow);};/**\n   * The implicit locator, that is used when no prefix is supplied.\n   */this.locationStrategies['implicit']=function(locator,inDocument,inWindow){if(locator.startsWith('//')){return this.locateElementByXPath(locator,inDocument,inWindow);}if(locator.startsWith('document.')){return this.locateElementByDomTraversal(locator,inDocument,inWindow);}return this.locateElementByIdentifier(locator,inDocument,inWindow);};};BrowserBot.prototype.getDocument=function(){return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(this.getCurrentWindow().document);};BrowserBot.prototype.getTitle=function(){let t=this.getDocument().title;if(typeof t=='string'){t=t.trim();}return t;};BrowserBot.prototype.getCookieByName=function(cookieName,doc){if(!doc)doc=this.getDocument();let ck=doc.cookie;if(!ck)return null;let ckPairs=ck.split(/;/);for(let i=0;i<ckPairs.length;i++){let ckPair=ckPairs[i].trim();let ckNameValue=ckPair.split(/=/);let ckName=decodeURIComponent(ckNameValue[0]);if(ckName===cookieName){return decodeURIComponent(ckNameValue.slice(1).join('='));}}return null;};BrowserBot.prototype.getAllCookieNames=function(doc){if(!doc)doc=this.getDocument();let ck=doc.cookie;if(!ck)return[];let cookieNames=[];let ckPairs=ck.split(/;/);for(let i=0;i<ckPairs.length;i++){let ckPair=ckPairs[i].trim();let ckNameValue=ckPair.split(/=/);let ckName=decodeURIComponent(ckNameValue[0]);cookieNames.push(ckName);}return cookieNames;};BrowserBot.prototype.getAllRawCookieNames=function(doc){if(!doc)doc=this.getDocument();let ck=doc.cookie;if(!ck)return[];let cookieNames=[];let ckPairs=ck.split(/;/);for(let i=0;i<ckPairs.length;i++){let ckPair=ckPairs[i].trim();let ckNameValue=ckPair.split(/=/);let ckName=ckNameValue[0];cookieNames.push(ckName);}return cookieNames;};function encodeURIComponentWithASPHack(uri){let regularEncoding=encodeURIComponent(uri);let aggressiveEncoding=regularEncoding.replace('.','%2E');aggressiveEncoding=aggressiveEncoding.replace('_','%5F');return aggressiveEncoding;}BrowserBot.prototype.deleteCookie=function(cookieName,domain,path,doc){if(!doc)doc=this.getDocument();let expireDateInMilliseconds=new Date().getTime()+-1*1000;// we can't really be sure if we're dealing with encoded or unencoded cookie names\nlet _cookieName;let rawCookieNames=this.getAllRawCookieNames(doc);for(let rawCookieNumber in rawCookieNames){if(rawCookieNames[rawCookieNumber]==cookieName){_cookieName=cookieName;break;}else if(rawCookieNames[rawCookieNumber]==encodeURIComponent(cookieName)){_cookieName=encodeURIComponent(cookieName);break;}else if(rawCookieNames[rawCookieNumber]==encodeURIComponentWithASPHack(cookieName)){_cookieName=encodeURIComponentWithASPHack(cookieName);break;}}let cookie=_cookieName+'=deleted; ';if(path){cookie+='path='+path+'; ';}if(domain){cookie+='domain='+domain+'; ';}cookie+='expires='+new Date(expireDateInMilliseconds).toGMTString();//LOG.debug(\"Setting cookie to: \" + cookie);\ndoc.cookie=cookie;};/** Try to delete cookie, return false if it didn't work */BrowserBot.prototype._maybeDeleteCookie=function(cookieName,domain,path,doc){this.deleteCookie(cookieName,domain,path,doc);return!this.getCookieByName(cookieName,doc);};BrowserBot.prototype._recursivelyDeleteCookieDomains=function(cookieName,domain,path,doc){let deleted=this._maybeDeleteCookie(cookieName,domain,path,doc);if(deleted)return true;let dotIndex=domain.indexOf('.');if(dotIndex==0){return this._recursivelyDeleteCookieDomains(cookieName,domain.substring(1),path,doc);}else if(dotIndex!=-1){return this._recursivelyDeleteCookieDomains(cookieName,domain.substring(dotIndex),path,doc);}else{// No more dots; try just not passing in a domain at all\nreturn this._maybeDeleteCookie(cookieName,null,path,doc);}};BrowserBot.prototype._recursivelyDeleteCookie=function(cookieName,domain,path,doc){let slashIndex=path.lastIndexOf('/');let finalIndex=path.length-1;if(slashIndex==finalIndex){slashIndex--;}if(slashIndex!=-1){const deleted=this._recursivelyDeleteCookie(cookieName,domain,path.substring(0,slashIndex+1),doc);if(deleted)return true;}return this._recursivelyDeleteCookieDomains(cookieName,domain,path,doc);};BrowserBot.prototype.recursivelyDeleteCookie=function(cookieName,domain,path,win){if(!win)win=this.getCurrentWindow();let doc=win.document;if(!domain){domain=doc.domain;}if(!path){path=win.location.pathname;}let deleted=this._recursivelyDeleteCookie(cookieName,'.'+domain,path,doc);if(deleted)return;// Finally try a null path (Try it last because it's uncommon)\ndeleted=this._recursivelyDeleteCookieDomains(cookieName,'.'+domain,null,doc);if(deleted)return;throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */](\"Couldn't delete cookie \"+cookieName);};/*\n * Finds an element on the current page, using various lookup protocols\n */BrowserBot.prototype.findElementOrNull=function(locator,win){locator=Object(__WEBPACK_IMPORTED_MODULE_4__utils__[\"f\" /* parse_locator */])(locator);if(win==null){win=this.getCurrentWindow();}let element=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].locators.findElement({[locator.type]:locator.string},win.document);element=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(element);// Element was not found by any locator function.\nreturn element;};BrowserBot.prototype.findElement=function(locator,win){let element=this.findElementOrNull(locator,win);if(element==null)throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Element '+locator+' not found');return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(element);};/**\n * Finds a list of elements using the same mechanism as webdriver.\n *\n * @param {string} how The finding mechanism to use.\n * @param {string} using The selector to use.\n * @param {Document|Element} root The root of the search path.\n */BrowserBot.prototype.findElementsLikeWebDriver=function(how,using,root){let by={};by[how]=using;let all=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].locators.findElements(by,root);let toReturn='';for(let i=0;i<all.length-1;i++){toReturn+=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].inject.cache.addElement(__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(all[i]))+',';}if(all[all.length-1]){toReturn+=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].inject.cache.addElement(__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].firefox.unwrap(all[all.length-1]));}return toReturn;};/**\n * In non-IE browsers, getElementById() does not search by name.  Instead, we\n * we search separately by id and name.\n */BrowserBot.prototype.locateElementByIdentifier=function(identifier,inDocument,inWindow){// HBC - use \"this\" instead of \"BrowserBot.prototype\"; otherwise we lose\n// the non-prototype fields of the object!\nreturn this.locateElementById(identifier,inDocument,inWindow)||BrowserBot.prototype.locateElementByName(identifier,inDocument,inWindow)||null;};/**\n * Find the element with id - can't rely on getElementById, coz it returns by name as well in IE..\n */BrowserBot.prototype.locateElementById=function(identifier,inDocument){let element=inDocument.getElementById(identifier);if(element&&element.getAttribute('id')===identifier){return element;}else if(browserVersion.isIE||browserVersion.isOpera){// SEL-484\nlet elements=inDocument.getElementsByTagName('*');for(let i=0,n=elements.length;i<n;++i){element=elements[i];if(element.tagName.toLowerCase()=='form'){if(element.attributes['id'].nodeValue==identifier){return element;}}else if(element.getAttribute('id')==identifier){return element;}}return null;}else{return null;}};/**\n * Find an element by name, refined by (optional) element-filter\n * expressions.\n */BrowserBot.prototype.locateElementByName=function(locator,document){let elements=document.getElementsByTagName('*');//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/11/23\n/*\n        var filters = locator.split(' ');\n        filters[0] = 'name=' + filters[0];\n\n        while (filters.length) {\n            var filter = filters.shift();\n            elements = this.selectElements(filter, elements, 'value');\n        }\n        */let filter='name='+locator;elements=this.selectElements(filter,elements,'value');if(elements.length>0){return elements[0];}return null;};/**\n * Finds an element using by evaluating the specfied string.\n */BrowserBot.prototype.locateElementByDomTraversal=function(domTraversal){let element=null;//Evalinsandbox\n// eslint-disable-next-line no-undef\nlet mySandbox=new Components.utils.Sandbox(this.currentWindow.location.href);mySandbox.domTraversal=domTraversal;try{// eslint-disable-next-line no-undef\nelement=Components.utils.evalInSandbox(domTraversal,mySandbox);//element = eval(domTraversal);\n}catch(e){return null;}if(!element){return null;}return element;};BrowserBot.prototype.locateElementByDomTraversal.prefix='dom';BrowserBot.prototype.locateElementByStoredReference=function(locator){try{return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].locators.findElement('stored='+locator);}catch(e){return null;}};BrowserBot.prototype.locateElementByStoredReference.prefix='stored';BrowserBot.prototype.locateElementByWebDriver=function(locator){try{return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"b\" /* core */].locators.findElement('webdriver='+locator);}catch(e){return null;}};BrowserBot.prototype.locateElementByWebDriver.prefix='webdriver';/**\n * Finds an element identified by the xpath expression. Expressions _must_\n * begin with \"//\".\n */BrowserBot.prototype.locateElementByXPath=function(xpath,inDocument){return this.xpathEvaluator.selectSingleNode(inDocument,xpath,null,inDocument.createNSResolver?inDocument.createNSResolver(inDocument.documentElement):this._namespaceResolver);};/**\n * Find many elements using xpath.\n *\n * @param {string} xpath XPath expression to search for.\n * @param {=Document} inDocument The document to search in.\n * @param {=Window} inWindow The window the document is in.\n */BrowserBot.prototype.locateElementsByXPath=function(xpath,inDocument){return this.xpathEvaluator.selectNodes(inDocument,xpath,null,inDocument.createNSResolver?inDocument.createNSResolver(inDocument.documentElement):this._namespaceResolver);};BrowserBot.prototype._namespaceResolver=function(prefix){if(prefix=='html'||prefix=='xhtml'||prefix=='x'){return'http://www.w3.org/1999/xhtml';}else if(prefix=='mathml'){return'http://www.w3.org/1998/Math/MathML';}else if(prefix=='svg'){return'http://www.w3.org/2000/svg';}else{throw new Error('Unknown namespace: '+prefix+'.');}};/**\n * Returns the number of xpath results.\n */BrowserBot.prototype.evaluateXPathCount=function(selector,inDocument){let locator=Object(__WEBPACK_IMPORTED_MODULE_4__utils__[\"f\" /* parse_locator */])(selector);if(locator.type=='xpath'||locator.type=='implicit'){return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].locators.findElements({xpath:locator.string},inDocument).length;}else{//LOG.error(\"Locator does not use XPath strategy: \" + selector);\nreturn 0;}};/**\n * Returns the number of css results.\n */BrowserBot.prototype.evaluateCssCount=function(selector,inDocument){let locator=Object(__WEBPACK_IMPORTED_MODULE_4__utils__[\"f\" /* parse_locator */])(selector);if(locator.type=='css'||locator.type=='implicit'){return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].locators.findElements({css:locator.string},inDocument).length;}else{//LOG.error(\"Locator does not use CSS strategy: \" + selector);\nreturn 0;}};/**\n * Finds a link element with text matching the expression supplied. Expressions must\n * begin with \"link:\".\n */BrowserBot.prototype.locateElementByLinkText=function(linkText,inDocument){let links=inDocument.getElementsByTagName('a');for(let i=0;i<links.length;i++){let element=links[i];if(__WEBPACK_IMPORTED_MODULE_5__PatternMatcher__[\"a\" /* default */].matches(linkText,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(element))){return element;}}return null;};BrowserBot.prototype.locateElementByLinkText.prefix='link';/**\n * Returns an attribute based on an attribute locator. This is made up of an element locator\n * suffixed with @attribute-name.\n */BrowserBot.prototype.findAttribute=function(locator){// Split into locator + attributeName\nlet attributePos=locator.lastIndexOf('@');let elementLocator=locator.slice(0,attributePos);let attributeName=locator.slice(attributePos+1);// Find the element.\nlet element=this.findElement(elementLocator);let attributeValue=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].dom.getAttribute(element,attributeName);return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"c\" /* default */].isDefAndNotNull(attributeValue)?attributeValue.toString():null;};/*\n * Select the specified option and trigger the relevant events of the element.\n */BrowserBot.prototype.selectOption=function(element,optionToSelect){__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);let changed=false;for(let i=0;i<element.options.length;i++){let option=element.options[i];if(option.selected&&option!=optionToSelect){option.selected=false;changed=true;}else if(!option.selected&&option==optionToSelect){option.selected=true;changed=true;}}if(changed){__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);}};/*\n * Select the specified option and trigger the relevant events of the element.\n */BrowserBot.prototype.addSelection=function(element,option){this.checkMultiselect(element);__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);if(!option.selected){option.selected=true;__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);}};/*\n * Select the specified option and trigger the relevant events of the element.\n */BrowserBot.prototype.removeSelection=function(element,option){this.checkMultiselect(element);__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);if(option.selected){option.selected=false;__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);}};BrowserBot.prototype.checkMultiselect=function(element){if(!element.multiple){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Not a multi-select');}};BrowserBot.prototype.replaceText=function(element,stringValue){__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.SELECT);let maxLengthAttr=element.getAttribute('maxLength');let actualValue=stringValue;if(maxLengthAttr!=null){let maxLength=parseInt(maxLengthAttr);if(stringValue.length>maxLength){actualValue=stringValue.substr(0,maxLength);}}if(Object(__WEBPACK_IMPORTED_MODULE_4__utils__[\"c\" /* getTagName */])(element)=='body'){if(element.ownerDocument&&element.ownerDocument.designMode){let designMode=new String(element.ownerDocument.designMode).toLowerCase();if(designMode=='on'){// this must be a rich text control!\nelement.innerHTML=actualValue;}}}else{element.value=actualValue;}// DGF this used to be skipped in chrome URLs, but no longer.  Is xpcnativewrappers to blame?\ntry{__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);}catch(e){}// eslint-disable-line no-empty\n};BrowserBot.prototype.clickElement=function(element,clientX,clientY){this._fireEventOnElement('click',element,clientX,clientY);};BrowserBot.prototype.doubleClickElement=function(element,clientX,clientY){this._fireEventOnElement('dblclick',element,clientX,clientY);};// The contextmenu event is fired when the user right-clicks to open the context menu\nBrowserBot.prototype.contextMenuOnElement=function(element,clientX,clientY){this._fireEventOnElement('contextmenu',element,clientX,clientY);};//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/05/26\n//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/11/17\nBrowserBot.prototype._modifyElementTarget=function(e){let element=this.findClickableElement(e)||e;if(element.target){if(element.target=='_blank'||/^selenium_blank/.test(element.target)){let tagName=Object(__WEBPACK_IMPORTED_MODULE_4__utils__[\"c\" /* getTagName */])(element);if(tagName=='a'||tagName=='form'){const newTarget='win_ser_'+this.count;this.count+=1;this.browserbot.openWindow('',newTarget);element.target=newTarget;}}else{const newTarget=element.target;this.browserbot.openWindow('',newTarget);element.target=newTarget;}}};//UnnamedWinIFrameExt, Jie-Lin You, SELAB, CSIE, NCKU, 2016/11/17\nBrowserBot.prototype.findClickableElement=function(e){if(!e.tagName)return null;let tagName=e.tagName.toLowerCase();let type=e.type;if(e.hasAttribute('onclick')||e.hasAttribute('href')||e.hasAttribute('url')||tagName=='button'||tagName=='input'&&(type=='submit'||type=='button'||type=='image'||type=='radio'||type=='checkbox'||type=='reset')){return e;}else{if(e.parentNode!=null){return this.findClickableElement(e.parentNode);}else{return null;}}};BrowserBot.prototype._handleClickingImagesInsideLinks=function(targetWindow,element){let itrElement=element;while(itrElement!=null){if(itrElement.href){targetWindow.location.href=itrElement.href;break;}itrElement=itrElement.parentNode;}};BrowserBot.prototype._getTargetWindow=function(element){let targetWindow=element.ownerDocument.defaultView;if(element.target){targetWindow=this._getFrameFromGlobal(element.target);}return targetWindow;};BrowserBot.prototype._getFrameFromGlobal=function(target){if(target=='_self'){return this.getCurrentWindow();}if(target=='_top'){return this.topFrame;}else if(target=='_parent'){return this.getCurrentWindow().parent;}else if(target=='_blank'){// TODO should this set cleverer window defaults?\nreturn this.getCurrentWindow().open('','_blank');}let frameElement=this.findElementBy('implicit',target,this.topFrame.document,this.topFrame);if(frameElement){return frameElement.contentWindow;}let win=this.getWindowByName(target);if(win)return win;return this.getCurrentWindow().open('',target);};BrowserBot.prototype.bodyText=function(){if(!this.getDocument().body){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */](\"Couldn't access document.body.  Is this HTML page fully loaded?\");}return __WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].dom.getVisibleText(this.getDocument().body);};BrowserBot.prototype.getAllButtons=function(){let elements=this.getDocument().getElementsByTagName('input');let result=[];for(let i=0;i<elements.length;i++){if(elements[i].type=='button'||elements[i].type=='submit'||elements[i].type=='reset'){result.push(elements[i].id);}}return result;};BrowserBot.prototype.getAllFields=function(){let elements=this.getDocument().getElementsByTagName('input');let result=[];for(let i=0;i<elements.length;i++){if(elements[i].type=='text'){result.push(elements[i].id);}}return result;};BrowserBot.prototype.getAllLinks=function(){let elements=this.getDocument().getElementsByTagName('a');let result=[];for(let i=0;i<elements.length;i++){result.push(elements[i].id);}return result;};function isDefined(value){return typeof value!=undefined;}BrowserBot.prototype.goBack=function(){this.getCurrentWindow().history.back();};BrowserBot.prototype.goForward=function(){this.getCurrentWindow().history.forward();};BrowserBot.prototype.close=function(){if(browserVersion.isIE){// fix \"do you want to close this window\" warning in IE\n// You can only close windows that you have opened.\n// So, let's \"open\" it.\ntry{this.topFrame.name=new Date().getTime();window.open('',this.topFrame.name,'');this.topFrame.close();return;}catch(e){}// eslint-disable-line no-empty\n}if(browserVersion.isChrome||browserVersion.isSafari||browserVersion.isOpera){this.topFrame.close();}else{this.getCurrentWindow().eval('window.top.close();');}};BrowserBot.prototype.refresh=function(){this.getCurrentWindow().location.reload(true);};/**\n * Refine a list of elements using a filter.\n */BrowserBot.prototype.selectElementsBy=function(filterType,filter,elements){let filterFunction=BrowserBot.filterFunctions[filterType];if(!filterFunction){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */](\"Unrecognised element-filter type: '\"+filterType+\"'\");}return filterFunction(filter,elements);};BrowserBot.filterFunctions={};BrowserBot.filterFunctions.name=function(name,elements){let selectedElements=[];for(let i=0;i<elements.length;i++){if(elements[i].name===name){selectedElements.push(elements[i]);}}return selectedElements;};BrowserBot.filterFunctions.value=function(value,elements){let selectedElements=[];for(let i=0;i<elements.length;i++){if(elements[i].value===value){selectedElements.push(elements[i]);}}return selectedElements;};BrowserBot.filterFunctions.index=function(index,elements){index=Number(index);if(isNaN(index)||index<0){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Illegal Index: '+index);}if(elements.length<=index){throw new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Index out of range: '+index);}return[elements[index]];};BrowserBot.prototype.selectElements=function(filterExpr,elements,defaultFilterType){let filterType=defaultFilterType||'value';// If there is a filter prefix, use the specified strategy\nlet result=filterExpr.match(/^([A-Za-z]+)=(.+)/);if(result){filterType=result[1].toLowerCase();filterExpr=result[2];}return this.selectElementsBy(filterType,filterExpr,elements);};/**\n * Find an element by css selector\n */BrowserBot.prototype.locateElementByCss=function(locator,document){let elements=__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].locators.findElements({css:locator},document);if(elements.length!=0)return elements[0];return null;};/* prompt */BrowserBot.prototype.cancelNextPrompt=function(){return this.setNextPromptResult(null);};BrowserBot.prototype.setNextPromptResult=function(result){this.promptResponse=false;let self=this;window.postMessage({direction:'from-content-script',command:'setNextPromptResult',target:result},'*');let response=new Promise(function(resolve,reject){let count=0;let interval=setInterval(function(){if(!self.promptResponse){count++;if(count>60){reject('No response');clearInterval(interval);}}else{resolve();self.promptResponse=false;clearInterval(interval);}},500);});return response;};BrowserBot.prototype.getPromptMessage=function(){this.promptResponse=false;this.promptMessage=null;let self=this;window.postMessage({direction:'from-content-script',command:'getPromptMessage'},'*');let response=new Promise(function(resolve,reject){let count=0;let interval=setInterval(function(){if(!self.promptResponse){count++;if(count>60){reject('No response');clearInterval(interval);}}else{resolve(self.promptMessage);self.promptResponse=false;self.promptMessage=null;clearInterval(interval);}},500);});return response;};// confirm\nBrowserBot.prototype.setNextConfirmationResult=function(result){this.confirmationResponse=false;let self=this;window.postMessage({direction:'from-content-script',command:'setNextConfirmationResult',target:result},'*');let response=new Promise(function(resolve,reject){let count=0;let interval=setInterval(function(){if(!self.confirmationResponse){count++;if(count>60){reject('No response');clearInterval(interval);}}else{resolve();self.confirmationResponse=false;clearInterval(interval);}},500);});return response;};BrowserBot.prototype.getConfirmationMessage=function(){this.confirmationResponse=false;this.confirmationMessage=null;let self=this;window.postMessage({direction:'from-content-script',command:'getConfirmationMessage'},'*');let response=new Promise(function(resolve,reject){let count=0;let interval=setInterval(function(){if(!self.confirmationResponse){count++;if(count>60){reject('No response');clearInterval(interval);}}else{resolve(self.confirmationMessage);self.confirmationResponse=false;self.confirmationMessage=null;clearInterval(interval);}},500);});return response;};BrowserBot.prototype.getAlertMessage=function(){let self=this;let response=new Promise(function(resolve,reject){let count=0;let interval=setInterval(function(){if(!self.alertResponse){count++;if(count>60){reject('No response!!!!');clearInterval(interval);}}else{resolve(self.alertMessage);self.alertResponse=false;self.alertMessage=null;clearInterval(interval);}},500);});return response;};/*****************************************************************/ /* BROWSER-SPECIFIC FUNCTIONS ONLY AFTER THIS LINE */class MozillaBrowserBot extends BrowserBot{constructor(frame){super(frame);}}\n/* unused harmony export MozillaBrowserBot */\nclass KonquerorBrowserBot extends BrowserBot{constructor(frame){super(frame);}}\n/* unused harmony export KonquerorBrowserBot */\nKonquerorBrowserBot.prototype.setIFrameLocation=function(iframe,location){// Window doesn't fire onload event when setting src to the current value,\n// so we set it to blank first.\niframe.src='about:blank';iframe.src=location;};KonquerorBrowserBot.prototype._isSameDocument=function(originalDocument,currentDocument){// under Konqueror, there may be this case:\n// originalDocument and currentDocument are different objects\n// while their location are same.\nif(originalDocument){return originalDocument.location==currentDocument.location;}else{return originalDocument===currentDocument;}};class SafariBrowserBot extends BrowserBot{constructor(frame){super(frame);}}\n/* unused harmony export SafariBrowserBot */\nSafariBrowserBot.prototype.setIFrameLocation=KonquerorBrowserBot.prototype.setIFrameLocation;class OperaBrowserBot extends BrowserBot{constructor(frame){super(frame);}}\n/* unused harmony export OperaBrowserBot */\nOperaBrowserBot.prototype.setIFrameLocation=function(iframe,location){if(iframe.src==location){iframe.src=location+'?reload';}else{iframe.src=location;}};class IEBrowserBot extends BrowserBot{constructor(frame){super(frame);}}\n/* unused harmony export IEBrowserBot */\nIEBrowserBot.prototype._handleClosedSubFrame=function(testWindow,doNotModify){if(this.proxyInjectionMode){return testWindow;}try{testWindow.location.href;this.permDenied=0;}catch(e){this.permDenied++;}if(this._windowClosed(testWindow)||this.permDenied>4){if(this.isSubFrameSelected){//LOG.warn(\"Current subframe appears to have closed; selecting top frame\");\nthis.selectFrame('relative=top');return this.getCurrentWindow(doNotModify);}else{let closedError=new __WEBPACK_IMPORTED_MODULE_1__SeleniumError__[\"a\" /* default */]('Current window or frame is closed!');closedError.windowClosed=true;throw closedError;}}return testWindow;};IEBrowserBot.prototype.modifyWindowToRecordPopUpDialogs=function(windowToModify,browserBot){BrowserBot.prototype.modifyWindowToRecordPopUpDialogs(windowToModify,browserBot);// we will call the previous version of this method from within our own interception\nlet oldShowModalDialog=windowToModify.showModalDialog;windowToModify.showModalDialog=function(url,args,features){// Get relative directory to where TestRunner.html lives\n// A risky assumption is that the user's TestRunner is named TestRunner.html\nlet doc_location=document.location.toString();let end_of_base_ref=doc_location.indexOf('TestRunner.html');let base_ref=doc_location.substring(0,end_of_base_ref);let runInterval='';// Only set run interval if options is defined\nif(typeof window.runOptions!='undefined'){runInterval='&runInterval='+runOptions.runInterval;// eslint-disable-line no-undef\n}let testRunnerURL='TestRunner.html?auto=true&singletest='+escape(browserBot.modalDialogTest)+'&autoURL='+escape(url)+runInterval;let fullURL=base_ref+testRunnerURL;browserBot.modalDialogTest=null;// If using proxy injection mode\nif(this.proxyInjectionMode){fullURL=url;}let returnValue=oldShowModalDialog(fullURL,args,features);return returnValue;};};IEBrowserBot.prototype.modifySeparateTestWindowToDetectPageLoads=function(windowObject){this.pageUnloading=false;let self=this;let pageUnloadDetector=function(){self.pageUnloading=true;};if(windowObject.addEventListener){windowObject.addEventListener('beforeunload',pageUnloadDetector,true);}else{windowObject.attachEvent('onbeforeunload',pageUnloadDetector);}BrowserBot.prototype.modifySeparateTestWindowToDetectPageLoads.call(this,windowObject);};IEBrowserBot.prototype.pollForLoad=function(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker){//LOG.debug(\"IEBrowserBot.pollForLoad: \" + marker);\nif(!this.permDeniedCount[marker])this.permDeniedCount[marker]=0;BrowserBot.prototype.pollForLoad.call(this,loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);if(this.pageLoadError){if(this.pageUnloading){//LOG.debug(\"pollForLoad UNLOADING (\" + marker + \"): caught exception while firing events on unloading page: \" + this.pageLoadError.message);\nthis.reschedulePoller(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);this.pageLoadError=null;return;}else if((this.pageLoadError.message=='Permission denied'||/^Access is denied/.test(this.pageLoadError.message))&&this.permDeniedCount[marker]++<8){if(this.permDeniedCount[marker]>4){let canAccessThisWindow;let canAccessCurrentlySelectedWindow;try{windowObject.location.href;canAccessThisWindow=true;}catch(e){}// eslint-disable-line no-empty\ntry{this.getCurrentWindow(true).location.href;canAccessCurrentlySelectedWindow=true;}catch(e){}// eslint-disable-line no-empty\nif(canAccessCurrentlySelectedWindow&!canAccessThisWindow){//LOG.debug(\"pollForLoad (\" + marker + \") ABORTING: \" + this.pageLoadError.message + \" (\" + this.permDeniedCount[marker] + \"), but the currently selected window is fine\");\n// returning without rescheduling\nthis.pageLoadError=null;return;}}//LOG.debug(\"pollForLoad (\" + marker + \"): \" + this.pageLoadError.message + \" (\" + this.permDeniedCount[marker] + \"), waiting to see if it goes away\");\nthis.reschedulePoller(loadFunction,windowObject,originalDocument,originalLocation,originalHref,marker);this.pageLoadError=null;return;}//handy for debugging!\n//throw this.pageLoadError;\n}};IEBrowserBot.prototype._windowClosed=function(win){try{let c=win.closed;// frame windows claim to be non-closed when their parents are closed\n// but you can't access their document objects in that case\nif(!c){try{win.document;}catch(de){if(de.message=='Permission denied'){// the window is probably unloading, which means it's probably not closed yet\nreturn false;}else if(/^Access is denied/.test(de.message)){// rare variation on \"Permission denied\"?\n//LOG.debug(\"IEBrowserBot.windowClosed: got \" + de.message + \" (this.pageUnloading=\" + this.pageUnloading + \"); assuming window is unloading, probably not closed yet\");\nreturn false;}else{// this is probably one of those frame window situations\n//LOG.debug(\"IEBrowserBot.windowClosed: couldn't read win.document, assume closed: \" + de.message + \" (this.pageUnloading=\" + this.pageUnloading + \")\");\nreturn true;}}}if(c==null){//LOG.debug(\"IEBrowserBot.windowClosed: win.closed was null, assuming closed\");\nreturn true;}return c;}catch(e){//LOG.debug(\"IEBrowserBot._windowClosed: Got an exception trying to read win.closed; we'll have to take a guess!\");\nif(browserVersion.isHTA){if(e.message=='Permission denied'){// the window is probably unloading, which means it's not closed yet\nreturn false;}else{// there's a good chance that we've lost contact with the window object if it is closed\nreturn true;}}else{// the window is probably unloading, which means it's not closed yet\nreturn false;}}};/**\n * In IE, getElementById() also searches by name - this is an optimisation for IE.\n */IEBrowserBot.prototype.locateElementByIdentifer=function(identifier,inDocument){return inDocument.getElementById(identifier);};SafariBrowserBot.prototype.modifyWindowToRecordPopUpDialogs=function(windowToModify,browserBot){BrowserBot.prototype.modifyWindowToRecordPopUpDialogs(windowToModify,browserBot);let originalOpen=windowToModify.open;/*\n   * Safari seems to be broken, so that when we manually trigger the onclick method\n   * of a button/href, any window.open calls aren't resolved relative to the app location.\n   * So here we replace the open() method with one that does resolve the url correctly.\n   */windowToModify.open=function(url,windowName,windowFeatures,replaceFlag){if(url.startsWith('http://')||url.startsWith('https://')||url.startsWith('/')){return originalOpen(url,windowName,windowFeatures,replaceFlag);}// Reduce the current path to the directory\nlet currentPath=windowToModify.location.pathname||'/';currentPath=currentPath.replace(/\\/[^\\/]*$/,'/');// eslint-disable-line no-useless-escape\n// Remove any leading \"./\" from the new url.\nurl=url.replace(/^\\.\\//,'');const newUrl=currentPath+url;let openedWindow=originalOpen(newUrl,windowName,windowFeatures,replaceFlag);//LOG.debug(\"window.open call intercepted; window ID (which you can use with selectWindow()) is \\\"\" +  windowName + \"\\\"\");\nif(windowName!=null){openedWindow['seleniumWindowName']=windowName;}return openedWindow;};};MozillaBrowserBot.prototype._fireEventOnElement=function(eventType,element,clientX,clientY){let win=this.getCurrentWindow();__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);// Add an event listener that detects if the default action has been prevented.\n// (This is caused by a javascript onclick handler returning false)\n// we capture the whole event, rather than the getPreventDefault() state at the time,\n// because we need to let the entire event bubbling and capturing to go through\n// before making a decision on whether we should force the href\nelement.addEventListener(eventType,function(){},false);//this._modifyElementTarget(element);\n// Trigger the event.\nthis.browserbot.triggerMouseEvent(element,eventType,true,clientX,clientY);if(this._windowClosed(win)){return;}// Perform the link action if preventDefault was set.\n// In chrome URL, the link action is already executed by triggerMouseEvent.\n//if (!browserVersion.isChrome && savedEvent != null && savedEvent.getPreventDefault && !savedEvent.getPreventDefault()) {\n/*\n    if (!browserVersion.isChrome && savedEvent != null && savedEvent.defaultPrevented && !savedEvent.defaultPrevented()) {\n        var targetWindow = this.browserbot._getTargetWindow(element);\n        if (element.href) {\n            targetWindow.location.href = element.href;\n        } else {\n            this.browserbot._handleClickingImagesInsideLinks(targetWindow, element);\n        }\n    }\n    */};OperaBrowserBot.prototype._fireEventOnElement=function(eventType,element,clientX,clientY){let win=this.getCurrentWindow();__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);this._modifyElementTarget(element);// Trigger the click event.\nthis.browserbot.triggerMouseEvent(element,eventType,true,clientX,clientY);if(this._windowClosed(win)){return;}};KonquerorBrowserBot.prototype._fireEventOnElement=function(eventType,element,clientX,clientY){let win=this.getCurrentWindow();__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);this._modifyElementTarget(element);if(element[eventType]){element[eventType]();}else{this.browserbot.triggerMouseEvent(element,eventType,true,clientX,clientY);}if(this._windowClosed(win)){return;}};SafariBrowserBot.prototype._fireEventOnElement=function(eventType,element,clientX,clientY){__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);this._modifyElementTarget(element);// For form element it is simple.\nif(element[eventType]){element[eventType]();}// For links and other elements, event emulation is required.\nelse{// todo: deal with anchors?\nthis.browserbot.triggerMouseEvent(element,eventType,true,clientX,clientY);}};SafariBrowserBot.prototype.refresh=function(){let win=this.getCurrentWindow();if(win.location.hash){// DGF Safari refuses to refresh when there's a hash symbol in the URL\nwin.location.hash='';let actuallyReload=function(){win.location.reload(true);};window.setTimeout(actuallyReload,1);}else{win.location.reload(true);}};IEBrowserBot.prototype._fireEventOnElement=function(eventType,element,clientX,clientY){let win=this.getCurrentWindow();__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.FOCUS);let wasChecked=element.checked;// Set a flag that records if the page will unload - this isn't always accurate, because\n// <a href=\"javascript:alert('foo'):\"> triggers the onbeforeunload event, even thought the page won't unload\nlet pageUnloading=false;let pageUnloadDetector=function(){pageUnloading=true;};if(win.addEventListener){win.addEventListener('beforeunload',pageUnloadDetector,true);}else{win.attachEvent('onbeforeunload',pageUnloadDetector);}this._modifyElementTarget(element);if(element[eventType]){element[eventType]();}else{this.browserbot.triggerMouseEvent(element,eventType,true,clientX,clientY);}// If the page is going to unload - still attempt to fire any subsequent events.\n// However, we can't guarantee that the page won't unload half way through, so we need to handle exceptions.\ntry{if(win.removeEventListener){win.removeEventListener('onbeforeunload',pageUnloadDetector,true);}else{win.detachEvent('onbeforeunload',pageUnloadDetector);}if(this._windowClosed(win)){return;}// Onchange event is not triggered automatically in IE.\nif(isDefined(element.checked)&&wasChecked!=element.checked){__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.fire(element,__WEBPACK_IMPORTED_MODULE_3__closure_polyfill__[\"a\" /* bot */].events.EventType.CHANGE);}}catch(e){// If the page is unloading, we may get a \"Permission denied\" or \"Unspecified error\".\n// Just ignore it, because the document may have unloaded.\nif(pageUnloading){//LOG.logHook = function() {\n//};\n//LOG.warn(\"Caught exception when firing events on unloading page: \" + e.message);\nreturn;}throw e;}};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///228\n");

/***/ }),

/***/ 229:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = PatternMatcher;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__SeleniumError__ = __webpack_require__(110);\n// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nfunction PatternMatcher(pattern){this.selectStrategy(pattern);}PatternMatcher.prototype={selectStrategy:function(pattern){this.pattern=pattern;let strategyName='glob';// by default\nif(/^([a-z-]+):(.*)/.test(pattern)){const possibleNewStrategyName=RegExp.$1;const possibleNewPattern=RegExp.$2;if(PatternMatcher.strategies[possibleNewStrategyName]){strategyName=possibleNewStrategyName;pattern=possibleNewPattern;}}const matchStrategy=PatternMatcher.strategies[strategyName];if(!matchStrategy){throw new __WEBPACK_IMPORTED_MODULE_0__SeleniumError__[\"a\" /* default */]('cannot find PatternMatcher.strategies.'+strategyName);}this.strategy=matchStrategy;this.matcher=new matchStrategy(pattern);},matches:function(actual){return this.matcher.matches(actual+'');// Note: appending an empty string avoids a Konqueror bug\n}/**\n * A \"static\" convenience method for easy matching\n */};PatternMatcher.matches=function(pattern,actual){return new PatternMatcher(pattern).matches(actual);};PatternMatcher.strategies={/**\n   * Exact matching, e.g. \"exact:***\"\n   */exact:function(expected){this.expected=expected;this.matches=function(actual){return actual==this.expected;};},/**\n   * Match by regular expression, e.g. \"regexp:^[0-9]+$\"\n   */regexp:function(regexpString){this.regexp=new RegExp(regexpString);this.matches=function(actual){return this.regexp.test(actual);};},regex:function(regexpString){this.regexp=new RegExp(regexpString);this.matches=function(actual){return this.regexp.test(actual);};},regexpi:function(regexpString){this.regexp=new RegExp(regexpString,'i');this.matches=function(actual){return this.regexp.test(actual);};},regexi:function(regexpString){this.regexp=new RegExp(regexpString,'i');this.matches=function(actual){return this.regexp.test(actual);};},/**\n   * \"globContains\" (aka \"wildmat\") patterns, e.g. \"glob:one,two,*\",\n   * but don't require a perfect match; instead succeed if actual\n   * contains something that matches globString.\n   * Making this distinction is motivated by a bug in IE6 which\n   * leads to the browser hanging if we implement *TextPresent tests\n   * by just matching against a regular expression beginning and\n   * ending with \".*\".  The globcontains strategy allows us to satisfy\n   * the functional needs of the *TextPresent ops more efficiently\n   * and so avoid running into this IE6 freeze.\n   */globContains:function(globString){this.regexp=new RegExp(PatternMatcher.regexpFromGlobContains(globString));this.matches=function(actual){return this.regexp.test(actual);};},/**\n   * \"glob\" (aka \"wildmat\") patterns, e.g. \"glob:one,two,*\"\n   */glob:function(globString){this.regexp=new RegExp(PatternMatcher.regexpFromGlob(globString));this.matches=function(actual){return this.regexp.test(actual);};}};PatternMatcher.convertGlobMetaCharsToRegexpMetaChars=function(glob){let re=glob;re=re.replace(/([.^$+(){}\\[\\]\\\\|])/g,'\\\\$1');// eslint-disable-line no-useless-escape\nre=re.replace(/\\?/g,'(.|[\\r\\n])');re=re.replace(/\\*/g,'(.|[\\r\\n])*');return re;};PatternMatcher.regexpFromGlobContains=function(globContains){return PatternMatcher.convertGlobMetaCharsToRegexpMetaChars(globContains);};PatternMatcher.regexpFromGlob=function(glob){return'^'+PatternMatcher.convertGlobMetaCharsToRegexpMetaChars(glob)+'$';};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29udGVudC9QYXR0ZXJuTWF0Y2hlci5qcz8yNzZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgU2VsZW5pdW1FcnJvciBmcm9tJy4vU2VsZW5pdW1FcnJvcic7ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGF0dGVybk1hdGNoZXIocGF0dGVybil7dGhpcy5zZWxlY3RTdHJhdGVneShwYXR0ZXJuKTt9UGF0dGVybk1hdGNoZXIucHJvdG90eXBlPXtzZWxlY3RTdHJhdGVneTpmdW5jdGlvbihwYXR0ZXJuKXt0aGlzLnBhdHRlcm49cGF0dGVybjtsZXQgc3RyYXRlZ3lOYW1lPSdnbG9iJzsvLyBieSBkZWZhdWx0XG5pZigvXihbYS16LV0rKTooLiopLy50ZXN0KHBhdHRlcm4pKXtjb25zdCBwb3NzaWJsZU5ld1N0cmF0ZWd5TmFtZT1SZWdFeHAuJDE7Y29uc3QgcG9zc2libGVOZXdQYXR0ZXJuPVJlZ0V4cC4kMjtpZihQYXR0ZXJuTWF0Y2hlci5zdHJhdGVnaWVzW3Bvc3NpYmxlTmV3U3RyYXRlZ3lOYW1lXSl7c3RyYXRlZ3lOYW1lPXBvc3NpYmxlTmV3U3RyYXRlZ3lOYW1lO3BhdHRlcm49cG9zc2libGVOZXdQYXR0ZXJuO319Y29uc3QgbWF0Y2hTdHJhdGVneT1QYXR0ZXJuTWF0Y2hlci5zdHJhdGVnaWVzW3N0cmF0ZWd5TmFtZV07aWYoIW1hdGNoU3RyYXRlZ3kpe3Rocm93IG5ldyBTZWxlbml1bUVycm9yKCdjYW5ub3QgZmluZCBQYXR0ZXJuTWF0Y2hlci5zdHJhdGVnaWVzLicrc3RyYXRlZ3lOYW1lKTt9dGhpcy5zdHJhdGVneT1tYXRjaFN0cmF0ZWd5O3RoaXMubWF0Y2hlcj1uZXcgbWF0Y2hTdHJhdGVneShwYXR0ZXJuKTt9LG1hdGNoZXM6ZnVuY3Rpb24oYWN0dWFsKXtyZXR1cm4gdGhpcy5tYXRjaGVyLm1hdGNoZXMoYWN0dWFsKycnKTsvLyBOb3RlOiBhcHBlbmRpbmcgYW4gZW1wdHkgc3RyaW5nIGF2b2lkcyBhIEtvbnF1ZXJvciBidWdcbn0vKipcbiAqIEEgXCJzdGF0aWNcIiBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGVhc3kgbWF0Y2hpbmdcbiAqL307UGF0dGVybk1hdGNoZXIubWF0Y2hlcz1mdW5jdGlvbihwYXR0ZXJuLGFjdHVhbCl7cmV0dXJuIG5ldyBQYXR0ZXJuTWF0Y2hlcihwYXR0ZXJuKS5tYXRjaGVzKGFjdHVhbCk7fTtQYXR0ZXJuTWF0Y2hlci5zdHJhdGVnaWVzPXsvKipcbiAgICogRXhhY3QgbWF0Y2hpbmcsIGUuZy4gXCJleGFjdDoqKipcIlxuICAgKi9leGFjdDpmdW5jdGlvbihleHBlY3RlZCl7dGhpcy5leHBlY3RlZD1leHBlY3RlZDt0aGlzLm1hdGNoZXM9ZnVuY3Rpb24oYWN0dWFsKXtyZXR1cm4gYWN0dWFsPT10aGlzLmV4cGVjdGVkO307fSwvKipcbiAgICogTWF0Y2ggYnkgcmVndWxhciBleHByZXNzaW9uLCBlLmcuIFwicmVnZXhwOl5bMC05XSskXCJcbiAgICovcmVnZXhwOmZ1bmN0aW9uKHJlZ2V4cFN0cmluZyl7dGhpcy5yZWdleHA9bmV3IFJlZ0V4cChyZWdleHBTdHJpbmcpO3RoaXMubWF0Y2hlcz1mdW5jdGlvbihhY3R1YWwpe3JldHVybiB0aGlzLnJlZ2V4cC50ZXN0KGFjdHVhbCk7fTt9LHJlZ2V4OmZ1bmN0aW9uKHJlZ2V4cFN0cmluZyl7dGhpcy5yZWdleHA9bmV3IFJlZ0V4cChyZWdleHBTdHJpbmcpO3RoaXMubWF0Y2hlcz1mdW5jdGlvbihhY3R1YWwpe3JldHVybiB0aGlzLnJlZ2V4cC50ZXN0KGFjdHVhbCk7fTt9LHJlZ2V4cGk6ZnVuY3Rpb24ocmVnZXhwU3RyaW5nKXt0aGlzLnJlZ2V4cD1uZXcgUmVnRXhwKHJlZ2V4cFN0cmluZywnaScpO3RoaXMubWF0Y2hlcz1mdW5jdGlvbihhY3R1YWwpe3JldHVybiB0aGlzLnJlZ2V4cC50ZXN0KGFjdHVhbCk7fTt9LHJlZ2V4aTpmdW5jdGlvbihyZWdleHBTdHJpbmcpe3RoaXMucmVnZXhwPW5ldyBSZWdFeHAocmVnZXhwU3RyaW5nLCdpJyk7dGhpcy5tYXRjaGVzPWZ1bmN0aW9uKGFjdHVhbCl7cmV0dXJuIHRoaXMucmVnZXhwLnRlc3QoYWN0dWFsKTt9O30sLyoqXG4gICAqIFwiZ2xvYkNvbnRhaW5zXCIgKGFrYSBcIndpbGRtYXRcIikgcGF0dGVybnMsIGUuZy4gXCJnbG9iOm9uZSx0d28sKlwiLFxuICAgKiBidXQgZG9uJ3QgcmVxdWlyZSBhIHBlcmZlY3QgbWF0Y2g7IGluc3RlYWQgc3VjY2VlZCBpZiBhY3R1YWxcbiAgICogY29udGFpbnMgc29tZXRoaW5nIHRoYXQgbWF0Y2hlcyBnbG9iU3RyaW5nLlxuICAgKiBNYWtpbmcgdGhpcyBkaXN0aW5jdGlvbiBpcyBtb3RpdmF0ZWQgYnkgYSBidWcgaW4gSUU2IHdoaWNoXG4gICAqIGxlYWRzIHRvIHRoZSBicm93c2VyIGhhbmdpbmcgaWYgd2UgaW1wbGVtZW50ICpUZXh0UHJlc2VudCB0ZXN0c1xuICAgKiBieSBqdXN0IG1hdGNoaW5nIGFnYWluc3QgYSByZWd1bGFyIGV4cHJlc3Npb24gYmVnaW5uaW5nIGFuZFxuICAgKiBlbmRpbmcgd2l0aCBcIi4qXCIuICBUaGUgZ2xvYmNvbnRhaW5zIHN0cmF0ZWd5IGFsbG93cyB1cyB0byBzYXRpc2Z5XG4gICAqIHRoZSBmdW5jdGlvbmFsIG5lZWRzIG9mIHRoZSAqVGV4dFByZXNlbnQgb3BzIG1vcmUgZWZmaWNpZW50bHlcbiAgICogYW5kIHNvIGF2b2lkIHJ1bm5pbmcgaW50byB0aGlzIElFNiBmcmVlemUuXG4gICAqL2dsb2JDb250YWluczpmdW5jdGlvbihnbG9iU3RyaW5nKXt0aGlzLnJlZ2V4cD1uZXcgUmVnRXhwKFBhdHRlcm5NYXRjaGVyLnJlZ2V4cEZyb21HbG9iQ29udGFpbnMoZ2xvYlN0cmluZykpO3RoaXMubWF0Y2hlcz1mdW5jdGlvbihhY3R1YWwpe3JldHVybiB0aGlzLnJlZ2V4cC50ZXN0KGFjdHVhbCk7fTt9LC8qKlxuICAgKiBcImdsb2JcIiAoYWthIFwid2lsZG1hdFwiKSBwYXR0ZXJucywgZS5nLiBcImdsb2I6b25lLHR3bywqXCJcbiAgICovZ2xvYjpmdW5jdGlvbihnbG9iU3RyaW5nKXt0aGlzLnJlZ2V4cD1uZXcgUmVnRXhwKFBhdHRlcm5NYXRjaGVyLnJlZ2V4cEZyb21HbG9iKGdsb2JTdHJpbmcpKTt0aGlzLm1hdGNoZXM9ZnVuY3Rpb24oYWN0dWFsKXtyZXR1cm4gdGhpcy5yZWdleHAudGVzdChhY3R1YWwpO307fX07UGF0dGVybk1hdGNoZXIuY29udmVydEdsb2JNZXRhQ2hhcnNUb1JlZ2V4cE1ldGFDaGFycz1mdW5jdGlvbihnbG9iKXtsZXQgcmU9Z2xvYjtyZT1yZS5yZXBsYWNlKC8oWy5eJCsoKXt9XFxbXFxdXFxcXHxdKS9nLCdcXFxcJDEnKTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5yZT1yZS5yZXBsYWNlKC9cXD8vZywnKC58W1xcclxcbl0pJyk7cmU9cmUucmVwbGFjZSgvXFwqL2csJygufFtcXHJcXG5dKSonKTtyZXR1cm4gcmU7fTtQYXR0ZXJuTWF0Y2hlci5yZWdleHBGcm9tR2xvYkNvbnRhaW5zPWZ1bmN0aW9uKGdsb2JDb250YWlucyl7cmV0dXJuIFBhdHRlcm5NYXRjaGVyLmNvbnZlcnRHbG9iTWV0YUNoYXJzVG9SZWdleHBNZXRhQ2hhcnMoZ2xvYkNvbnRhaW5zKTt9O1BhdHRlcm5NYXRjaGVyLnJlZ2V4cEZyb21HbG9iPWZ1bmN0aW9uKGdsb2Ipe3JldHVybideJytQYXR0ZXJuTWF0Y2hlci5jb252ZXJ0R2xvYk1ldGFDaGFyc1RvUmVnZXhwTWV0YUNoYXJzKGdsb2IpKyckJzt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29udGVudC9QYXR0ZXJuTWF0Y2hlci5qc1xuLy8gbW9kdWxlIGlkID0gMjI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///229\n");

/***/ }),

/***/ 333:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(140);


/***/ }),

/***/ 391:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export exactMatchPattern */\n// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n// Modified in tools.js from selenium-IDE\nfunction exactMatchPattern(string){if(string!=null&&(string.match(/^\\w*:/)||string.indexOf('?')>=0||string.indexOf('*')>=0)){return'exact:'+string;}else{return string;}}class TargetSelector{constructor(callback,cleanupCallback){this.callback=callback;this.cleanupCallback=cleanupCallback;// This is for XPCOM/XUL addon and can't be used\n//var wm = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].getService(Components.interfaces.nsIWindowMediator);\n//this.win = wm.getMostRecentWindow('navigator:browser').getBrowser().contentWindow;\n// Instead, we simply assign global content window to this.win\nthis.win=window;const doc=this.win.document;const div=doc.createElement('div');div.setAttribute('style','display: none;');doc.body.insertBefore(div,doc.body.firstChild);this.div=div;this.e=null;this.r=null;this.banner=doc.createElement('div');this.banner.setAttribute('style','position: fixed;top: 0;left: 0;bottom: 0;right: 0;background: trasparent;z-index: 10000;');const header=doc.createElement('div');header.setAttribute('style',\"pointer-events: none;display: flex;align-items: center;justify-content: center;flex-direction: row;position: fixed;top: 20%;left: 50%;transform: translateX(-50%);background: #f7f7f7;color: #114990;font-size: 22px;font-weight: 200;z-index: 10001;font-family: system, -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Arial, sans-serif;box-shadow: 0 7px 10px 0 rgba(0,0,0,0.1);border: 1px black solid; border-radius: 50px;padding: 10px;\");const img=doc.createElement('img');img.src=browser.runtime.getURL('/icons/icon_light128.png');img.setAttribute('style','width: 28px;margin: 0 10px;');header.appendChild(img);const span=doc.createElement('span');span.setAttribute('style','border-left: 1px solid #c6c6c6;padding: 3px 10px;');span.innerText='Select an element';header.appendChild(span);setTimeout(()=>{// this has to happen after a timeout, since adding it sync will add the event\n// before the window is focused which will case mousemove to fire before the\n// user actually moves the mouse\nthis.banner.addEventListener('mousemove',()=>{setTimeout(()=>{this.banner.style.visibility='hidden';},300);},false);},300);this.banner.appendChild(header);doc.body.insertBefore(this.banner,div);doc.addEventListener('mousemove',this,true);doc.addEventListener('click',this,true);}cleanup(){try{if(this.div){if(this.div.parentNode){this.div.parentNode.removeChild(this.div);}this.div=null;}if(this.header){if(this.header.parentNode){this.header.parentNode.removeChild(this.header);}this.header=null;}if(this.win){const doc=this.win.document;doc.removeEventListener('mousemove',this,true);doc.removeEventListener('click',this,true);}}catch(e){if(e!=\"TypeError: can't access dead object\"){throw e;}}this.win=null;if(this.cleanupCallback){this.cleanupCallback();}}handleEvent(evt){switch(evt.type){case'mousemove':this.highlight(evt.target.ownerDocument,evt.clientX,evt.clientY);break;case'click':if(evt.button==0&&this.e&&this.callback){this.callback(this.e,this.win);}//Right click would cancel the select\nevt.preventDefault();evt.stopPropagation();this.cleanup();break;}}highlight(doc,x,y){if(doc){const e=doc.elementFromPoint(x,y);if(e&&e!=this.e){this.highlightElement(e);}}}highlightElement(element){if(element&&element!=this.e&&element!==this.banner){this.e=element;}else{return;}const r=element.getBoundingClientRect();const or=this.r;if(r.left>=0&&r.top>=0&&r.width>0&&r.height>0){if(or&&r.top==or.top&&r.left==or.left&&r.width==or.width&&r.height==or.height){return;}this.r=r;const style='pointer-events: none; position: absolute; background-color: rgb(78, 171, 230); opacity: 0.4; border: 1px solid #0e0e0e; z-index: 1000000;';const pos=`top:${r.top+this.win.scrollY}px; left:${r.left+this.win.scrollX}px; width:${r.width}px; height:${r.height}px;`;this.div.setAttribute('style',style+pos);}else if(or){this.div.setAttribute('style','display: none;');}}}/* harmony default export */ __webpack_exports__[\"a\"] = (TargetSelector);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29udGVudC90YXJnZXRTZWxlY3Rvci5qcz8wODY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG4vLyBNb2RpZmllZCBpbiB0b29scy5qcyBmcm9tIHNlbGVuaXVtLUlERVxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0TWF0Y2hQYXR0ZXJuKHN0cmluZyl7aWYoc3RyaW5nIT1udWxsJiYoc3RyaW5nLm1hdGNoKC9eXFx3KjovKXx8c3RyaW5nLmluZGV4T2YoJz8nKT49MHx8c3RyaW5nLmluZGV4T2YoJyonKT49MCkpe3JldHVybidleGFjdDonK3N0cmluZzt9ZWxzZXtyZXR1cm4gc3RyaW5nO319Y2xhc3MgVGFyZ2V0U2VsZWN0b3J7Y29uc3RydWN0b3IoY2FsbGJhY2ssY2xlYW51cENhbGxiYWNrKXt0aGlzLmNhbGxiYWNrPWNhbGxiYWNrO3RoaXMuY2xlYW51cENhbGxiYWNrPWNsZWFudXBDYWxsYmFjazsvLyBUaGlzIGlzIGZvciBYUENPTS9YVUwgYWRkb24gYW5kIGNhbid0IGJlIHVzZWRcbi8vdmFyIHdtID0gQ29tcG9uZW50cy5jbGFzc2VzW1wiQG1vemlsbGEub3JnL2FwcHNoZWxsL3dpbmRvdy1tZWRpYXRvcjsxXCJdLmdldFNlcnZpY2UoQ29tcG9uZW50cy5pbnRlcmZhY2VzLm5zSVdpbmRvd01lZGlhdG9yKTtcbi8vdGhpcy53aW4gPSB3bS5nZXRNb3N0UmVjZW50V2luZG93KCduYXZpZ2F0b3I6YnJvd3NlcicpLmdldEJyb3dzZXIoKS5jb250ZW50V2luZG93O1xuLy8gSW5zdGVhZCwgd2Ugc2ltcGx5IGFzc2lnbiBnbG9iYWwgY29udGVudCB3aW5kb3cgdG8gdGhpcy53aW5cbnRoaXMud2luPXdpbmRvdztjb25zdCBkb2M9dGhpcy53aW4uZG9jdW1lbnQ7Y29uc3QgZGl2PWRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtkaXYuc2V0QXR0cmlidXRlKCdzdHlsZScsJ2Rpc3BsYXk6IG5vbmU7Jyk7ZG9jLmJvZHkuaW5zZXJ0QmVmb3JlKGRpdixkb2MuYm9keS5maXJzdENoaWxkKTt0aGlzLmRpdj1kaXY7dGhpcy5lPW51bGw7dGhpcy5yPW51bGw7dGhpcy5iYW5uZXI9ZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO3RoaXMuYmFubmVyLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdwb3NpdGlvbjogZml4ZWQ7dG9wOiAwO2xlZnQ6IDA7Ym90dG9tOiAwO3JpZ2h0OiAwO2JhY2tncm91bmQ6IHRyYXNwYXJlbnQ7ei1pbmRleDogMTAwMDA7Jyk7Y29uc3QgaGVhZGVyPWRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtoZWFkZXIuc2V0QXR0cmlidXRlKCdzdHlsZScsXCJwb2ludGVyLWV2ZW50czogbm9uZTtkaXNwbGF5OiBmbGV4O2FsaWduLWl0ZW1zOiBjZW50ZXI7anVzdGlmeS1jb250ZW50OiBjZW50ZXI7ZmxleC1kaXJlY3Rpb246IHJvdztwb3NpdGlvbjogZml4ZWQ7dG9wOiAyMCU7bGVmdDogNTAlO3RyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtiYWNrZ3JvdW5kOiAjZjdmN2Y3O2NvbG9yOiAjMTE0OTkwO2ZvbnQtc2l6ZTogMjJweDtmb250LXdlaWdodDogMjAwO3otaW5kZXg6IDEwMDAxO2ZvbnQtZmFtaWx5OiBzeXN0ZW0sIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ0hlbHZldGljYSBOZXVlJywgQXJpYWwsIHNhbnMtc2VyaWY7Ym94LXNoYWRvdzogMCA3cHggMTBweCAwIHJnYmEoMCwwLDAsMC4xKTtib3JkZXI6IDFweCBibGFjayBzb2xpZDsgYm9yZGVyLXJhZGl1czogNTBweDtwYWRkaW5nOiAxMHB4O1wiKTtjb25zdCBpbWc9ZG9jLmNyZWF0ZUVsZW1lbnQoJ2ltZycpO2ltZy5zcmM9YnJvd3Nlci5ydW50aW1lLmdldFVSTCgnL2ljb25zL2ljb25fbGlnaHQxMjgucG5nJyk7aW1nLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCd3aWR0aDogMjhweDttYXJnaW46IDAgMTBweDsnKTtoZWFkZXIuYXBwZW5kQ2hpbGQoaW1nKTtjb25zdCBzcGFuPWRvYy5jcmVhdGVFbGVtZW50KCdzcGFuJyk7c3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywnYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjYzZjNmM2O3BhZGRpbmc6IDNweCAxMHB4OycpO3NwYW4uaW5uZXJUZXh0PSdTZWxlY3QgYW4gZWxlbWVudCc7aGVhZGVyLmFwcGVuZENoaWxkKHNwYW4pO3NldFRpbWVvdXQoKCk9PnsvLyB0aGlzIGhhcyB0byBoYXBwZW4gYWZ0ZXIgYSB0aW1lb3V0LCBzaW5jZSBhZGRpbmcgaXQgc3luYyB3aWxsIGFkZCB0aGUgZXZlbnRcbi8vIGJlZm9yZSB0aGUgd2luZG93IGlzIGZvY3VzZWQgd2hpY2ggd2lsbCBjYXNlIG1vdXNlbW92ZSB0byBmaXJlIGJlZm9yZSB0aGVcbi8vIHVzZXIgYWN0dWFsbHkgbW92ZXMgdGhlIG1vdXNlXG50aGlzLmJhbm5lci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCgpPT57c2V0VGltZW91dCgoKT0+e3RoaXMuYmFubmVyLnN0eWxlLnZpc2liaWxpdHk9J2hpZGRlbic7fSwzMDApO30sZmFsc2UpO30sMzAwKTt0aGlzLmJhbm5lci5hcHBlbmRDaGlsZChoZWFkZXIpO2RvYy5ib2R5Lmluc2VydEJlZm9yZSh0aGlzLmJhbm5lcixkaXYpO2RvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLHRoaXMsdHJ1ZSk7ZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyx0aGlzLHRydWUpO31jbGVhbnVwKCl7dHJ5e2lmKHRoaXMuZGl2KXtpZih0aGlzLmRpdi5wYXJlbnROb2RlKXt0aGlzLmRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZGl2KTt9dGhpcy5kaXY9bnVsbDt9aWYodGhpcy5oZWFkZXIpe2lmKHRoaXMuaGVhZGVyLnBhcmVudE5vZGUpe3RoaXMuaGVhZGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5oZWFkZXIpO310aGlzLmhlYWRlcj1udWxsO31pZih0aGlzLndpbil7Y29uc3QgZG9jPXRoaXMud2luLmRvY3VtZW50O2RvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLHRoaXMsdHJ1ZSk7ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyx0aGlzLHRydWUpO319Y2F0Y2goZSl7aWYoZSE9XCJUeXBlRXJyb3I6IGNhbid0IGFjY2VzcyBkZWFkIG9iamVjdFwiKXt0aHJvdyBlO319dGhpcy53aW49bnVsbDtpZih0aGlzLmNsZWFudXBDYWxsYmFjayl7dGhpcy5jbGVhbnVwQ2FsbGJhY2soKTt9fWhhbmRsZUV2ZW50KGV2dCl7c3dpdGNoKGV2dC50eXBlKXtjYXNlJ21vdXNlbW92ZSc6dGhpcy5oaWdobGlnaHQoZXZ0LnRhcmdldC5vd25lckRvY3VtZW50LGV2dC5jbGllbnRYLGV2dC5jbGllbnRZKTticmVhaztjYXNlJ2NsaWNrJzppZihldnQuYnV0dG9uPT0wJiZ0aGlzLmUmJnRoaXMuY2FsbGJhY2spe3RoaXMuY2FsbGJhY2sodGhpcy5lLHRoaXMud2luKTt9Ly9SaWdodCBjbGljayB3b3VsZCBjYW5jZWwgdGhlIHNlbGVjdFxuZXZ0LnByZXZlbnREZWZhdWx0KCk7ZXZ0LnN0b3BQcm9wYWdhdGlvbigpO3RoaXMuY2xlYW51cCgpO2JyZWFrO319aGlnaGxpZ2h0KGRvYyx4LHkpe2lmKGRvYyl7Y29uc3QgZT1kb2MuZWxlbWVudEZyb21Qb2ludCh4LHkpO2lmKGUmJmUhPXRoaXMuZSl7dGhpcy5oaWdobGlnaHRFbGVtZW50KGUpO319fWhpZ2hsaWdodEVsZW1lbnQoZWxlbWVudCl7aWYoZWxlbWVudCYmZWxlbWVudCE9dGhpcy5lJiZlbGVtZW50IT09dGhpcy5iYW5uZXIpe3RoaXMuZT1lbGVtZW50O31lbHNle3JldHVybjt9Y29uc3Qgcj1lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2NvbnN0IG9yPXRoaXMucjtpZihyLmxlZnQ+PTAmJnIudG9wPj0wJiZyLndpZHRoPjAmJnIuaGVpZ2h0PjApe2lmKG9yJiZyLnRvcD09b3IudG9wJiZyLmxlZnQ9PW9yLmxlZnQmJnIud2lkdGg9PW9yLndpZHRoJiZyLmhlaWdodD09b3IuaGVpZ2h0KXtyZXR1cm47fXRoaXMucj1yO2NvbnN0IHN0eWxlPSdwb2ludGVyLWV2ZW50czogbm9uZTsgcG9zaXRpb246IGFic29sdXRlOyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNzgsIDE3MSwgMjMwKTsgb3BhY2l0eTogMC40OyBib3JkZXI6IDFweCBzb2xpZCAjMGUwZTBlOyB6LWluZGV4OiAxMDAwMDAwOyc7Y29uc3QgcG9zPWB0b3A6JHtyLnRvcCt0aGlzLndpbi5zY3JvbGxZfXB4OyBsZWZ0OiR7ci5sZWZ0K3RoaXMud2luLnNjcm9sbFh9cHg7IHdpZHRoOiR7ci53aWR0aH1weDsgaGVpZ2h0OiR7ci5oZWlnaHR9cHg7YDt0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJyxzdHlsZStwb3MpO31lbHNlIGlmKG9yKXt0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywnZGlzcGxheTogbm9uZTsnKTt9fX1leHBvcnQgZGVmYXVsdCBUYXJnZXRTZWxlY3RvcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2NvbnRlbnQvdGFyZ2V0U2VsZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDM5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///391\n");

/***/ }),

/***/ 394:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = editRegion;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = removeRegion;\n// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst coords={startX:0,startY:0,endX:0,endY:0};const mouseOffset={x:0,y:0};const STATES={create:1,update:2,resize:3};let state=STATES.create;let canvasExists=false;function editRegion(rect,cb){if(canvasExists){return cb(false);}const container=document.createElement('div');container.id='selenium-container';const canvas=document.createElement('div');canvas.id='selenium-canvas';const region=createRegion();setStyle(canvas,region);setEvents(container);const buttonContainer=createButtons(cb);buttonContainer.style.zIndex='10002';if(rect){region.style.left=`${rect.x}px`;region.style.top=`${rect.y}px`;region.style.width=`${rect.width}px`;region.style.height=`${rect.height}px`;}container.appendChild(buttonContainer);container.appendChild(canvas);container.appendChild(region);document.body.appendChild(container);canvasExists=true;}function removeRegion(){if(canvasExists){document.body.removeChild(document.getElementById('selenium-container'));}canvasExists=false;}function setStyle(canvas,region){canvas.style.position='fixed';canvas.style.top=0;canvas.style.bottom=0;canvas.style.right=0;canvas.style.left=0;canvas.style.zIndex='10000';canvas.style.cursor='crosshair';region.style.position='absolute';region.style.zIndex='10001';region.style.backgroundColor='rgb(78, 171, 230)';region.style.opacity='0.4';region.style.border='1px solid #0e0e0e';}function setEvents(container){container.addEventListener('mousedown',mousedown);container.addEventListener('mouseup',mouseup);}function mousedown(e){const container=document.getElementById('selenium-container');const canvas=document.getElementById('selenium-canvas');const region=document.getElementById('selenium-region');e.stopPropagation();if(e.target.tagName==='BUTTON')return;if(e.target===canvas){updateRegion(e.pageX,e.pageY,e.pageX,e.pageY);state=STATES.create;region.style.cursor='crosshair';}else if(e.target===region){state=STATES.update;mouseOffset.x=e.pageX;mouseOffset.y=e.pageY;region.style.cursor='move';}else if(e.target.parentElement===region){state=STATES.resize;}container.addEventListener('mousemove',mousemove);}function mousemove(e){e.stopPropagation();if(e.target.tagName==='BUTTON')return;if(state===STATES.create||state===STATES.resize){updateRegion(undefined,undefined,e.pageX,e.pageY);}else if(state===STATES.update){moveRegion(e.pageX,e.pageY);}}function mouseup(e){const container=document.getElementById('selenium-container');const canvas=document.getElementById('selenium-canvas');const region=document.getElementById('selenium-region');e.stopPropagation();region.style.cursor='move';canvas.style.cursor='crosshair';container.removeEventListener('mousemove',mousemove);showButtons();}function calculateRectFromCoords(coords){return calculateRect({x:coords.startX,y:coords.startY},{x:coords.endX,y:coords.endY});}function calculateRect(p1,p2){return{left:Math.min(p1.x,p2.x),top:Math.min(p1.y,p2.y),width:Math.abs(p1.x-p2.x),height:Math.abs(p1.y-p2.y)};}function updateRegion(startX,startY,endX,endY){hideButtons();const region=document.getElementById('selenium-region');if(startX){coords.startX=startX;}if(startY){coords.startY=startY;}if(endX){coords.endX=endX;}if(endY){coords.endY=endY;}const rect=calculateRectFromCoords(coords);region.style.left=`${rect.left}px`;region.style.top=`${rect.top}px`;region.style.width=`${rect.width}px`;region.style.height=`${rect.height}px`;}function moveRegion(mouseX,mouseY){let dx=mouseOffset.x-mouseX;let dy=mouseOffset.y-mouseY;mouseOffset.x=mouseX;mouseOffset.y=mouseY;if(coords.startX-dx<5||coords.endX-dx<5)dx=0;if(coords.startY-dy<5||coords.endY-dy<5)dy=0;updateRegion(coords.startX-dx,coords.startY-dy,coords.endX-dx,coords.endY-dy);}function createRegion(){const region=document.createElement('div');region.id='selenium-region';const cornerSize=20;const tlc=createHotCorner(cornerSize);tlc.style.top='-5px';tlc.style.left='-5px';tlc.style.cursor='nw-resize';tlc.addEventListener('mousedown',()=>{const canvas=document.getElementById('selenium-canvas');const region=document.getElementById('selenium-region');canvas.style.cursor='nw-resize';region.style.cursor='nw-resize';updateRegion(Math.max(coords.startX,coords.endX),Math.max(coords.startY,coords.endY),Math.min(coords.startX,coords.endX),Math.min(coords.startY,coords.endY));});region.appendChild(tlc);const trc=createHotCorner(cornerSize);trc.style.top='-5px';trc.style.right='-5px';trc.style.cursor='ne-resize';trc.addEventListener('mousedown',()=>{const canvas=document.getElementById('selenium-canvas');const region=document.getElementById('selenium-region');canvas.style.cursor='ne-resize';region.style.cursor='ne-resize';updateRegion(Math.min(coords.startX,coords.endX),Math.max(coords.startY,coords.endY),Math.max(coords.startX,coords.endX),Math.min(coords.startY,coords.endY));});region.appendChild(trc);const blc=createHotCorner(cornerSize);blc.style.bottom='-5px';blc.style.left='-5px';blc.style.cursor='sw-resize';blc.addEventListener('mousedown',()=>{const canvas=document.getElementById('selenium-canvas');const region=document.getElementById('selenium-region');canvas.style.cursor='sw-resize';region.style.cursor='sw-resize';updateRegion(Math.max(coords.startX,coords.endX),Math.min(coords.startY,coords.endY),Math.min(coords.startX,coords.endX),Math.max(coords.startY,coords.endY));});region.appendChild(blc);const brc=createHotCorner(cornerSize);brc.style.bottom='-5px';brc.style.right='-5px';brc.style.cursor='se-resize';brc.addEventListener('mousedown',()=>{const canvas=document.getElementById('selenium-canvas');const region=document.getElementById('selenium-region');canvas.style.cursor='se-resize';region.style.cursor='se-resize';updateRegion(Math.min(coords.startX,coords.endX),Math.min(coords.startY,coords.endY),Math.max(coords.startX,coords.endX),Math.max(coords.startY,coords.endY));});region.appendChild(brc);return region;}function createHotCorner(size){const c=document.createElement('div');c.style.position='absolute';c.style.height=`${size}px`;c.style.width=`${size}px`;return c;}function showButtons(){const canvasRect=document.getElementById('selenium-canvas').getBoundingClientRect();const buttonContainer=document.getElementById('region-control-panel');let top=coords.startY;let bottom=coords.endY;let left=coords.startX;let right=coords.endX;let width=right-left;if(canvasRect.bottom-bottom<=100)bottom=top;if(width<0)left=coords.endX;right=coords.startX;width=Math.abs(width);if(width<225)width=225;buttonContainer.style.position='absolute';buttonContainer.style.top=bottom+'px';buttonContainer.style.left=left+'px';buttonContainer.style.right=right+'px';buttonContainer.style.width=width+'px';buttonContainer.style.backgroundColor='rgba(0, 0, 0, 0.55)';buttonContainer.style.visibility='visible';}function hideButtons(){const buttonContainer=document.getElementById('region-control-panel');buttonContainer.style.visibility='hidden';}function createButtons(cb){const container=document.createElement('div');container.id='region-control-panel';const buttons=document.createElement('div');const confirm=document.createElement('button');confirm.innerText='Confirm';confirm.addEventListener('click',()=>{hideButtons();removeRegion();const rect=calculateRectFromCoords(coords);cb(`x: ${rect.left}, y: ${rect.top}, width: ${rect.width}, height: ${rect.height}`);});const cancel=document.createElement('button');cancel.innerText='Cancel';cancel.addEventListener('click',()=>{hideButtons();removeRegion();cb(false);});container.style.visibility='hidden';buttons.style.display='flex';buttons.style.alignItems='center';buttons.style.justifyContent='center';styleButton(confirm);styleButton(cancel);buttons.appendChild(cancel);buttons.appendChild(confirm);container.appendChild(buttons);return container;}function styleButton(button){button.style.color='#656565';button.style.backgroundColor='#F5F5F5';button.style.padding='10px 20px';button.style.margin='5px 8px';button.style.borderRadius='4px';button.style.outline='0';button.style.textTransform='capitalize';}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///394\n");

/***/ }),

/***/ 395:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = attach;\n/* unused harmony export detach */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill__);\n// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nlet handler,elementForInjectingScript;function attach(selenium){elementForInjectingScript=document.createElement('script');elementForInjectingScript.src=__WEBPACK_IMPORTED_MODULE_0_webextension_polyfill___default.a.runtime.getURL('/assets/prompt.js');(document.head||document.documentElement).appendChild(elementForInjectingScript);if(window===window.top){handler=e=>{return handleMessage(e,selenium);};window.addEventListener('message',handler);}}function detach(){window.postMessage({direction:'from-content-script',detach:true},'*');elementForInjectingScript.parentNode.removeChild(elementForInjectingScript);window.removeEventListener('message',handler);}function handleMessage(event,selenium){if(event.source.top==window&&event.data&&event.data.direction=='from-page-script'){if(event.data.response){switch(event.data.response){case'prompt':selenium.browserbot.promptResponse=true;if(event.data.value)selenium.browserbot.promptMessage=event.data.value;break;case'confirm':selenium.browserbot.confirmationResponse=true;if(event.data.value)selenium.browserbot.confirmationMessage=event.data.value;break;case'alert':selenium.browserbot.alertResponse=true;if(event.data.value)selenium.browserbot.alertMessage=event.data.value;break;}}}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29udGVudC9wcm9tcHQtaW5qZWN0b3IuanM/YTlkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IGJyb3dzZXIgZnJvbSd3ZWJleHRlbnNpb24tcG9seWZpbGwnO2xldCBoYW5kbGVyLGVsZW1lbnRGb3JJbmplY3RpbmdTY3JpcHQ7ZXhwb3J0IGZ1bmN0aW9uIGF0dGFjaChzZWxlbml1bSl7ZWxlbWVudEZvckluamVjdGluZ1NjcmlwdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtlbGVtZW50Rm9ySW5qZWN0aW5nU2NyaXB0LnNyYz1icm93c2VyLnJ1bnRpbWUuZ2V0VVJMKCcvYXNzZXRzL3Byb21wdC5qcycpOyhkb2N1bWVudC5oZWFkfHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmFwcGVuZENoaWxkKGVsZW1lbnRGb3JJbmplY3RpbmdTY3JpcHQpO2lmKHdpbmRvdz09PXdpbmRvdy50b3Ape2hhbmRsZXI9ZT0+e3JldHVybiBoYW5kbGVNZXNzYWdlKGUsc2VsZW5pdW0pO307d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLGhhbmRsZXIpO319ZXhwb3J0IGZ1bmN0aW9uIGRldGFjaCgpe3dpbmRvdy5wb3N0TWVzc2FnZSh7ZGlyZWN0aW9uOidmcm9tLWNvbnRlbnQtc2NyaXB0JyxkZXRhY2g6dHJ1ZX0sJyonKTtlbGVtZW50Rm9ySW5qZWN0aW5nU2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudEZvckluamVjdGluZ1NjcmlwdCk7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLGhhbmRsZXIpO31mdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGV2ZW50LHNlbGVuaXVtKXtpZihldmVudC5zb3VyY2UudG9wPT13aW5kb3cmJmV2ZW50LmRhdGEmJmV2ZW50LmRhdGEuZGlyZWN0aW9uPT0nZnJvbS1wYWdlLXNjcmlwdCcpe2lmKGV2ZW50LmRhdGEucmVzcG9uc2Upe3N3aXRjaChldmVudC5kYXRhLnJlc3BvbnNlKXtjYXNlJ3Byb21wdCc6c2VsZW5pdW0uYnJvd3NlcmJvdC5wcm9tcHRSZXNwb25zZT10cnVlO2lmKGV2ZW50LmRhdGEudmFsdWUpc2VsZW5pdW0uYnJvd3NlcmJvdC5wcm9tcHRNZXNzYWdlPWV2ZW50LmRhdGEudmFsdWU7YnJlYWs7Y2FzZSdjb25maXJtJzpzZWxlbml1bS5icm93c2VyYm90LmNvbmZpcm1hdGlvblJlc3BvbnNlPXRydWU7aWYoZXZlbnQuZGF0YS52YWx1ZSlzZWxlbml1bS5icm93c2VyYm90LmNvbmZpcm1hdGlvbk1lc3NhZ2U9ZXZlbnQuZGF0YS52YWx1ZTticmVhaztjYXNlJ2FsZXJ0JzpzZWxlbml1bS5icm93c2VyYm90LmFsZXJ0UmVzcG9uc2U9dHJ1ZTtpZihldmVudC5kYXRhLnZhbHVlKXNlbGVuaXVtLmJyb3dzZXJib3QuYWxlcnRNZXNzYWdlPWV2ZW50LmRhdGEudmFsdWU7YnJlYWs7fX19fVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vY29udGVudC9wcm9tcHQtaW5qZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDM5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///395\n");

/***/ })

},[333]);
});